##TEMPLATE-NAME 'PascalABC.NET'
##LANGUAGE 'Haskell'
##ENGINE-NAME 'PascalABCNET GOLD Parser Engine'
##AUTHOR 'Tasha' 
##FILE-EXTENSION 'cs'
##NOTES
Haskell parser template. 
Version 1.0
##END-NOTES
##ID-CASE UPPERCASE
##ID-SEPARATOR '_'
##ID-SYMBOL-PREFIX 'Symbol'
##ID-RULE-PREFIX 'Rule'

using System;
using System.IO;
using System.Runtime.Serialization;
using System.Collections;
using PascalABCCompiler.SyntaxTree;
using PascalABCCompiler.Errors;
using PascalABCCompiler.HaskellParser.Errors;
using PascalABCCompiler.ParserTools;
using GoldParser;

namespace  PascalABCCompiler.HaskellParser
{
public partial class GPBParser_Haskell : GPBParser
{







///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//SymbolConstants
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

public enum SymbolConstants : int
{
##SYMBOLS
##DELIMITER ','
	%ID.Padded% = %Value.Padded%%Delimiter% // %Description%
##END-SYMBOLS
};














///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//RuleConstants
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

public enum RuleConstants : int
{
##RULES
##DELIMITER ','
	%ID.Padded% = %Value.Padded%%Delimiter% // %Description%
##END-RULES
};













///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//CreateTerminalObject
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

private Object CreateTerminalObject(int TokenSymbolIndex)
{
switch (TokenSymbolIndex)
{
##SYMBOLS
	case (int)SymbolConstants.%ID% :
    	//%Description%
	//TERMINAL:%Name%
	return null;
	//ENDTERMINAL
##END-SYMBOLS
}
throw new SymbolException("Unknown symbol");
}















///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//CreateNonTerminalObject
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
public ArrayList param_value_list = new ArrayList();
public ArrayList body_variant_list = new ArrayList();
public ArrayList param_value_list_main = new ArrayList();
public ArrayList body_variant_list_main = new ArrayList();
public ArrayList guard_list = new ArrayList();
public ArrayList guard_list_main = new ArrayList();
public ArrayList where_list_var = new ArrayList();
public ArrayList where_list_assign = new ArrayList();
public ArrayList where_list_var_main = new ArrayList();
public ArrayList where_list_assign_main = new ArrayList();
public ArrayList func_name = new ArrayList();
public ArrayList where_list_counts=new ArrayList();
public ArrayList where_list_counts_main = new ArrayList();
public int decls_counts = 0;
public bool where_flag = false;
public ArrayList list_param = new ArrayList();
public ArrayList list_params = new ArrayList();
public ArrayList list_params_temp = new ArrayList();
public ArrayList list_params_main = new ArrayList();
public ArrayList _function_lambda_definitions = new ArrayList();
public ArrayList _function_lambda_definitions_after = new ArrayList();
public int lambda_num = 0;
public ArrayList _functions = new ArrayList();
public ArrayList list_method_calls = new ArrayList();
public ArrayList list_method_calls_main = new ArrayList();
public ArrayList list_return_funcs = new ArrayList();
public ArrayList list_return_funcs_main = new ArrayList();
public ArrayList list_params1 = new ArrayList();
public ArrayList last_function_lambda_definitions = new ArrayList();
public ArrayList last_list_method_calls = new ArrayList();
public ArrayList last_list_method_calls_lambda = new ArrayList();
public ArrayList let_fact_params = new ArrayList();
public ArrayList let_funcs = new ArrayList();
public ArrayList let_funcs_funcs = new ArrayList();
public ArrayList let_func_last = new ArrayList();
public ArrayList let_funcs1 = new ArrayList();
public ArrayList let_flag = new ArrayList();
public struct types_param_lampda
{
    public string name;
    public ArrayList types;
}
public ArrayList list_method_calls_lambda = new ArrayList();

public Object CreateNonTerminalObject(int ReductionRuleIndex)
{
switch (ReductionRuleIndex)
{
##RULES
	case (int)RuleConstants.%ID% :
	//%Description%
	//NONTERMINAL:%Description%
	return null;
	//ENDNONTERMINAL
##END-RULES
}
throw new RuleException("Unknown rule");
}  

public method_call _ob(object dt)
    {
        token_info _token_info = new token_info(".");
        _token_info.source_context = parsertools.GetTokenSourceContext();
        ///////////
        ident id = new ident("ob");
        dot_node _dot_node = new dot_node(null, (addressed_value)id);
        parsertools.create_source_context(_dot_node, _token_info, id);
        _dot_node.left = (addressed_value)dt;
        parsertools.create_source_context(_dot_node, dt, _dot_node.right);
        /////////////////////////
        expression_list el = new expression_list();
        el.expressions.Add(_dot_node);
        method_call _method_call = new method_call(el);
        parsertools.create_source_context(_method_call, null, null);
        /////////////////////////
        ident id1 = new ident("boolean");
        /////////////////////////
        if (_method_call is dereference)
        {
            ((dereference)_method_call).dereferencing_value = (addressed_value)id1;
            parsertools.create_source_context(_method_call, id1, _method_call);
        }
        return _method_call;
    }
public procedure_definition lambda(function_lambda_definition _function_lambda_definition)
{
    SyntaxTree.procedure_definition _func_def = new PascalABCCompiler.SyntaxTree.procedure_definition();
    SyntaxTree.method_name _method_name1 = new SyntaxTree.method_name(null, new SyntaxTree.ident(_function_lambda_definition.lambda_name), null);
    SyntaxTree.function_header _function_header1 = new SyntaxTree.function_header();

    object rt1 = new object();
    _function_header1.name = _method_name1;
    SyntaxTree.formal_parametres fps = new PascalABCCompiler.SyntaxTree.formal_parametres();
    _function_header1.parametres = _function_lambda_definition.formal_parametres;//fps;
    SyntaxTree.named_type_reference _named_type_reference = new SyntaxTree.named_type_reference();
    SyntaxTree.ident idtype = new SyntaxTree.ident("datatype");
    _named_type_reference.source_context = idtype.source_context;
    _named_type_reference.names.Add(idtype);

    rt1 = _named_type_reference;
    _function_header1.return_type = (SyntaxTree.type_definition)_named_type_reference;

    _function_header1.of_object = false;
    _function_header1.class_keyword = false;
    SyntaxTree.block _block1 = new SyntaxTree.block(null, null);
    SyntaxTree.statement_list sl1 = new SyntaxTree.statement_list();
    sl1.subnodes.Add(_function_lambda_definition.proc_body);
    _block1.program_code = sl1;
    _func_def.proc_header = _function_header1;
    _func_def.proc_body = (SyntaxTree.proc_block)_block1;
    _function_lambda_definition.proc_definition = _func_def;
    return _func_def;
}

public procedure_definition find_function1(string name)
{
    int i = 0;
    while (i < _functions.Count && ((procedure_definition)_functions[i]).proc_header.name.meth_name.name != name)
        i++;
    if (i < _functions.Count)
        return (procedure_definition)_functions[i];
    else
        return null;
}

public int find_count_params(string name)
{
    if (param_value_list_main.Count == 0 && param_value_list.Count == 0)
    {
        int i = 0;
        while (i < _functions.Count && ((procedure_definition)_functions[i]).proc_header.name.meth_name.name != name)
            i++;
        if (i < _functions.Count)
        {
            if (((procedure_definition)_functions[i]).proc_header.parametres == null)
                return 0;
            else
                return ((procedure_definition)_functions[i]).proc_header.parametres.params_list.Count;
        }
        else
            return 0;
    }
    else
    {
        int i = 0;
        while (i < func_name.Count && ((ident)func_name[i]).name != name)
            i++;
        if (i < func_name.Count)
        {
            if (i >= param_value_list_main.Count)
            {
                if (i >= param_value_list_main.Count)
                //if (param_value_list_main.Count==0)
                {
                    if (param_value_list[param_value_list.Count - 1] == null)
                        return 0;
                    else
                        return ((expression_list)param_value_list[param_value_list.Count - 1]).expressions.Count;
                }
                else
                    return 0;
            }
            else
            {
                if (((ArrayList)param_value_list_main[i])[((ArrayList)param_value_list_main[i]).Count - 1] == null)
                    return 0;
                else
                    return ((expression_list)((ArrayList)param_value_list_main[i])[((ArrayList)param_value_list_main[i]).Count - 1]).expressions.Count;
            }
        }
        else
            return 0;
    }
}
public int find_count_params_lambda(string name)
{
    int i = 0;
    while (i < _function_lambda_definitions_after.Count && ((function_lambda_definition)_function_lambda_definitions_after[i]).lambda_name != name)
        i += 2;
    if (i < _function_lambda_definitions_after.Count)
        return ((function_lambda_definition)_function_lambda_definitions_after[i]).formal_parametres.params_list.Count;
    else
        return -1;
}

public string find_name_params_lambda(string name, int ind)
{
    int i = 0;
    while (i < _function_lambda_definitions_after.Count && ((function_lambda_definition)_function_lambda_definitions_after[i]).lambda_name != name)
        i += 2;
    if (i < _function_lambda_definitions_after.Count)
    {
        formal_parametres fp = ((function_lambda_definition)_function_lambda_definitions_after[i]).formal_parametres;
        if (ind < fp.params_list.Count)
            return fp.params_list[ind].idents.idents[0].name;
        else
            return "";
    }
    else
        return "";
}

public bool find_func_name(string name)
{
    int i = 0;
    while (i < func_name.Count && ((ident)func_name[i]).name != name)
        i++;
    if (i < func_name.Count)
        return true;
    else
        return false;
}

public function_lambda_definition find_func_lambda_name(string name)
{
    int i = 0;
    while (i < _function_lambda_definitions.Count && ((function_lambda_definition)_function_lambda_definitions[i]).lambda_name != name)
        i++;
    if (i < _function_lambda_definitions.Count)
        return (function_lambda_definition)_function_lambda_definitions[i];
    else
        return null;
}

public type_definition func_type(int count)
{
    //int count = mc.parametres.expressions.Count;

    formal_parametres _formal_parametres = new formal_parametres();
    for (int i = 0; i < count; i++)
    {
        ident_list _ident_list = new ident_list();
        ident id = new ident("$a" + i.ToString());
        _ident_list.idents.Add(id);
        named_type_reference _named_type_reference1 = new named_type_reference();
        ident idtype1 = new ident("datatype");
        _named_type_reference1.names.Add(idtype1);
        typed_parametres _typed_parametres = new typed_parametres(_ident_list, (type_definition)_named_type_reference1, parametr_kind.none, null);
        _formal_parametres.params_list.Add(_typed_parametres);
    }
    named_type_reference _named_type_reference = new named_type_reference();
    ident idtype = new ident("datatype");
    _named_type_reference.names.Add(idtype);
    function_header _function_header = new function_header();
    _function_header.parametres = _formal_parametres;
    _function_header.return_type = (type_definition)_named_type_reference;
    _function_header.of_object = false;
    _function_header.class_keyword = false;
    return (type_definition)_function_header;
}

public var_statement var_st(string name, type_definition td)
{
    ident_list il = new ident_list();
    il.idents.Add(new ident(name));
    var_def_statement _var_def_statement = new var_def_statement(il, td, null, definition_attribute.None, false);
    return new var_statement(_var_def_statement);
}

public method_call find_method_call(string name, int k)
{
    int i = 0;
    while (i < ((ArrayList)list_method_calls_main[k]).Count &&
        ((ident)((method_call)((ArrayList)list_method_calls_main[k])[i]).dereferencing_value).name != name)
        i++;
    if (i < ((ArrayList)list_method_calls_main[k]).Count)
        return (method_call)((ArrayList)list_method_calls_main[k])[i];
    else
        return null;
}

public method_call  find_method_call_lambda(string name)
{
    int i = 0;
    while (i < list_method_calls_lambda.Count &&
        ((ident)((method_call)list_method_calls_lambda[i]).dereferencing_value).name != name)
        i++;
    if (i < list_method_calls_lambda.Count)
        return (method_call)list_method_calls_lambda[i];
    else
        return null;
}
public function_lambda_definition find_func_lambda_after(string name)
{
    int i = 0;
    while (i < _function_lambda_definitions_after.Count &&
        ((function_lambda_definition)_function_lambda_definitions_after[i]).lambda_name != name)
        i += 2;
    if (i < _function_lambda_definitions_after.Count)
        return _function_lambda_definitions_after[i] as function_lambda_definition;
    else
        return null;
}
public ArrayList find_params(string name)
{
    ArrayList _params = new ArrayList(); 
    if (param_value_list_main.Count == 0 && param_value_list.Count == 0)
    {
        int i = 0;
        while (i < _functions.Count && ((procedure_definition)_functions[i]).proc_header.name.meth_name.name != name)
            i++;
        if (i < _functions.Count)
        {
            if (((procedure_definition)_functions[i]).proc_header.parametres == null)
                return _params;
            else
            {
                for (int j = 0; j < ((procedure_definition)_functions[i]).proc_header.parametres.params_list.Count; j++)
                    _params.Add(((procedure_definition)_functions[i]).proc_header.parametres.params_list[j]);
                    return _params;
            }
        }
        else
            return _params;
    }
    else
    {
        int i = 0;
        while (i < func_name.Count && ((ident)func_name[i]).name != name)
            i++;
        if (i < func_name.Count)
        {
            if (i >= param_value_list_main.Count)
            {
                if (i >= param_value_list_main.Count)
                //if (param_value_list_main.Count==0)
                {
                    if (param_value_list[param_value_list.Count - 1] == null)
                        return _params;
                    else
                    {
                        for (int j = 0; j < ((expression_list)param_value_list[param_value_list.Count - 1]).expressions.Count; j++)
                            _params.Add(((expression_list)param_value_list[param_value_list.Count - 1]).expressions[j]);
                        return _params;
                    }
                }
                else
                    return _params;
            }
            else
            {
                if (((ArrayList)param_value_list_main[i])[((ArrayList)param_value_list_main[i]).Count - 1] == null)
                    return _params;
                else
                {
                    for (int j = 0; j < ((expression_list)((ArrayList)param_value_list_main[i])[((ArrayList)param_value_list_main[i]).Count - 1]).expressions.Count; j++)
                        _params.Add(((expression_list)((ArrayList)param_value_list_main[i])[((ArrayList)param_value_list_main[i]).Count - 1]).expressions[j]);
                    return _params;
                }
            }
        }
        else
            return _params;
    }
}



} 
}
