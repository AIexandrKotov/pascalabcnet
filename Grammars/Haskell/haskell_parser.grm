!=========================================================================
!
!   This is a version of programming language Haskell
!
!=========================================================================


"Name"    = 'Haskell' 
"Author"  = 'Tasha' 
"About"   = 'A version of the Haskell language.'

"Case Sensitive" = True
"Start Symbol"   = <module>



!<%NAME%> %CODE%
!*
[TERMINALTEMPLATE]
		{
			%NAME% _%NAME%=new %NAME%(%PARAMS%);
			_%NAME%.source_context=parsertools.GetTokenSourceContext();
			%CODE%
			return _%NAME%;
		}
*!

!%NAME%<%PARAMS%> %CODE%
!%PARAMS%=$1,$2,...
!*
[NONTERMINALTEMPLATE0]         
		{
			%NAME% _%NAME%=new %NAME%(%PARAMS%);
			parsertools.create_source_context(_%NAME%,%LEFTTOKEN%,%RIGHTTOKEN%);
			%CODE%
			return _%NAME%;
		}
*!

!add to list
!*
[NONTERMINALTEMPLATE1]         
		{
			%NAME% _%NAME%=(%NAME%)%CODE%
			return _%NAME%;
		}
*!

!*
[NONTERMINALTEMPLATE2]         
		{
			%NAME% _%NAME%;
			%CODE%
			return _%NAME%;
		}
*!


!*
[NONTERMINALTEMPLATE3]         
		{
			%NAME% _%NAME%=new %NAME%(%PARAMS%);
			%CODE%
			return _%NAME%;
		}
*!

                  
!for list: 
!<el>
!<list> token <el>
!*
[NONTERMINALTEMPLATE6]         
		//TemplateList for %NAME% (create)
		{
			%NAME% _%NAME%=new %NAME%();
			_%NAME%.source_context=((%CODE%)$1).source_context;
			_%NAME%.%PARAMS%.Add((%CODE%)$1);
			return _%NAME%;
		}
*!
!*
[NONTERMINALTEMPLATE7]
		//TemplateList for %NAME% (add)         
		{
			%NAME% _%NAME%=(%NAME%)$1;
			parsertools.create_source_context(_%NAME%,$$,$3);
			_%NAME%.%PARAMS%.Add($3 as %CODE%);
			return _%NAME%;
		}
*!

!*
[NONTERMINALTEMPLATE8]
{
                    procedure_call pc = new procedure_call();
			expression_list expr = new expression_list();
			expr.expressions.Add((expression)$2);
			method_call mc = new method_call(expr);
			mc.dereferencing_value = new ident("%NAME%");
			pc.func_name = mc;
			parsertools.create_source_context(mc.dereferencing_value,$2,$2);
			parsertools.create_source_context(expr,$2,$2);
			parsertools.create_source_context(mc,$1,$2);
			parsertools.create_source_context(pc,$1,$2);
			return pc;
}
*!

{Chars}		= {ANSI Printable} + {HT} + {Cyrillic}
{String Chars} 	= {ANSI Printable} + {HT} + {Cyrillic} - ["]

Comment Start =  '{-'
Comment End   =  '-}'
Comment Line   =  '--'

tkIdent   	  = {Letter}{Alphanumeric}*		!*$$=parsertools.create_ident(this);*!
tkInt  	  = {digit}+           		!*$$=parsertools.create_int_const(this);*!
tkDouble        = {Digit}+[.]{Digit}+ 		!*$$=parsertools.create_double_const(this);*!
tkChar	         = ''{Chars}''               !*$$=parsertools.create_char_const(this);*!
tkString	  = '"'{String Chars}* '"'    !*$$=parsertools.create_string_const(this);*!
tkBool          = (True) | (False) | (true) | (false)	              !*{
							ident _ident = null;
            					string s = LRParser.TokenText;
            					if (s == "True" || s == "true")
                						s = "true";
                					else 
								s = "false";
           						_ident =new ident(s);
            					_ident.source_context = parsertools.GetTokenSourceContext();
            					return _ident;
    							}*!
            	

tkModule    = 'module'					!*<token_info>*!
tkWhere     = 'where'					!*{
            token_where = 1;
            token_where_count++;
			token_info _token_info=new token_info(LRParser.TokenText);
			_token_info.source_context=parsertools.GetTokenSourceContext();
			
			return _token_info;
		}*!
tkDo        = 'do'						!*<token_info>*!
tkIf        = 'if'						!*<token_info>*!
tkThen      = 'then'						!*<token_info>*!
tkElse      = 'else'						!*<token_info>*!
tkCase      = 'case'						!*<token_info>*!
tkOf        = 'of'						!*<token_info>*!
tkLet       = 'let'						!*<token_info>*!
tkIn        = 'in'						!*<token_info>*!
tkReturn    = 'return'					!*<token_info>*!

tkMinus 	      = '-'				!*<op_type_node(Operators.Minus)>*!
tkPlus 	      = '+'				!*<op_type_node(Operators.Plus)>*!
tkSlash 	      = '/'                   	!*<op_type_node(Operators.IntegerDivision)>*!
tkStar 	      = '*'                   	!*<op_type_node(Operators.Multiplication)>*!
tkSemiColon 	      = ';'      		      	!*<token_info>*!
tkDot 	      	      = '.'      		       !*<token_info>*!
tkAssign 	      = '='      		       !*{
            if (token_where == 2 || token_where == 1)
            {
                token_where = 0;
                //if (let_where_funcs_main.Count > 1)
                    //for (int i = 0; i  let_where_funcs.Count; i++)
                        //if (let_funcs.Count > 0)
                            //let_funcs.RemoveAt(let_funcs.Count - 1);
                let_where_funcs_main.Add(let_where_funcs.Clone());
                let_where_funcs.Clear();
            }
			token_info _token_info=new token_info(LRParser.TokenText);
			_token_info.source_context=parsertools.GetTokenSourceContext();
			
			return _token_info;
		}*!
tkRoundOpen         = '('				!*<token_info>*!
tkRoundClose        = ')'				!*<token_info>*!
tkFigureOpen        = '{'				!*<token_info>*!
tkFigureClose       = '}'				!*<token_info>*!
tkSquareOpen        = '['				!*<token_info>*!
tkSquareClose       = ']'				!*<token_info>*!
tkMainIdent	      = 'Main'			!*<token_info>*!
tkMainIdent1	      = 'main'			!*<token_info>*!
tkArrow	      = '->'				!*<token_info>*!
tkMore              = '>'                       !*<op_type_node(Operators.Greater)>*!
tkLess              = '<'                       !*<op_type_node(Operators.Less)>*!
tkMoreEq            = '>='                      !*<op_type_node(Operators.GreaterEqual)>*!
tkLessEq            = '<='                      !*<op_type_node(Operators.LessEqual)>*!
tkEqual             = '=='                      !*<op_type_node(Operators.Equal)>*!
tkNotEqual          = '/='                      !*<op_type_node(Operators.NotEqual)>*!
tkOr		      = 'or'				!*<op_type_node(Operators.LogicalOR)>*!
tkAnd		      = 'and'				!*<op_type_node(Operators.LogicalAND)>*!
tkNot		      = 'not'				!*<op_type_node(Operators.LogicalNOT)>*!
tkImport	      = 'import'			!*<token_info>*!
tkRef               = '#reference'			!*$$=parsertools.create_directive_name(this);*!
tkSplit             = '|'				!*<token_info>*!
tkComma             = ','				!*<token_info>*!
tkColon             = ':'				!*<token_info>*!
tkLeftSlash         = '\'				!*<token_info>*!
tkOtherwise         = 'otherwise'               !*<token_info>*!
tkArrowGen	      = '<-'				!*<token_info>*!
tkQuote             = '`'                       !*<token_info>*!
tkBottomMinus       = '_'                       !*<token_info>*!          

<module>::= tkModule tkMainIdent tkWhere <reference> <imports> <body> <empty>    
          | <reference> <imports> <body> <empty>			
          | tkModule tkIdent tkWhere <reference> <imports> <funcs> <empty>

<reference>::= 
	      | tkRef tkString				

<imports>::= 
	    | <import> <empty>				
	    | <imports> <empty> <import>		

<import>::= tkImport tkIdent				

<body>::= <main_func>					
	 | <funcs> <main_func>   	

<funcs>::= <funcs_variants> <empty>			

<funcs_variants>::= <variants>	<empty>		             

<variants>::= <variant> <empty>				
	     | <variants> <variant>				

<variant>::= tkIdent <params> <guard_body_list> <where_var>
           | <list_param1> tkQuote tkIdent tkQuote <list_param1> <guard_body_list> <where_var>

<list_param1>::= <list_param><empty>

<body_where>::= <body_func> <where_var>         

<where_var>::=                                         
	      | tkWhere <inits>                      

<inits>::= <init> <empty>					
         | <inits> tkSemiColon <init>			

<init>::= tkIdent <params_where> <guard_body_list> <where_var>	

<params_where>::= 
	   | <param> <empty>					
	   | <params_where> <param>				

<params>::= 
	   | <param> <empty>					
	   | <params> <param>				

<param>::= <list_param>					

<list_param> ::= tkIdent <empty>	
               | <simple_type_expr> <empty>
               | tkSquareOpen tkSquareClose
               | tkBottomMinus	
		 | tkIdent tkColon <list_param>
               | tkBottomMinus tkColon <list_param> 	
               | tkRoundOpen <list_param> tkRoundClose

<guard>::=
         | tkSplit <expr>
         | tkSplit tkOtherwise					

<main_func>::= tkMainIdent1 tkAssign <body_func>   	

<body_func>::= <stmt>
             
<stmts>::= <stmt> <empty><empty>	
         | <stmts> tkSemiColon <stmt>

<stmts1>::= <stmt><empty><empty>	
         | <stmts1> <stmt>		
									
<expr>::= <expr> tkEqual <add_expr>
        | <expr> tkNotEqual <add_expr>		
	 | <expr> tkMore <add_expr>		
	 | <expr> tkLess <add_expr>		
	 | <expr> tkMoreEq <add_expr>		
	 | <expr> tkLessEq <add_expr>		
	 | <add_expr>

<list>::= tkSquareOpen <list_elements> tkSquareClose	
	 | tkSquareOpen <list_elements> tkDot tkDot <simple_expr> tkSquareClose				
	 | tkSquareOpen <list_elements> tkDot tkDot tkSquareClose	
        | <list_constructor>		
        | <simple_expr> tkColon <empty> <simple_expr>

<list_constructor>::= tkSquareOpen <simple_expr> tkSplit <generators> <conditions_comma> tkSquareClose  

<generators>::= <generator> <empty>
              | <generators> tkComma <generator>  

<generator>::= <simple_expr> tkArrowGen <simple_expr>

<conditions_comma>::= <empty>
                    | tkComma <conditions> 

<conditions>::= <condition> <empty>
              | <conditions> tkComma <condition>

<condition>::= <expr>

<corteg>::= tkRoundOpen <simple_expr> tkComma <list_elements> tkRoundClose                    
		
<list_elements>::= <empty>                                    
		   | <simple_expr> <empty>				  
		   | <list_elements> tkComma <simple_expr>	  

<add_expr>::= <add_expr> tkAnd <mult_expr>	 
	     | <add_expr> <addop> <mult_expr>	 	
            | <mult_expr>					

<mult_expr>::= <mult_expr> tkOr <negate_expr>   	
	      | <mult_expr> <multop> <negate_expr>	
             | <negate_expr>				

<negate_expr>::= tkMinus <simple_expr>			
		 | tkNot <simple_expr>			
		 | <simple_expr>

<simple_expr>::= <simple_type_expr>					
               | tkRoundOpen <expr> tkRoundClose
               | <infix_expr><empty>	
		 | <variable>
		 | tkLet <def_vars> tkIn <body_func>           
		 | <list>    
               | <corteg>                          
		 | <lambda_func> <empty>              
               | tkRoundOpen tkRoundOpen <lambda_func> tkRoundClose <params_value> tkRoundClose 

<simple_type_expr>::=tkInt					
                    | tkDouble					
		      | tkBool					
                    | tkChar					
                    | tkString

<variable_expr>::= <simple_expr>

<def_vars>::= <def_var> <empty>                         
	     | <def_vars> tkSemiColon <def_var>	        

<def_var>::= tkIdent <params> <guard_body_list> <where_var>        

<guard_body_list>::= <guard_body><empty>
                   | <guard_body_list><guard_body>

<guard_body>::= <guard> tkAssign <body_func>

<variable>::= tkIdent                                        
	     | tkRoundOpen tkIdent <params_value> tkRoundClose	
            | tkRoundOpen <variable> <params_value> tkRoundClose
            | tkRoundOpen tkQuote tkIdent tkQuote <params_value> tkRoundClose

<infix_expr>::= tkRoundOpen <simple_expr> tkQuote tkIdent tkQuote <simple_expr> tkRoundClose
              | tkRoundOpen <simple_expr> tkQuote tkIdent tkQuote tkRoundClose
              | tkRoundOpen tkRoundOpen <simple_expr> tkQuote tkIdent tkQuote tkRoundClose <params_value> tkRoundClose

<multop>::= tkStar
          | tkSlash

<addop>::= tkPlus 
         | tkMinus

<stmt>::= tkIdent tkArrowGen tkIdent				
        | tkIf <expr> tkThen <body_func> tkElse <body_func>  
	 | tkCase tkRoundOpen <params1> tkRoundClose tkOf <case_variants>
	 | tkDo tkFigureOpen <stmts> tkSemiColon tkFigureClose
        | tkDo <stmts1>		
	 | tkReturn <expr>							
	 | <func_call>
		
<case_variants>::= <case_variant> <empty>			
		   | <case_variants> tkSplit <case_variant>		

<case_variant>::= tkRoundOpen <params1> tkRoundClose tkArrow <body_func>

<params1>::= <param> <empty>					
	   | <params1> tkComma <param>

<func_call>::= <expr><empty>			

<params_value>::=<param_value> <empty>		
	         | <params_value> <param_value>

<param_value>::= <expr><empty>

<lambda_func>::= tkLeftSlash <params> tkArrow <body_func> 
            
<empty>::= ! for rule code call

         


