"Name"    = 'ANSI C grammar & Syntax Tree generator'
"Version" = '0.2'
"Author"  = 'DarkStar'
"About"   = 'For OPS project. Based on PascalABCCompiler platform'


"Start Symbol" = <start_rule>
"Case Sensitive" = True

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'

!*
[TERMINALTEMPLATE]
		{
			%NAME% _%NAME%=new %NAME%(%PARAMS%);
			_%NAME%.source_context=parsertools.GetTokenSourceContext();
			%CODE%
			return _%NAME%;
		}
*!

!*
[NONTERMINALTEMPLATE0]         
		{
			%NAME% _%NAME%=new %NAME%(%PARAMS%);
			parsertools.create_source_context(_%NAME%,%LEFTTOKEN%,%RIGHTTOKEN%);
			%CODE%
			return _%NAME%;
		}
*!

!add to list
!*
[NONTERMINALTEMPLATE1]         
		{
			%NAME% _%NAME%=(%NAME%)%CODE%
			return _%NAME%;
		}
*!

!*
[NONTERMINALTEMPLATE2]         
		{
			%NAME% _%NAME%;
			%CODE%
			return _%NAME%;
		}
*!


!*
[NONTERMINALTEMPLATE3]         
		{
			%NAME% _%NAME%=new %NAME%(%PARAMS%);
			%CODE%
			return _%NAME%;
		}
*!

!for list: 
!<el>
!<list> token <el>
!*
[NONTERMINALTEMPLATE6]         
		//TemplateList for %NAME% (create)
		{
			%NAME% _%NAME%=new %NAME%();
			_%NAME%.source_context=((%CODE%)$1).source_context;
			_%NAME%.%PARAMS%.Add((%CODE%)$1);
			return _%NAME%;
		}
*!
!*
[NONTERMINALTEMPLATE7]
		//TemplateList for %NAME% (add)         
		{
			%NAME% _%NAME%=(%NAME%)$1;
			parsertools.create_source_context(_%NAME%,$$,$3);
			_%NAME%.%PARAMS%.Add($3 as %CODE%);
			return _%NAME%;
		}
*!


{Hex Digit}     = {Digit} + [abcdefABCDEF]
{Oct Digit}     = [01234567]

{Id Head}       = {Letter} + [_]
{Id Tail}       = {Id Head} + {Digit}

{All ASCII}		= {#1..#256}+{Cyrillic}+{#8100..#8800}
{LineCommentPart}	= {All ASCII} - {LF}

{TextPart}		= {All ASCII} - {Control Codes}
{String Ch}		= {TextPart} - ["]

{Char Ch}       = {TextPart} - ['']


DecLiteral      = ([123456789]{digit}*) | 0 	!*$$=parsertools.create_int_const(this);*!
OctLiteral      = 0{Oct Digit}+
HexLiteral      = 0x{Hex Digit}+
FloatLiteral    = {Digit}*'.'{Digit}+           !*$$=parsertools.create_double_const(this);*!

CharLiteral     = '' ( {Char Ch} | '\'{Printable} )'' !*$$=parsertools.create_char_const(this);*!

IDENTIFIER      = {Id Head}{Id Tail}*		!*$$=parsertools.create_ident(this);*!
STRING_LITERAL	= '"'( {String Ch} | '\'{Printable} )* '"' !*$$=parsertools.create_string_const(this);*!

Whitespace	= ({Whitespace}+ | ('#' {LineCommentPart}* {LF})) !ignored

PTR_OP 		= '->'          !*<token_info>*!

MINUS 		= '-'		!*<op_type_node(Operators.Plus)>*!
PLUS 		= '+'		!*<op_type_node(Operators.Minus)>*!
DIVISION 	= '/'           !*$$=null;*!
STAR		= '*'		!*<op_type_node(Operators.Multiplication)>*!
LESS 		= '<'		!*$$=null;*!
GREATER		= '>'		!*$$=null;*!
MOD		= '%'		!*$$=null;*!
NOT		= '!'		!*<op_type_node(Operators.LogicalNOT)>*!
BOC		= '~'		!*<op_type_node(Operators.BitwiseNOT)>*!
INC_OP 		= '++'          !*<token_info>*!
DEC_OP 		= '--'          !*<token_info>*!
LEFT_OP 	= '<<'          !*$$=null;*!
RIGHT_OP 	= '>>'          !*$$=null;*!
LE_OP 		= '<='          !*$$=null;*!
GE_OP 		= '>='          !*$$=null;*!
EQ_OP 		= '=='          !*$$=null;*!
NE_OP 		= '!='          !*$$=null;*!
AND_OP 		= '&&'          !*$$=null;*!
B_AND_OP	= '&'           !*<op_type_node(Operators.BitwiseAND)>*!
OR_OP 		= '||'          !*$$=null;*!
B_I_OR_OP 	= '|'           !*$$=null;*!
B_E_OR_OP	= '^'           !*$$=null;*!
MUL_ASSIGN 	= '*='          !*<op_type_node(Operators.AssignmentMultiplication)>*!
DIV_ASSIGN 	= '/='          !*<op_type_node(Operators.AssignmentDivision)>*!
MOD_ASSIGN 	= '%='          !*<op_type_node(Operators.AssignmentModulus)>*!
ADD_ASSIGN 	= '+='          !*<op_type_node(Operators.AssignmentAddition)>*!
SUB_ASSIGN 	= '-='          !*<op_type_node(Operators.AssignmentSubtraction)>*!
LEFT_ASSIGN 	= '<<='         !*<op_type_node(Operators.AssignmentBitwiseLeftShift)>*!
RIGHT_ASSIGN 	= '>>='         !*<op_type_node(Operators.AssignmentBitwiseRightShift)>*!
AND_ASSIGN 	= '&='          !*<op_type_node(Operators.AssignmentBitwiseAND)>*!
XOR_ASSIGN 	= '^='          !*<op_type_node(Operators.AssignmentBitwiseXOR)>*!
OR_ASSIGN	= '|='          !*<op_type_node(Operators.AssignmentBitwiseOR)>*!
EQUAL		= '=' 		!*<op_type_node(Operators.Assignment)>*!
tkRoundOpen 	= '('           !*<token_info>*!
tkRoundClose 	= ')'           !*<token_info>*!
tkFigureOpen 	= '{'           !*<token_info>*!
tkFigureClose 	= '}'           !*<token_info>*!
SEMICOLON	= ';'		!*<token_info>*!
tkComma 	= ','		!*<token_info>*!
tkColon		= ':'           !*<token_info>*!
tkQuestion 	= '?'           !*<token_info>*!
tkSquareOpen 	= '['           !*<token_info>*!
tkSquareClose	= ']'           !*<token_info>*!
tkDot		= '.'           !*<token_info>*!


TYPE_NAME 	= '$' {Id Head}{Id Tail}*	!*$$=parsertools.create_ident(this);*!

SIZEOF 		= 'sizeof'      !*<token_info>*!
TYPEDEF  	= 'typedef'     !*<token_info>*!

CHAR 		= 'char'	!*<c_scalar_type(c_scalar_type_name.tn_char,c_scalar_sign.none)>*!
SHORT 		= 'short'       !*<c_scalar_type(c_scalar_type_name.tn_short,c_scalar_sign.none)>*!
INT 		= 'int'         !*<c_scalar_type(c_scalar_type_name.tn_int,c_scalar_sign.none)>*!
LONG 		= 'long'        !*<c_scalar_type(c_scalar_type_name.tn_long,c_scalar_sign.none)>*!
FLOAT           = 'float'       !*<c_scalar_type(c_scalar_type_name.tn_float,c_scalar_sign.none)>*!
DOUBLE          = 'double'      !*<c_scalar_type(c_scalar_type_name.tn_double,c_scalar_sign.none)>*!
VOID            = 'void'        !*<c_scalar_type(c_scalar_type_name.tn_void,c_scalar_sign.none)>*!

SIGNED		= 'signed'   	!*<c_scalar_sign_token(c_scalar_sign.signed)>*!
UNSIGNED        = 'unsigned'    !*<c_scalar_sign_token(c_scalar_sign.unsigned)>*!
STRUCT          = 'struct'      !*<token_info>*!
UNION           = 'union'       !*<token_info>*!
ENUM            = 'enum'	!*<token_info>*!
ELLIPSIS        = '...'         !*<token_info>*!
CASE            = 'case'        !*<token_info>*!
DEFAULT         = 'default'     !*<token_info>*!
IF              = 'if'          !*<token_info>*!
ELSE            = 'else'        !*<token_info>*!
SWITCH          = 'switch'      !*<token_info>*!
WHILE           = 'while'       !*<token_info>*!
DO              = 'do'          !*<token_info>*!
FOR             = 'for'         !*<token_info>*!
GOTO            = 'goto'        !*<token_info>*!
CONTINUE        = 'continue'    !*<token_info>*!
BREAK           = 'break'       !*<token_info>*!
RETURN          = 'return'      !*<token_info>*!

INLINE          = 'inline'      !*<type_definition_attr(definition_attribute.Inline)>*!
CONST           = 'const'       !*<type_definition_attr(definition_attribute.Const)>*!
VOLATILE        = 'volatile'    !*<type_definition_attr(definition_attribute.Volatile)>*!
EXTERN  	= 'extern'      !*<type_definition_attr(definition_attribute.Extern)>*!
STATIC		= 'static'      !*<type_definition_attr(definition_attribute.Static)>*!
AUTO         	= 'auto'        !*<type_definition_attr(definition_attribute.Auto)>*!
REGISTER     	= 'register'    !*<type_definition_attr(definition_attribute.Register)>*!

ParseModeExpression   = '<<expression>>'		

! ======================================= Rules

<start_rule>
	::= <translation_unit>
	 |  <parse_mode_expression>

<parse_mode_expression>
	::= ParseModeExpression <expression> !*$$=$2;*!

<primary_expression>
        ::= IDENTIFIER 
         |  DecLiteral
	 |  OctLiteral      
         |  HexLiteral      
         |  FloatLiteral    
         |  CharLiteral     
         |  STRING_LITERAL 
         |  tkRoundOpen <expression> tkRoundClose		!* $$=$2; *! 

<postfix_expression>
        ::= <primary_expression> 
         |  <postfix_expression> tkSquareOpen <expression> tkSquareClose  !*3indexer<> 
								$$.indexes=new expression_list();
								$$.indexes.expressions.Add((expression)$3);
								$$.dereferencing_value=(addressed_value)$1;
								parsertools.assign_source_context($$.indexes,$3);
								parsertools.create_source_context($$,$2,$4);*!

         |  <postfix_expression> tkRoundOpen tkRoundClose       !*3method_call<null>
								$$.dereferencing_value=(addressed_value)$1;
								parsertools.create_source_context($$,$1,$3);*!

         |  <postfix_expression> tkRoundOpen <argument_expression_list> tkRoundClose !*3method_call<(expression_list)$3>
								$$.dereferencing_value=(addressed_value)$1;
								parsertools.create_source_context($$,$1,$4);*!

         |  <postfix_expression> tkDot IDENTIFIER               !*0bin_expr<(expression)$1,(expression)$3,Operators.Member>*! ! !*3dot_node<(addressed_value)$1,(ident)$3> parsertools.create_source_context($$,$1,$3);*!
         |  <postfix_expression> PTR_OP IDENTIFIER              !*0bin_expr<(expression)$1,(expression)$3,Operators.MemberByPointer>*!
         |  <postfix_expression> INC_OP				!*3un_expr<(expression)$1,Operators.PostfixIncrement> parsertools.create_source_context($$,$1,$2);*! 
         |  <postfix_expression> DEC_OP                         !*3un_expr<(expression)$1,Operators.PostfixDecrement> parsertools.create_source_context($$,$1,$2);*!

<argument_expression_list>
        ::= <assignment_expression>                                    !*6expression_list<expressions>expression*!
         |  <argument_expression_list> tkComma <assignment_expression> !*7expression_list<expressions>expression*!

<unary_expression>
        ::= <postfix_expression> 
         |  INC_OP <unary_expression>                           !*3un_expr<(expression)$2,Operators.PrefixIncrement> parsertools.create_source_context($$,$1,$2);*!
         |  DEC_OP <unary_expression>                           !*3un_expr<(expression)$2,Operators.PrefixDecrement> parsertools.create_source_context($$,$1,$2);*!
         |  <unary_operator> <cast_expression> 			!*0un_expr<(expression)$2,((op_type_node)$1).type>*!			
         |  SIZEOF <unary_expression>                           !*3sizeof_operator<null,(expression)$2> parsertools.create_source_context($$,$1,$2);*!
         |  SIZEOF tkRoundOpen <type_name> tkRoundClose         !*3sizeof_operator<(type_definition)$3,null> parsertools.create_source_context($$,$1,$4);*!

<unary_operator>
        ::= B_AND_OP <empty>                                    !* ((op_type_node)$1).type=Operators.AddressOf; $$=$1;*!
         |  STAR <empty>					!* ((op_type_node)$1).type=Operators.Dereference; $$=$1;*!
         |  PLUS 
         |  MINUS 
         |  BOC 
         |  NOT 

<cast_expression>
        ::= <unary_expression> 
         |  tkRoundOpen <type_name> tkRoundClose <cast_expression> !*3typecast_node<(addressed_value)$4,(type_definition)$2,op_typecast.typecast> parsertools.create_source_context($$,$1,$4);*!

<multiplicative_expression>
        ::= <cast_expression> 
         |  <multiplicative_expression> STAR <cast_expression>            !*0bin_expr<(expression)$1,(expression)$3,Operators.Multiplication>*!
         |  <multiplicative_expression> DIVISION <cast_expression>        !*0bin_expr<(expression)$1,(expression)$3,Operators.Division>*!
         |  <multiplicative_expression> MOD <cast_expression>             !*0bin_expr<(expression)$1,(expression)$3,Operators.ModulusRemainder>*!

<additive_expression>
        ::= <multiplicative_expression> 
         |  <additive_expression> PLUS <multiplicative_expression>        !*0bin_expr<(expression)$1,(expression)$3,Operators.Plus>*!
         |  <additive_expression> MINUS <multiplicative_expression>       !*0bin_expr<(expression)$1,(expression)$3,Operators.Minus>*!

<shift_expression>
        ::= <additive_expression> 
         |  <shift_expression> LEFT_OP <additive_expression>              !*0bin_expr<(expression)$1,(expression)$3,Operators.BitwiseLeftShift>*!
         |  <shift_expression> RIGHT_OP <additive_expression>             !*0bin_expr<(expression)$1,(expression)$3,Operators.BitwiseRightShift>*!

<relational_expression>
        ::= <shift_expression> 
         |  <relational_expression> LESS <shift_expression>               !*0bin_expr<(expression)$1,(expression)$3,Operators.Less>*!
         |  <relational_expression> GREATER <shift_expression>            !*0bin_expr<(expression)$1,(expression)$3,Operators.Greater>*!
         |  <relational_expression> LE_OP <shift_expression>              !*0bin_expr<(expression)$1,(expression)$3,Operators.LessEqual>*!
         |  <relational_expression> GE_OP <shift_expression>              !*0bin_expr<(expression)$1,(expression)$3,Operators.GreaterEqual>*!

<equality_expression>
        ::= <relational_expression> 
         |  <equality_expression> EQ_OP <relational_expression>           !*0bin_expr<(expression)$1,(expression)$3,Operators.Equal>*!
         |  <equality_expression> NE_OP <relational_expression>           !*0bin_expr<(expression)$1,(expression)$3,Operators.NotEqual>*!

<and_expression>
        ::= <equality_expression> 
         |  <and_expression> B_AND_OP <equality_expression>               !*0bin_expr<(expression)$1,(expression)$3,((op_type_node)$2).type>*!

<exclusive_or_expression>
        ::= <and_expression> 
         |  <exclusive_or_expression> B_E_OR_OP <and_expression>          !*0bin_expr<(expression)$1,(expression)$3,Operators.BitwiseXOR>*!

<inclusive_or_expression>
        ::= <exclusive_or_expression> 
         |  <inclusive_or_expression> B_I_OR_OP <exclusive_or_expression> !*0bin_expr<(expression)$1,(expression)$3,Operators.BitwiseOR>*!

<logical_and_expression>
        ::= <inclusive_or_expression> 
         |  <logical_and_expression> AND_OP <inclusive_or_expression>     !*0bin_expr<(expression)$1,(expression)$3,Operators.LogicalAND>*!

<logical_or_expression>
        ::= <logical_and_expression> 
         |  <logical_or_expression> OR_OP <logical_and_expression>        !*0bin_expr<(expression)$1,(expression)$3,Operators.LogicalOR>*!

<conditional_expression>
        ::= <logical_or_expression> 
         |  <logical_or_expression> tkQuestion <expression> tkColon <conditional_expression> !*3question_colon_expression<(expression)$1,(expression)$3,(expression)$5> parsertools.create_source_context($$,$1,$5);*!

<assignment_expression>
        ::= <conditional_expression> 
         |  <unary_expression> <assignment_operator> <assignment_expression> !*3assign<$1 as addressed_value,$3 as expression,((op_type_node)$2).type> parsertools.create_source_context($$,$1,$3);*!

<assignment_operator>
        ::= EQUAL 
         |  MUL_ASSIGN 
         |  DIV_ASSIGN 
         |  MOD_ASSIGN 
         |  ADD_ASSIGN 
         |  SUB_ASSIGN 
         |  LEFT_ASSIGN 
         |  RIGHT_ASSIGN 
         |  AND_ASSIGN 
         |  XOR_ASSIGN 
         |  OR_ASSIGN 

<expression>
        ::= <assignment_expression> 
         |  <expression> tkComma <assignment_expression> !* 
						expression_list el=$1 as expression_list;
						if(el==null)
						{
							el=new expression_list();
							el.expressions.Add((expression)$1);
						}
						el.expressions.Add((expression)$3);
						parsertools.create_source_context(el,$1,$3);
						$$=el;
						*!

<constant_expression>
        ::= <conditional_expression> 

<declaration>
        ::= <declaration_specifiers> SEMICOLON 	!*{ 									   
						declarations sds=new declarations();
						sds.defs.Add((declaration)$1);
						declarations_as_statement vdss = new declarations_as_statement(sds);
						parsertools.create_source_context(vdss,$1,$2);
						parsertools.assign_source_context(vdss.defs,vdss);						
						if(($1 is enum_type_definition) || ($1 is type_declaration))
						{
						}
						else
						{
							errors.Add(new InitDeclaratorListExpected(current_file_name,($2 as syntax_tree_node).source_context,sds)); 
						}
						$$=vdss;
						}*!
         |  <declaration_specifiers> <init_declarator_list> SEMICOLON   !*{
			declarations_as_statement vdss = new declarations_as_statement((declarations)$2);
                        Converter.PrepareVariableDefinitions((declaration)$1,vdss.defs);
			parsertools.create_source_context(vdss,$1,$3);
			parsertools.assign_source_context(vdss.defs,vdss);
			$$=vdss;
			}*!

	 |  TYPEDEF <type_specifiers> <declarator_list> SEMICOLON !*1type_declarations<>$3;
			foreach(type_declaration td in $$.types_decl)
			{
				LRParser.SepecialSymbolPrefixDirection.Add(td.type_name.name,'$'); 
				if(td.type_def==null)
					td.type_def=(type_definition)$2;
				else
				{
					ref_type rt=(ref_type)td.type_def;
					while(rt.pointed_to!=null)
						rt=(ref_type)rt.pointed_to;
					rt.pointed_to=(type_definition)$2;
				}
			}
			parsertools.create_source_context($$,$1,$4);*!  

<declarator_list>
	::= <declarator>                         !*3type_declarations<> 
						 parsertools.assign_source_context($$,$1);
						 Converter.PrepareDeclaratorList($$,(var_def_statement)$1);*!
	 |  <declarator_list> tkComma <declarator> !*1type_declarations<>$1;
						 Converter.PrepareDeclaratorList($$,(var_def_statement)$3);*!

<init_declarator_list>
        ::= <init_declarator> 					!*3declarations<>
								$$.defs.Add(Converter.PrepareInitDeclarator($1));
								parsertools.create_source_context($$,$1,$1);*!
         |  <init_declarator_list> tkComma <init_declarator>    !*1declarations<>$1;
								$$.defs.Add(Converter.PrepareInitDeclarator($3));
								parsertools.create_source_context($$,$1,$3);*!

<init_declarator>
        ::= <declarator> 
         |  <declarator> EQUAL <initializer>                  !*1var_def_statement<>$1; 
								if($$ is ref_type_and_var_def_statement)
									((ref_type_and_var_def_statement)$$).var_def_statement.inital_value=(expression)$3;
								else
									$$.inital_value=(expression)$3;
								parsertools.create_source_context($$,$1,$3);*! 

<declaration_specifiers>
	::= <type_specifiers>
         |  <storage_class_specifier>
         |  <storage_class_specifier> <type_specifiers> !*$$=Converter.PrepareTypeSpecifiers($1,$2);*! 

<storage_class_specifier>
        ::= REGISTER 
         |  EXTERN 
         |  STATIC 
         |  AUTO 
	 |  <onther_specifier>

<onther_specifier>
	::= INLINE

<type_specifiers>  
        ::= <type_specifier> 
         |  <type_specifiers> <type_specifier> 	!*$$=Converter.PrepareTypeSpecifiers($1,$2);*!
         |  <type_qualifier>
!         |  <type_specifiers> <type_qualifier>  

<type_qualifier>
        ::= CONST 
         |  VOLATILE 

<type_specifier>
        ::= VOID 
         |  CHAR 
         |  SHORT 
         |  INT 
         |  LONG 
         |  FLOAT 
         |  DOUBLE 
	 |  UNSIGNED 
         |  SIGNED 
         |  <struct_or_union_specifier> 
         |  <enum_specifier> 
         |  TYPE_NAME <empty> 	!*3named_type_reference<> $$.names.Add((ident)$1); parsertools.assign_source_context($$,$1);*!

<struct_or_union_specifier>
        ::= <struct_or_union> IDENTIFIER tkFigureOpen <struct_declaration_list> tkFigureClose !* 
						$$=Converter.PrepareUnionOrStructDefinition((token_info)$1,(ident)$2,$3,(class_members)$4,$5);*! 
         |  <struct_or_union> tkFigureOpen <struct_declaration_list> tkFigureClose !* 
						$$=Converter.PrepareUnionOrStructDefinition((token_info)$1,null,$2,(class_members)$3,$4);*! 
         |  <struct_or_union> IDENTIFIER        !* 
						$$=Converter.PrepareUnionOrStructDefinition((token_info)$1,(ident)$2,null,null,null);*! 

<struct_or_union>
        ::= STRUCT 
         |  UNION 

<struct_declaration_list>
        ::= <struct_declaration> 			    	!*3class_members<> 
								Converter.AddToSubporgramDefs($$.members,$1);
								parsertools.assign_source_context($$,$1);*! 			
         |  <struct_declaration_list> <struct_declaration>  	!*1class_members<>$1; 
								Converter.AddToSubporgramDefs($$.members,$2);
								parsertools.create_source_context($$,$$,$2);*! 	

<struct_declaration>
        ::= <specifier_qualifier_list> <struct_declarator_list> SEMICOLON  !*{
			declarations defs=(declarations)$2;
                        Converter.PrepareVariableDefinitions($1 as type_definition,defs);
			$$=defs;
			}*!


<specifier_qualifier_list>
	::= <type_specifiers>
!        ::= <type_specifier> <specifier_qualifier_list> 
!         |  <type_specifier>
!         |  <type_qualifier> <specifier_qualifier_list> 
!         |  <type_qualifier> 

<struct_declarator_list>
        ::= <struct_declarator>                                 !*3declarations<>
								$$.defs.Add(Converter.PrepareInitDeclarator($1));
								parsertools.create_source_context($$,$1,$1);*!
         |  <struct_declarator_list> tkComma <struct_declarator>!*1declarations<>$1;
								$$.defs.Add(Converter.PrepareInitDeclarator($3));
								parsertools.create_source_context($$,$1,$3);*! 

<struct_declarator>
        ::= <declarator> 
         |  tkColon <constant_expression> 
         |  <declarator> tkColon <constant_expression>		!*1var_def_statement<>$1; 
								if($$ is ref_type_and_var_def_statement)
									((ref_type_and_var_def_statement)$$).var_def_statement.inital_value=(expression)$3;
								else
									$$.inital_value=(expression)$3;
								parsertools.create_source_context($$,$1,$3);*!  

<enum_specifier>
        ::= ENUM tkFigureOpen <opt_enumerator_list> tkFigureClose   !*3enum_type_definition<(enumerator_list)$3> 
								parsertools.create_source_context($$,$1,$4);*!
         |  ENUM IDENTIFIER tkFigureOpen <opt_enumerator_list> tkFigureClose !*3enum_type_definition<(enumerator_list)$4> 
								LRParser.SepecialSymbolPrefixDirection.Add(($2 as ident).name,'$'); 
								parsertools.create_source_context($$,$1,$5);
								type_declaration td=new type_declaration((ident)$2,$$);
								parsertools.create_source_context(td,$1,$5);
								return td;
								*!
         |  ENUM IDENTIFIER                                     !*3enum_type_definition<null> 
								LRParser.SepecialSymbolPrefixDirection.Add(($2 as ident).name,'$'); 
								parsertools.create_source_context($$,$1,$2);
								type_declaration td=new type_declaration((ident)$2,$$);
								parsertools.create_source_context(td,$1,$5);
								return td;
								*!

<opt_enumerator_list>
	::= <enumerator_list>
	 | 

<enumerator_list>
        ::= <enumerator>                                !*6enumerator_list<enumerators>enumerator*!
         |  <enumerator_list> tkComma <enumerator>      !*7enumerator_list<enumerators>enumerator*!

<enumerator>
        ::= IDENTIFIER           			!*0enumerator<$1 as ident,null>*!
         |  IDENTIFIER EQUAL <constant_expression>      !*0enumerator<$1 as ident,$3 as expression>*!

<declarator>
        ::= <pointer> <direct_declarator>               !* $$=Converter.PreparePointerDirectDeclarator((ref_type)$1,(declaration)$2);	*!								
         |  <direct_declarator> 

<direct_declarator>
        ::= <direct_declarator_ident> <empty>		!*3var_def_statement<(ident_list)$1,null,null,definition_attribute.None,false>
								parsertools.create_source_context($$,$1,$1);*!

         |  tkRoundOpen <declarator> tkRoundClose       !* $$=$2; *!

         |  <direct_declarator> tkSquareOpen <constant_expression> tkSquareClose   !* $$=Converter.PrepareArrayType((declaration)$1,$2,(expression)$3,$4); *!
         |  <direct_declarator> tkSquareOpen tkSquareClose                         !* $$=Converter.PrepareArrayType((declaration)$1,$2,null,$3); *!
         |  <direct_declarator> tkRoundOpen <parameter_type_list> tkRoundClose 	   !* $$=Converter.PrepareFunctionHeader((declaration)$1,$2,(formal_parametres)$3,$4); *!
         |  <direct_declarator> tkRoundOpen <identifier_list> tkRoundClose 
         |  <direct_declarator> tkRoundOpen tkRoundClose                           !* $$=Converter.PrepareFunctionHeader((declaration)$1,$2,null,$3); *!

<direct_declarator_ident>
        ::= IDENTIFIER <empty>		!*3ident_list<> $$.idents.Add((ident)$1); parsertools.assign_source_context($$,$1);*!

<pointer>
	::= STAR                !*3ref_type<> parsertools.assign_source_context($$,$1);*!
	 |  <pointer> STAR 	!*3ref_type<> $$.pointed_to=(ref_type)$1; parsertools.create_source_context($$,$1,$2);*!
	 

!<pointer>
!        ::= STAR 		
!         |  STAR <type_qualifier_list> 
!         |  STAR <pointer>              
!         |  STAR <type_qualifier_list> <pointer> 

<type_qualifier_list>
        ::= <type_qualifier> 
         |  <type_qualifier_list> <type_qualifier> 

<parameter_type_list>
        ::= <parameter_list> 
         |  <parameter_list> tkComma ELLIPSIS 

<parameter_list>
        ::= <parameter_declaration> <empty> 		 !*6formal_parametres<params_list>typed_parametres*!
         |  <parameter_list> tkComma <parameter_declaration> !*7formal_parametres<params_list>typed_parametres*!

<parameter_declaration>
        ::= <declaration_specifiers> <declarator>       !* $$=Converter.PrepareParametrDeclaration((declaration)$1,(declaration)$2);*!					
         |  <declaration_specifiers> <abstract_declarator> 
         |  <declaration_specifiers>    		!*0typed_parametres<null,$1 as type_definition,parametr_kind.none,null>*!

<identifier_list>
        ::= IDENTIFIER 
         |  <identifier_list> tkComma IDENTIFIER 

<type_name>
        ::= <specifier_qualifier_list> 
         |  <specifier_qualifier_list> <abstract_declarator> 

<abstract_declarator>
        ::= <pointer> 
         |  <direct_abstract_declarator> 
         |  <pointer> <direct_abstract_declarator> 

<direct_abstract_declarator>
        ::= tkRoundOpen <abstract_declarator> tkRoundClose 
         |  tkSquareOpen tkSquareClose 
         |  tkSquareOpen <constant_expression> tkSquareClose 
         |  <direct_abstract_declarator> tkSquareOpen tkSquareClose 
         |  <direct_abstract_declarator> tkSquareOpen <constant_expression> tkSquareClose 
         |  tkRoundOpen tkRoundClose 
         |  tkRoundOpen <parameter_type_list> tkRoundClose 
         |  <direct_abstract_declarator> tkRoundOpen tkRoundClose 
         |  <direct_abstract_declarator> tkRoundOpen <parameter_type_list> tkRoundClose 

<initializer>
        ::= <assignment_expression> 
         |  tkFigureOpen <initializer_list> tkFigureClose 
         |  tkFigureOpen <initializer_list> tkComma tkFigureClose 

<initializer_list>
        ::= <initializer> 
         |  <initializer_list> tkComma <initializer> 

<statement>
        ::= <labeled_statement> 
         |  <compound_statement> 
         |  <expression_statement> 
         |  <selection_statement> 
         |  <iteration_statement> 
         |  <jump_statement> 

<labeled_statement>
        ::= IDENTIFIER tkColon <statement> 			!*0labeled_statement<(ident)$1,(statement)$3>*!
         |  CASE <constant_expression> tkColon <statement>      !*3switch_stmt<(expression)$2,(statement)$4,SwitchPartType.Case>
								parsertools.create_source_context($$,$1,$4);*!
         |  DEFAULT tkColon <statement>                         !*3switch_stmt<null,(statement)$3,SwitchPartType.Default>
								parsertools.create_source_context($$,$1,$3);*!

<compound_statement>
        ::= tkFigureOpen tkFigureClose 				!*3statement_list<null,(syntax_tree_node)$1,(syntax_tree_node)$2> $$.subnodes = new List<statement>(); parsertools.create_source_context($$,$1,$2);*!
         |  tkFigureOpen <statement_list> tkFigureClose         !*1statement_list<>$2;$$.left_logical_bracket=(syntax_tree_node)$1;$$.right_logical_bracket=(syntax_tree_node)$3; parsertools.create_source_context($$,$1,$3);*!
         |  tkFigureOpen <declaration_list> tkFigureClose       !*1statement_list<>$2;$$.left_logical_bracket=(syntax_tree_node)$1;$$.right_logical_bracket=(syntax_tree_node)$3; parsertools.create_source_context($$,$1,$3);*!
         |  tkFigureOpen <declaration_list> <statement_list> tkFigureClose !*1statement_list<>$2;$$.left_logical_bracket=(syntax_tree_node)$1;$$.right_logical_bracket=(syntax_tree_node)$4;
								foreach(statement stmt in ((statement_list)$3).subnodes)
									$$.subnodes.Add(stmt);
								parsertools.create_source_context($$,$1,$4);*!

<declaration_list>
        ::= <declaration>                !*3statement_list<> $$.subnodes.Add((statement)$1);parsertools.create_source_context($$,$1,$1);*!
         |  <declaration_list> <declaration> !*1statement_list<>$1; $$.subnodes.Add((statement)$2);parsertools.create_source_context($$,$1,$2);*!

<statement_list>
        ::= <statement>                  !*3statement_list<> $$.subnodes.Add((statement)$1);parsertools.create_source_context($$,$1,$1);*!
         |  <statement_list> <statement> !*1statement_list<>$1; $$.subnodes.Add((statement)$2);parsertools.create_source_context($$,$1,$2);*!

<expression_statement>
        ::= SEMICOLON <empty>            !*3empty_statement<> parsertools.create_source_context($$,$1,$1);*!
         |  <expression> SEMICOLON       !* $$=$1; *!

<expression_statement_or_declaration>
	::= <expression_statement>
	 |  <declaration>
	
<selection_statement>
        ::= IF tkRoundOpen <expression> tkRoundClose <statement> !*3if_node<(expression)$3,(statement)$5,null> 
								 parsertools.create_source_context($$,$1,$5);*!
         |  IF tkRoundOpen <expression> tkRoundClose <statement> ELSE <statement> !*3if_node<(expression)$3,(statement)$5,(statement)$7> 
								 parsertools.create_source_context($$,$1,$7);*!
         |  SWITCH tkRoundOpen <expression> tkRoundClose <statement> !*3switch_stmt<(expression)$3,(statement)$5,SwitchPartType.Switch>
								 parsertools.create_source_context($$,$1,$5);*!

<iteration_statement>
        ::= WHILE tkRoundOpen <expression> tkRoundClose <statement> !*3while_node<(expression)$3,(statement)$5,WhileCycleType.While>
								 parsertools.create_source_context($$,$1,$5);*!
         |  DO <statement> WHILE tkRoundOpen <expression> tkRoundClose SEMICOLON !*3while_node<(expression)$5,(statement)$2,WhileCycleType.DoWhile>
								 parsertools.create_source_context($$,$1,$7);*!
         |  FOR tkRoundOpen <expression_statement_or_declaration> <expression_statement> tkRoundClose <statement> !*3c_for_cycle<$3 as statement,$4 as expression,null,(statement)$6>
                                                                 parsertools.create_source_context($$,$1,$6);*!
         |  FOR tkRoundOpen <expression_statement_or_declaration> <expression_statement> <expression> tkRoundClose <statement> !*3c_for_cycle<$3 as statement,$4 as expression,$5 as expression,(statement)$7>
                                                                 parsertools.create_source_context($$,$1,$7);*!


<jump_statement>
        ::= GOTO IDENTIFIER SEMICOLON 		!*3goto_statement<(ident)$2> parsertools.create_source_context($$,$1,$3);*!
         |  CONTINUE SEMICOLON                  !*3jump_stmt<null,JumpStmtType.Continue> parsertools.create_source_context($$,$1,$2);*!
         |  BREAK SEMICOLON                     !*3jump_stmt<null,JumpStmtType.Break> parsertools.create_source_context($$,$1,$2);*!
         |  RETURN SEMICOLON 			!*3jump_stmt<null,JumpStmtType.Return> parsertools.create_source_context($$,$1,$2);*!
         |  RETURN <expression> SEMICOLON       !*3jump_stmt<(expression)$2,JumpStmtType.Return> parsertools.create_source_context($$,$1,$3);*!

<translation_unit>
	::= <external_declaration_list> 			!*3c_module<$1 as declarations,null> 
								$$.Language = LanguageId.C;
								parsertools.assign_source_context($$,$1);*!

<external_declaration_list>
        ::= <external_declaration>				!*3declarations<> 
									Converter.AddToSubporgramDefs($$.defs,$1);
									parsertools.assign_source_context($$,$1);*! 			
         |  <external_declaration_list> <external_declaration>  !*1declarations<>$1; 
									Converter.AddToSubporgramDefs($$.defs,$2);
									parsertools.create_source_context($$,$$,$2);*! 			

<external_declaration>
        ::= <function_definition> 
         |  <declaration> <empty> !*
				  if($1 is declarations_as_statement) 
				       $$=((declarations_as_statement)$1).defs;
				  $$=$1;
				  *! 


<function_definition_header>
	::= <declaration_specifiers> <declarator>		!* $$=Converter.PrepareFunctionDefinitionHeader((type_definition)$1,(declaration)$2);*!

!	 |  <declaration_specifiers> <declarator> <declaration_list> 
!	 |  <declarator> <declaration_list> 
	 |  <declarator> <empty>                                !*
								syntax_tree_node s=Converter.PrepareFunctionDefinitionHeader(null,(declaration)$1);
								//errors.Add(new MissingTypeSpecifier(current_file_name,s.source_context,s));
								$$=s;
								*!

<function_definition_compound_statement>
	::= <declaration_list> <compound_statement>          	!*
								statement_list l=$1 as statement_list,r=$2 as statement_list;
								foreach(statement stmt in r.subnodes)
									l.subnodes.Add(stmt);
								l.left_logical_bracket=r.left_logical_bracket;
								l.right_logical_bracket=r.right_logical_bracket;
								parsertools.create_source_context(l,$1,$2);
								$$=l; 
								*!
	  | <compound_statement>

<function_definition>
	::= <function_definition_header> <function_definition_compound_statement>  !*3procedure_definition<(function_header)$1,null>
								 
								block bl=new block(null,(statement_list)$2);
								parsertools.create_source_context(bl,$2,$2);
								$$.proc_body=bl;
	  							parsertools.create_source_context($$,$1,$2);*!


<empty>
	::= 
