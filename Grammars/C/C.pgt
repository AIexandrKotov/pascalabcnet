##TEMPLATE-NAME '_ C# - Calitha Engine - PascalABC.NET'
##LANGUAGE 'C#'
##ENGINE-NAME 'Calitha GOLD Parser Engine'
##AUTHOR 'DarkStar' 
##FILE-EXTENSION 'cs'
##NOTES
PascalABC.NET parser template. 
Version 0.3
##END-NOTES
##ID-CASE UPPERCASE
##ID-SEPARATOR '_'
##ID-SYMBOL-PREFIX 'Symbol'
##ID-RULE-PREFIX 'Rule'

using System;
using System.IO;
using System.Runtime.Serialization;
using System.Collections;
using System.Collections.Generic;
using PascalABCCompiler.SyntaxTree;
using PascalABCCompiler.Errors;
using PascalABCCompiler.CParser.Errors;
using PascalABCCompiler.ParserTools;
using GoldParser;

namespace  PascalABCCompiler.CParser
{
    
    public class GPBParser_C:GPBParser
    {
        private Stack NodesStack;
        private int operation_value=0;
        private object left_node,right_node;
	private ConvertionTools Converter;
        internal SourceContextMap scm;


        public GPBParser_C(Stream stream)
            :base(stream)
        {
            parsertools = new C_parsertools();

	    Converter = new ConvertionTools(this);
        }

        public object Parse(string source)
        {
            NodesStack = new Stack();
            LRParser = new Parser(new StringReader(source), LanguageGrammar);
            parsertools.parser = LRParser;
            (parsertools as C_parsertools).scm = scm;
            LRParser.TrimReductions = false;
		Converter.errors=errors;
            while (true)
            {
                switch (LRParser.Parse())
                {
                    case ParseMessage.LexicalError:
                        errors.Add(new TokenReadError(this));
                        LRParser.PopInputToken();
                        if (errors.Count > max_errors)
                            return null;
                        break;

                    case ParseMessage.SyntaxError:
                        if ((LRParser.TokenSyntaxNode as syntax_tree_node)!= null) 
                            prev_node = LRParser.TokenSyntaxNode;                            
                        Error er = new PABCNETUnexpectedToken(this);
                        Symbol sym = LRParser.PopInputToken();
                        if (sym.SymbolType == SymbolType.End && errors.Count > 0)
                            return null;
                        errors.Add(er);
                        if (errors.Count > max_errors)
                            return null;
                        break;
                    case ParseMessage.Reduction:
                        LRParser.TokenSyntaxNode = CreateNonTerminalObject();
                        break;

                    case ParseMessage.Accept:
                        return LRParser.TokenSyntaxNode;

                    case ParseMessage.TokenRead:
                        LRParser.TokenSyntaxNode = CreateTerminalObject();
                        break;

                    case ParseMessage.InternalError:
                        errors.Add(new CompilerInternalError("CParser", new Exception("ParseMessage.InternalError")));
                        return null;

                    case ParseMessage.NotLoadedError:
                        errors.Add(new CompilerInternalError("CParser", new Exception("ParseMessage.NotLoadedError")));
                        return null;

                    case ParseMessage.CommentError:
                        errors.Add(new UnexpectedToken(this,"(EOF)"));
                        return null;

                    /*case ParseMessage.CommentBlockRead:
                        break;

                    case ParseMessage.CommentLineRead:
                        break;*/
                }
            }

        }        

    public enum SymbolConstants : int
    {
##SYMBOLS
##DELIMITER ','
        %ID.Padded% = %Value.Padded%%Delimiter% // %Description%
##END-SYMBOLS
    };

    public enum RuleConstants : int
    {
##RULES
##DELIMITER ','
        %ID.Padded% = %Value.Padded%%Delimiter% // %Description%
##END-RULES
    };

        private Object CreateTerminalObject()
        {
            switch ((SymbolConstants) LRParser.TokenSymbol.Index)
            {
##SYMBOLS
		case SymbolConstants.%ID% :
		//%Description%
		//TERMINAL:%Name%
		return null;
		//ENDTERMINAL

##END-SYMBOLS
            }
            throw new SymbolException("Unknown symbol");
        }

	

        public Object CreateNonTerminalObject()
        {
            switch ((RuleConstants) LRParser.ReductionRule.Index)
            {
##RULES
		case RuleConstants.%ID% :
		//%Description%
		//NONTERMINAL:%Description%
		return null;
		//ENDNONTERMINAL

##END-RULES
            }
            throw new RuleException("Unknown rule");
        }
	}
}
