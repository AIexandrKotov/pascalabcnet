!=========================================================================
!
!   This is a version of N. Wirth's model programming language PL/0 as
! described in the book "Compilerbau" by Peter Baeumle & Heinz Alenfelder
!
!=========================================================================


"Name"    = 'PL/0' 
"Author"  = 'DarkStar' 
"About"   = 'A version of the PL/0 model language.'

"Case Sensitive" = True
"Start Symbol"   = <program>

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'



!<%NAME%> %CODE%
!*
[TERMINALTEMPLATE]
		{
			%NAME% _%NAME%=new %NAME%(%PARAMS%);
			_%NAME%.source_context=parsertools.GetTokenSourceContext();
			%CODE%
			return _%NAME%;
		}
*!

!%NAME%<%PARAMS%> %CODE%
!%PARAMS%=$1,$2,...
!*
[NONTERMINALTEMPLATE0]         
		{
			%NAME% _%NAME%=new %NAME%(%PARAMS%);
			parsertools.create_source_context(_%NAME%,%LEFTTOKEN%,%RIGHTTOKEN%);
			%CODE%
			return _%NAME%;
		}
*!

!add to list
!*
[NONTERMINALTEMPLATE1]         
		{
			%NAME% _%NAME%=(%NAME%)%CODE%
			return _%NAME%;
		}
*!

!*
[NONTERMINALTEMPLATE2]         
		{
			%NAME% _%NAME%;
			%CODE%
			return _%NAME%;
		}
*!


!*
[NONTERMINALTEMPLATE3]         
		{
			%NAME% _%NAME%=new %NAME%(%PARAMS%);
			%CODE%
			return _%NAME%;
		}
*!

                  
!for list: 
!<el>
!<list> token <el>
!*
[NONTERMINALTEMPLATE6]         
		//TemplateList for %NAME% (create)
		{
			%NAME% _%NAME%=new %NAME%();
			_%NAME%.source_context=((%CODE%)$1).source_context;
			_%NAME%.%PARAMS%.Add((%CODE%)$1);
			return _%NAME%;
		}
*!
!*
[NONTERMINALTEMPLATE7]
		//TemplateList for %NAME% (add)         
		{
			%NAME% _%NAME%=(%NAME%)$1;
			parsertools.create_source_context(_%NAME%,$$,$3);
			_%NAME%.%PARAMS%.Add($3 as %CODE%);
			return _%NAME%;
		}
*!

!*
[NONTERMINALTEMPLATE8]
{
                        procedure_call pc = new procedure_call();
			expression_list expr = new expression_list();
			expr.expressions.Add((expression)$2);
			method_call mc = new method_call(expr);
			mc.dereferencing_value = new ident("%NAME%");
			pc.func_name = mc;
			parsertools.create_source_context(mc.dereferencing_value,$2,$2);
			parsertools.create_source_context(expr,$2,$2);
			parsertools.create_source_context(mc,$1,$2);
			parsertools.create_source_context(pc,$1,$2);
			return pc;
}
*!

tkIdent   	= {Letter}{Alphanumeric}*	!*$$=parsertools.create_ident(this);*!
tkNumber  	= {digit}+           		!*$$=parsertools.create_int_const(this);*!

tkConst 	= 'CONST'                       !*<token_info>*!	
tkVar 		= 'VAR'                         !*<token_info>*!	
tkCall 		= 'CALL'                        !*<token_info>*!	
tkBegin 	= 'BEGIN'                      	!*<token_info>*!
tkEnd 		= 'END'				!*<token_info>*!
tkIf 		= 'IF'				!*<token_info>*!
tkThen 		= 'THEN'			!*<token_info>*!
tkWhile 	= 'WHILE'			!*<token_info>*!
tkDo 		= 'DO'				!*<token_info>*!
tkProcedure     = 'PROCEDURE'			!*<token_info>*!
tkOdd           = 'ODD'                         !*<token_info>*!
tkDot   	= '.'                           !*<token_info>*!	
tkSemiColon 	= ';'      			!*<token_info>*!	
tkComma 	= ','                           !*<token_info>*!
tkRoundOpen 	= '('                           !*<token_info>*!
tkRoundClose 	= ')'                           !*<token_info>*!
tkWriteln 	= '!'                           !*<token_info>*!
tkReadln 	= '?'                           !*<token_info>*!

tkEqual		= '='                           !*<op_type_node(Operators.Equal)>*!
tkGreater 	= '>'                           !*<op_type_node(Operators.Greater)>*!
tkGreaterEqual 	= '>='                          !*<op_type_node(Operators.GreaterEqual)>*!
tkLower 	= '<'                           !*<op_type_node(Operators.Less)>*!
tkLowerEqual 	= '<='                          !*<op_type_node(Operators.LessEqual)>*!
tkNotEqual 	= '#'                           !*<op_type_node(Operators.NotEqual)>*!
tkMinus 	= '-'				!*<op_type_node(Operators.Minus)>*!
tkPlus 		= '+'				!*<op_type_node(Operators.Plus)>*!
tkSlash 	= '/'                           !*<op_type_node(Operators.IntegerDivision)>*!
tkStar 		= '*'                           !*<op_type_node(Operators.Multiplication)>*!
tkAssign 	= ':='                          !*<op_type_node(Operators.Assignment)>*!


<program>            ::= <block> tkDot  !*3program_module<null,null,(block)$1,null>
					$$.Language = LanguageId.PascalABCNET;
					parsertools.create_source_context($$,parsertools.sc_not_null($1,$2),$2);*!						

<block>              ::= <opt_declarations> <statement>         !*3block<(declarations)$1,null>
								statement_list sl=null;
								if($2 is statement_list)
									sl = $2 as statement_list;
								else
								{
									sl = new statement_list();
									sl.subnodes.Add($2 as statement);
									if(!($2 is empty_statement))
										parsertools.assign_source_context(sl,$2);						
								}
								$$.program_code=sl;
								if(!($2 is empty_statement))
									parsertools.create_source_context($$,$1,$2);						
								*!

<opt_declarations>   ::= <declarations>
	               |

<declarations>	     ::= <declaration> <empty>                  !*6declarations<defs>declaration*! 
		       | <declarations> <empty> <declaration>   !*7declarations<defs>declaration*! 
<declaration>
		     ::= <constants> 
		       | <variables> 
		       | <proc_decl>

<constants>          ::= tkConst <constdecl> tkSemiColon        !* parsertools.create_source_context($2,$1,$3); $$=$2; *!

<constdecl>          ::= <constdef> <empty>            		!*6consts_definitions_list<const_defs>const_definition*!
                       | <constdecl> tkComma <constdef>         !*7consts_definitions_list<const_defs>const_definition*!

<constdef>           ::= tkIdent tkEqual tkNumber               !*3simple_const_definition<>
								$$.const_name=(ident)$1;
								$$.const_value=(expression)$3;
								parsertools.create_source_context($$,$1,$3);*!						

<variables>          ::= tkVar <vardecls> tkSemiColon           !*3variable_definitions<>
								//var_def_statement vdf = new var_def_statement((ident_list)$2,null,new int32_const(0),definition_attribute.None,false);
								foreach (ident id in ((ident_list)$2).idents)
								{
								   ident_list idl=new ident_list();
								   idl.idents.Add(id);
								   parsertools.create_source_context(idl,id,id);
								   var_def_statement vdf = new var_def_statement(idl,null,new int32_const(0),definition_attribute.None,false);
								   parsertools.create_source_context(vdf,id,id);
  							           $$.var_definitions.Add(vdf);
  								}								
								parsertools.create_source_context($$,$1,$3);
								*!

<vardecls>           ::= tkIdent <empty>                        !*6ident_list<idents>ident*!
                       | <vardecls> tkComma tkIdent             !*7ident_list<idents>ident*!

<proc_decl>          ::= tkProcedure tkIdent tkSemiColon <block> tkSemiColon !* 
								method_name mn = new method_name(null,(ident)$2,null);
								procedure_header ph = new procedure_header(null,null,mn,false,false,null,null); 
								procedure_definition pd = new procedure_definition(ph,(block)$4);
								parsertools.create_source_context(mn,$2,$2);		
								parsertools.create_source_context(ph,$1,$3);		
								parsertools.create_source_context(pd,$1,$5);
								$$=pd;*!		

<statement>          ::= tkIdent tkAssign <simple_expr>		!*0assign<$1 as addressed_value,$3 as expression,((op_type_node)$2).type>*!

                       | tkCall tkIdent <opt_params_list>       !*3procedure_call<>
								method_call mc = new method_call($3 as expression_list);
								mc.dereferencing_value=(addressed_value)$2;
								parsertools.create_source_context(mc,$2,parsertools.sc_not_null($3,$2));
								$$.func_name = mc;
								parsertools.create_source_context($$,$1,parsertools.sc_not_null($3,$2));*!

                       | tkWriteln <simple_expr>          	!*8writeln<>*!

                       | tkReadln tkIdent          		!*8readln<>*!

                       | tkBegin <compound_statement> tkEnd     !*parsertools.create_source_context($2,$1,$3);
								((statement_list)$2).left_logical_bracket=(syntax_tree_node)$1;
								((statement_list)$2).right_logical_bracket=(syntax_tree_node)$3;
								$$=$2;*!

                       | tkIf <expression> tkThen <statement>   !*3if_node<(expression)$2,(statement)$4,null>
								parsertools.create_source_context($$,$1,parsertools.sc_not_null($4,$3));*!

                       | tkWhile <expression> tkDo <statement>  !*3while_node<(expression)$2,(statement)$4,WhileCycleType.While>
								parsertools.create_source_context($$,$1,parsertools.sc_not_null($4,$3));*!

                       | <empty> <empty>                        !*3empty_statement<>*!


<opt_params_list>    ::= tkRoundOpen <expr_list> tkRoundClose   !* $$=$2; *!
                       |

<expr_list>          ::= <simple_expr> <empty>                 	!*6expression_list<expressions>expression*!
                       | <expr_list> tkComma <simple_expr>     	!*7expression_list<expressions>expression*!


<compound_statement> ::= <statement> <empty>                    !*3statement_list<>
								$$.subnodes.Add((statement)$1);
								parsertools.assign_source_context($$,$1); *!

                       | <compound_statement> tkSemiColon <statement> !*2statement_list<> $$=(statement_list)$1;
								$$.subnodes.Add((statement)$3);
								parsertools.create_source_context($$,$$,parsertools.sc_not_null($3,$2)); *!

<expression>         ::= tkOdd <simple_expr>                    !*3bin_expr<new bin_expr((expression)$2, new int32_const(2), Operators.ModulusRemainder),new int32_const(0),Operators.Equal>
								parsertools.create_source_context($$,$1,$2);*!

                       | <simple_expr> <relop> <simple_expr>    !*0bin_expr<$1 as expression,$3 as expression,((op_type_node)$2).type>*!

<simple_expr>        ::= <term> 
                       | <simple_expr> <addop> <term>      	!*0bin_expr<$1 as expression,$3 as expression,((op_type_node)$2).type>*!

<term>		     ::= <factor> 
                       | <term> <mulop> <factor>              	!*0bin_expr<$1 as expression,$3 as expression,((op_type_node)$2).type>*!

<factor>             ::= tkIdent
                       | tkNumber
                       | tkRoundOpen <expression> tkRoundClose 	!* $$=$2; *!

<relop>              ::= tkEqual
                       | tkNotEqual
                       | tkLower
                       | tkLowerEqual
                       | tkGreater
                       | tkGreaterEqual

<addop>              ::= tkPlus 
                       | tkMinus 

<mulop>		     ::= tkStar 
	               | tkSlash 

<empty>		     ::= ! for rule code call
