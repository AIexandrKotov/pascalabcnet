##TEMPLATE-NAME 'PascalABC.NET'
##LANGUAGE 'KuMir'
##ENGINE-NAME 'PascalABCNET GOLD Parser Engine'
##AUTHOR '3_course' 
##FILE-EXTENSION 'cs'
##NOTES
KuMir parser template. 
Version 1.0
##END-NOTES
##ID-CASE UPPERCASE
##ID-SEPARATOR '_'
##ID-SYMBOL-PREFIX 'Symbol'
##ID-RULE-PREFIX 'Rule'

using System;
using System.IO;
using System.Runtime.Serialization;
using System.Collections;
using PascalABCCompiler.SyntaxTree;
using PascalABCCompiler.Errors;
using PascalABCCompiler.KuMirParser.Errors;
using PascalABCCompiler.ParserTools;
using GoldParser;

namespace  PascalABCCompiler.KuMirParser
{
public partial class GPBParser_KuMir : GPBParser
{



///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//SymbolConstants
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

public enum SymbolConstants : int
{
##SYMBOLS
##DELIMITER ','
	%ID.Padded% = %Value.Padded%%Delimiter% // %Description%
##END-SYMBOLS
};














///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//RuleConstants
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

public enum RuleConstants : int
{
##RULES
##DELIMITER ','
	%ID.Padded% = %Value.Padded%%Delimiter% // %Description%
##END-RULES
};













///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//CreateTerminalObject
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

private Object CreateTerminalObject(int TokenSymbolIndex)
{
switch (TokenSymbolIndex)
{
##SYMBOLS
	case (int)SymbolConstants.%ID% :
    	//%Description%
	//TERMINAL:%Name%
	return null;
	//ENDTERMINAL
##END-SYMBOLS
}
throw new SymbolException("Unknown symbol");
}







///////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////
        //Some methods
        ///////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////

        public class unit_data
        {
            public declarations sub_progs;
            public statement_list initialization;
            public ident_list used_units;

            public unit_data()
            {
                sub_progs = new declarations();
                used_units = new ident_list();
                initialization = new statement_list();
                initialization.subnodes.Add(new empty_statement());
            }

            public void ClearData()
            {
                sub_progs.defs.Clear();
                used_units.idents.Clear();
                initialization.subnodes.Clear();
                initialization.subnodes.Add(new empty_statement());
            }
        }

        public statement_list GetStatements(object _object)
        {
            statement_list _statement_list;
            if (_object is statement_list)
                _statement_list = _object as statement_list;
            else
            {
                _statement_list = new statement_list();
                if (_object is statement)
                    _statement_list.subnodes.Add(_object as statement);
                else
                    _statement_list.subnodes.Add(new empty_statement());
            }
            return _statement_list;
        }

        public expression_list GetExpressions(object _object)
        {
            expression_list _expression_list;
            if (_object is expression_list)
                _expression_list = _object as expression_list;
            else
            {
                _expression_list = new expression_list();
                _expression_list.expressions.Add(_object as expression);
            }
            return _expression_list;
        }

        public ident_list GetIdents(object _object)
        {
            ident_list _ident_list;
            if (_object is ident_list)
                _ident_list = _object as ident_list;
            else
            {
                _ident_list = new ident_list();
                _ident_list.idents.Add(_object as ident);
            }
            return _ident_list;
        }

        public indexers_types GetIndexers(object _object)
        {
            indexers_types _indexers_types;
            if (_object is indexers_types)
                _indexers_types = _object as indexers_types;
            else
            {
                _indexers_types = new indexers_types();
                _indexers_types.indexers.Add(_object as diapason);

            }
            return _indexers_types;
        }

        public formal_parametres GetFormals(object _object)
        {
            if (_object == null)
                return null;
            formal_parametres _formal_parametres;
            if (_object is formal_parametres)
                _formal_parametres = _object as formal_parametres;
            else
            {
                _formal_parametres = new formal_parametres();
                _formal_parametres.params_list.Add(_object as typed_parametres);
            }
            return _formal_parametres;
        }

        public named_type_reference GetType(string name)
        {   //case ?             
            named_type_reference _named_type_reference = new named_type_reference();
            if (name == StringResources.Get("tk_integer_type")) _named_type_reference.names.Add(new ident("integer"));
            if (name == StringResources.Get("tk_real_type")) _named_type_reference.names.Add(new ident("real"));
            if (name == StringResources.Get("tk_boolean_type")) _named_type_reference.names.Add(new ident("boolean"));
            if (name == StringResources.Get("tk_char_type")) _named_type_reference.names.Add(new ident("char"));
            if (name == StringResources.Get("tk_string_type")) _named_type_reference.names.Add(new ident("string"));
            return _named_type_reference;
        }

///////////////////////









///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//CreateNonTerminalObject
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

public Object CreateNonTerminalObject(int ReductionRuleIndex)
{
switch (ReductionRuleIndex)
{
##RULES
	case (int)RuleConstants.%ID% :
	//%Description%
	//NONTERMINAL:%Description%
	return null;
	//ENDNONTERMINAL
##END-RULES
}
throw new RuleException("Unknown rule");
}  






} 
}
