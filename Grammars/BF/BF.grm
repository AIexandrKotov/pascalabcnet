"Name"    = 'BrainF*ck.NET'                             
"Version" = '1.0'
"Author"  = 'DarkStar'
"About"   = 'PascalABC.NET project'

"Case Sensitive" = False

!<%NAME%> %CODE%
!*
[TERMINALTEMPLATE]
		{
			%NAME% _%NAME%=new %NAME%(%PARAMS%);
			_%NAME%.source_context=parsertools.GetTokenSourceContext();
			%CODE%
			return _%NAME%;
		}
*!


!*
[NONTERMINALTEMPLATE0]         
		{
			%NAME% _%NAME%=new %NAME%(%PARAMS%);
			%CODE%
			return _%NAME%;
		}
*!

!*
[NONTERMINALTEMPLATE3]         
		{
			%NAME% _%NAME%=new %NAME%(%PARAMS%);
			%CODE%
			return _%NAME%;
		}
*!

!*
[NONTERMINALTEMPLATE4]         
		{
			if (operation_value!=0)
			{
			ident caret=new ident("%NAME%");
			int32_const caret_n=new int32_const(operation_value);
			operation_value=0;
			bin_expr expr=new bin_expr(caret,caret_n,Operators.Plus);
			assign _assign=new assign(caret,expr,Operators.Assignment);
			parsertools.create_source_context(caret,left_node,right_node);
			caret_n.source_context=expr.source_context=_assign.source_context=caret.source_context;
			return _assign;
			}
			syntax_tree_node tn=new empty_statement();
			parsertools.create_source_context(tn,left_node,right_node);
			return tn;
		}
*!

!*
[NONTERMINALTEMPLATE5]         
		{
			if (operation_value!=0)
			{
				indexer indx=new indexer(new expression_list());
				indx.indexes.expressions.Add(new ident("BFCaretPos"));
				indx.dereferencing_value=new ident("BFField");
				bin_expr be=new bin_expr(indx,new int32_const(operation_value),Operators.Plus);
				assign assg=new assign(indx,be,Operators.Assignment);
				operation_value=0;				
				parsertools.create_source_context(assg,left_node,right_node);
                                indx.dereferencing_value.source_context=indx.source_context=indx.indexes.expressions[0].source_context=be.right.source_context=be.source_context=assg.source_context;
				return assg;
			}	
			syntax_tree_node tn=new empty_statement();
			parsertools.create_source_context(tn,left_node,right_node);
			return tn;	
		}
*!


!*
[NONTERMINALTEMPLATE6]         
		{       
			indexer indx=new indexer(new expression_list());
			indx.indexes.expressions.Add(new ident("BFCaretPos"));
			indx.dereferencing_value=new ident("BFField");
			bin_expr be=new bin_expr(indx,new int32_const(0),Operators.NotEqual);
			while_node wn=new while_node();
                        wn.expr=be;
			wn.statements=(statement_list)$2;
                        parsertools.create_source_context(wn,$1,$3);
                        be.right.source_context=indx.dereferencing_value.source_context=indx.source_context=indx.indexes.expressions[0].source_context=be.source_context=wn.source_context;
                        return wn;
		}
*!



!*
[NONTERMINALTEMPLATE7]         
		{
			ident _ident=new ident("%NAME%");
			procedure_call _procedure_call=new procedure_call(_ident);
			parsertools.create_source_context(_ident,$1,$1);
			parsertools.create_source_context(_procedure_call,$1,$1);
                        return _procedure_call;
		}
*!

!for list: 
!<el>
!<list> <el>
!*
[NONTERMINALTEMPLATE8]         
		//TemplateList for %NAME% (create) 
		{
			%NAME% _%NAME%=new %NAME%();
			_%NAME%.source_context=((%CODE%)$1).source_context;
			_%NAME%.%PARAMS%.Add((%CODE%)$1);
			return _%NAME%;
		}
*!
!*
[NONTERMINALTEMPLATE9]
		//TemplateList for %NAME% (add)         
		{
			%NAME% _%NAME%=(%NAME%)$1;
			parsertools.create_source_context(_%NAME%,$$,$2);
			_%NAME%.%PARAMS%.Add((%CODE%)$2);
			return _%NAME%;
		}
*!

"Start Symbol" = <BF>

{All ASCII}		= {#1..#256} + {Cyrillic} + {#8100..#8800}
{BFWS}			= {Whitespace} + {All ASCII} - [','] - ['.'] - ['<'] - ['>'] - ['+'] - ['-'] - ['['] - [']'] - [';']
{CommentPart}		= {All ASCII} - {CR}

Whitespace		= ({BFWS}+) | (';' {CommentPart}* {CR})

tkRead 			= ','                           !*<token_info>*!
tkWrite 		= '.'                           !*<token_info>*!
tkJMPPast 		= '['                           !*<token_info>*!
tkJMPRet 		= ']'                           !*<token_info>*!
tkDecValue 		= '-'				!*<token_info>*!
tkIncValue		= '+'				!*<token_info>*!
tkInc	 		= '>'                           !*<token_info>*!
tkDec 			= '<'                           !*<token_info>*!


<BF> 				
        ::= <bf_instructions> 		                !*3program_module<>
							  $$.Language = LanguageId.PascalABCNET;
							  ident BFSystem=new ident("BFSystem");
							  unit_or_namespace unit=new unit_or_namespace();
							  unit.name = new ident_list();
							  unit.name.idents.Add(BFSystem);
							  uses_list used_units=new uses_list();
							  used_units.units.Add(unit);
							  block program_block=new block(null,(statement_list)$1);
							  $$.used_units=used_units;
							  $$.program_block=program_block;
							  used_units.source_context=unit.source_context=BFSystem.source_context=new SourceContext(1,1,1,1,1,1);
                                                          parsertools.create_source_context(program_block,$1,$1);
                                                          parsertools.create_source_context($$,$1,$1);
							  operation_value=0;
							*!

<bf_empty_instruction>
	::= 

<bf_instructions>
	::= <bf_instructions_list>                     		
	 |  <bf_empty_instruction>                      !*3statement_list<> $$.subnodes.Add(new empty_statement());*!

<bf_instructions_list> 
	::= <bf_instruction>                            !*8statement_list<subnodes>statement*!
	 |  <bf_instructions_list> <bf_instruction>   	!*9statement_list<subnodes>statement*!

<change_pos_list>
	::= <change_pos>                                !* left_node=right_node=$1; $$=null;*!
	 |  <change_pos_list> <change_pos>              !* right_node=$2; $$=null;*!

<change_value_list>
	::= <change_value>                              !* left_node=right_node=$1; $$=null;*!
	 |  <change_value_list> <change_value>          !* right_node=$2; $$=null;*!

<change_pos>                                            
	::= tkInc                                       !* operation_value++; $$=$1;*!
	 |  tkDec                                       !* operation_value--; $$=$1;*!

<change_value>                                          
	::= tkIncValue                                  !* operation_value++; $$=$1;*!
	 |  tkDecValue                                  !* operation_value--; $$=$1;*!

<bf_instruction>  
	::= tkJMPPast <bf_instructions> tkJMPRet	!*6CaretValueNotNull<CaretValueNull>*!  
	 |  <change_pos_list>                           !*4BFCaretPos<>*!  
	 |  <change_value_list>                         !*5<>*!  
	 |  tkWrite       				!*7WriteCaretValue<>*!			! .  Output *p
	 |  tkRead                    			!*7ReadCaretValue<>*!			! ,  Input *p
 

                                