// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-8EAQPI9
// DateTime: 21.11.2016 15:52:42
// UserName: ?????????
// Input file <ABCPascal.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using PascalABCCompiler.SyntaxTree;
using PascalABCSavParser;
using PascalABCCompiler.ParserTools;
using PascalABCCompiler.Errors;
using System.Linq;

namespace GPPGParserScanner
{
public enum Tokens {
    error=1,EOF=2,tkDirectiveName=3,tkAmpersend=4,tkColon=5,tkDotDot=6,
    tkPoint=7,tkRoundOpen=8,tkRoundClose=9,tkSemiColon=10,tkSquareOpen=11,tkSquareClose=12,
    tkQuestion=13,tkMatching=14,tkQuestionPoint=15,tkSizeOf=16,tkTypeOf=17,tkWhere=18,
    tkArray=19,tkCase=20,tkClass=21,tkAuto=22,tkConst=23,tkConstructor=24,
    tkDestructor=25,tkElse=26,tkExcept=27,tkFile=28,tkFor=29,tkForeach=30,
    tkFunction=31,tkIf=32,tkImplementation=33,tkInherited=34,tkInterface=35,tkProcedure=36,
    tkOperator=37,tkProperty=38,tkRaise=39,tkRecord=40,tkSet=41,tkType=42,
    tkThen=43,tkUses=44,tkVar=45,tkWhile=46,tkWith=47,tkNil=48,
    tkGoto=49,tkOf=50,tkLabel=51,tkLock=52,tkProgram=53,tkEvent=54,
    tkDefault=55,tkTemplate=56,tkPacked=57,tkExports=58,tkResourceString=59,tkThreadvar=60,
    tkSealed=61,tkPartial=62,tkTo=63,tkDownto=64,tkCycle=65,tkSequence=66,
    tkYield=67,tkNew=68,tkOn=69,tkName=70,tkPrivate=71,tkProtected=72,
    tkPublic=73,tkInternal=74,tkRead=75,tkWrite=76,tkParseModeExpression=77,tkParseModeStatement=78,
    tkParseModeType=79,tkBegin=80,tkEnd=81,tkAsmBody=82,tkILCode=83,tkError=84,
    INVISIBLE=85,tkRepeat=86,tkUntil=87,tkDo=88,tkComma=89,tkFinally=90,
    tkTry=91,tkInitialization=92,tkFinalization=93,tkUnit=94,tkLibrary=95,tkExternal=96,
    tkParams=97,tkAssign=98,tkPlusEqual=99,tkMinusEqual=100,tkMultEqual=101,tkDivEqual=102,
    tkMinus=103,tkPlus=104,tkSlash=105,tkStar=106,tkEqual=107,tkGreater=108,
    tkGreaterEqual=109,tkLower=110,tkLowerEqual=111,tkNotEqual=112,tkCSharpStyleOr=113,tkArrow=114,
    tkOr=115,tkXor=116,tkAnd=117,tkDiv=118,tkMod=119,tkShl=120,
    tkShr=121,tkNot=122,tkAs=123,tkIn=124,tkIs=125,tkImplicit=126,
    tkExplicit=127,tkAddressOf=128,tkDeref=129,tkIdentifier=130,tkStringLiteral=131,tkAsciiChar=132,
    tkAbstract=133,tkForward=134,tkOverload=135,tkReintroduce=136,tkOverride=137,tkVirtual=138,
    tkExtensionMethod=139,tkInteger=140,tkFloat=141,tkHex=142};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<PascalABCSavParser.Union,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public partial class GPPGParser: ShiftReduceParser<PascalABCSavParser.Union, LexLocation>
{
  // Verbatim content from ABCPascal.y
// ��� ���������� ����������� � ����� GPPGParser, �������������� ����� ������, ������������ �������� gppg
    public syntax_tree_node root; // �������� ���� ��������������� ������ 

    public List<Error> errors;
    public string current_file_name;
    public int max_errors = 10;
    public PT parsertools;
    public List<compiler_directive> CompilerDirectives;
	public ParserLambdaHelper lambdaHelper = new ParserLambdaHelper();
	
    public GPPGParser(AbstractScanner<PascalABCSavParser.Union, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from ABCPascal.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[813];
  private static State[] states = new State[1302];
  private static string[] nonTerms = new string[] {
      "parse_goal", "unit_key_word", "assignment", "optional_array_initializer", 
      "attribute_declarations", "ot_visibility_specifier", "one_attribute", "attribute_variable", 
      "const_factor", "const_variable_2", "const_term", "const_variable", "literal_or_number", 
      "unsigned_number", "program_block", "optional_var", "class_attribute", 
      "class_attributes", "class_attributes1", "member_list_section", "optional_component_list_seq_end", 
      "const_decl", "only_const_decl", "const_decl_sect", "object_type", "record_type", 
      "member_list", "method_decl_list", "field_or_const_definition_list", "case_stmt", 
      "case_list", "program_decl_sect_list", "int_decl_sect_list1", "inclass_decl_sect_list1", 
      "interface_decl_sect_list", "decl_sect_list", "decl_sect_list1", "inclass_decl_sect_list", 
      "field_or_const_definition", "abc_decl_sect", "decl_sect", "int_decl_sect", 
      "type_decl", "simple_type_decl", "simple_field_or_const_definition", "res_str_decl_sect", 
      "method_decl_withattr", "method_or_property_decl", "property_definition", 
      "fp_sect", "default_expr", "expr_as_stmt", "exception_block", "external_block", 
      "exception_handler", "exception_handler_list", "exception_identifier", 
      "typed_const_list1", "typed_const_list", "optional_expr_list", "elem_list", 
      "optional_expr_list_with_bracket", "expr_list", "const_elem_list1", "const_func_expr_list", 
      "case_label_list", "const_elem_list", "optional_const_func_expr_list", 
      "elem_list1", "enumeration_id", "expr_l1_list", "enumeration_id_list", 
      "const_simple_expr", "term", "typed_const", "typed_const_or_new", "expr", 
      "expr_with_func_decl_lambda", "const_expr", "elem", "range_expr", "const_elem", 
      "array_const", "factor", "relop_expr", "expr_l1", "simple_expr", "range_term", 
      "range_factor", "external_directive_ident", "init_const_expr", "case_label", 
      "variable", "var_reference", "simple_expr_or_nothing", "for_cycle_type", 
      "format_expr", "foreach_stmt", "for_stmt", "yield_stmt", "yield_sequence_stmt", 
      "fp_list", "fp_sect_list", "file_type", "sequence_type", "var_address", 
      "goto_stmt", "func_name_ident", "param_name", "const_field_name", "func_name_with_template_args", 
      "identifier_or_keyword", "unit_name", "exception_variable", "const_name", 
      "func_meth_name_ident", "label_name", "type_decl_identifier", "template_identifier_with_equal", 
      "program_param", "identifier", "identifier_keyword_operatorname", "func_class_name_ident", 
      "optional_identifier", "visibility_specifier", "property_specifier_directives", 
      "non_reserved", "if_stmt", "initialization_part", "template_arguments", 
      "label_list", "ident_or_keyword_pointseparator_list", "ident_list", "param_name_list", 
      "inherited_message", "implementation_part", "interface_part", "abc_interface_part", 
      "simple_type_list", "literal", "one_literal", "literal_list", "label_decl_sect", 
      "lock_stmt", "func_name", "proc_name", "optional_proc_name", "qualified_identifier", 
      "new_expr", "allowable_expr_as_stmt", "parts", "inclass_block", "block", 
      "proc_func_external_block", "exception_class_type_identifier", "simple_type_identifier", 
      "base_class_name", "base_classes_names_list", "optional_base_classes", 
      "one_compiler_directive", "optional_head_compiler_directives", "head_compiler_directives", 
      "program_heading_2", "optional_tk_point", "program_param_list", "optional_semicolon", 
      "operator_name_ident", "const_relop", "const_addop", "assign_operator", 
      "const_mulop", "relop", "addop", "mulop", "sign", "overload_operator", 
      "typecast_op", "property_specifiers", "array_defaultproperty", "meth_modificators", 
      "optional_method_modificators", "optional_method_modificators1", "meth_modificator", 
      "proc_call", "proc_func_constr_destr_decl", "proc_func_decl", "inclass_proc_func_decl", 
      "inclass_proc_func_decl_noclass", "constr_destr_decl", "inclass_constr_destr_decl", 
      "method_decl", "proc_func_constr_destr_decl_with_attr", "proc_func_decl_noclass", 
      "method_header", "proc_type_decl", "procedural_type_kind", "proc_header", 
      "procedural_type", "constr_destr_header", "proc_func_header", "func_header", 
      "method_procfunc_header", "int_func_header", "int_proc_header", "property_interface", 
      "program_file", "program_header", "parameter_decl", "parameter_decl_list", 
      "property_parameter_list", "const_set", "question_expr", "question_constexpr", 
      "record_const", "const_field_list_1", "const_field_list", "const_field", 
      "repeat_stmt", "raise_stmt", "pointer_type", "attribute_declaration", "one_or_some_attribute", 
      "stmt_list", "else_case", "exception_block_else_branch", "compound_stmt", 
      "string_type", "sizeof_expr", "simple_prim_property_definition", "simple_property_definition", 
      "stmt_or_expression", "unlabelled_stmt", "stmt", "case_item", "set_type", 
      "as_is_expr", "as_is_constexpr", "unsized_array_type", "simple_type_or_", 
      "simple_type", "array_name_for_new_expr", "foreach_stmt_ident_dype_opt", 
      "fptype", "type_ref", "fptype_noproctype", "array_type", "template_param", 
      "structured_type", "unpacked_structured_type", "simple_or_template_type_reference", 
      "type_ref_or_secific", "for_stmt_decl_or_assign", "type_decl_type", "type_ref_and_secific_list", 
      "type_decl_sect", "try_handler", "class_or_interface_keyword", "optional_tk_do", 
      "keyword", "reserved_keyword", "typeof_expr", "simple_fp_sect", "template_param_list", 
      "template_type_params", "template_type", "try_stmt", "uses_clause", "used_units_list", 
      "unit_file", "used_unit_name", "unit_header", "var_decl_sect", "var_decl", 
      "var_decl_part", "field_definition", "var_stmt", "where_part", "where_part_list", 
      "optional_where_section", "while_stmt", "with_stmt", "variable_as_type", 
      "dotted_identifier", "func_decl_lambda", "expl_func_decl_lambda", "lambda_type_ref", 
      "lambda_type_ref_noproctype", "full_lambda_fp_list", "lambda_simple_fp_sect", 
      "lambda_function_body", "lambda_procedure_body", "optional_full_lambda_fp_list", 
      "field_in_unnamed_object", "list_fields_in_unnamed_object", "func_class_name_ident_list", 
      "rem_lambda", "variable_list", "var_variable_list", "tkAssignOrEqual", 
      "$accept", };

  static GPPGParser() {
    states[0] = new State(new int[]{53,1215,11,760,77,1286,79,1288,78,1295,3,-24,44,-24,80,-24,51,-24,23,-24,59,-24,42,-24,45,-24,54,-24,36,-24,31,-24,21,-24,24,-24,25,-24,94,-195,95,-195},new int[]{-1,1,-206,3,-207,4,-269,1227,-5,1228,-221,772,-151,1285});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{3,1211,44,-11,80,-11,51,-11,23,-11,59,-11,42,-11,45,-11,54,-11,11,-11,36,-11,31,-11,21,-11,24,-11,25,-11},new int[]{-161,5,-162,1209,-160,1214});
    states[5] = new State(-35,new int[]{-267,6});
    states[6] = new State(new int[]{44,14,51,-58,23,-58,59,-58,42,-58,45,-58,54,-58,11,-58,36,-58,31,-58,21,-58,24,-58,25,-58,80,-58},new int[]{-15,7,-32,110,-36,1153,-37,1154});
    states[7] = new State(new int[]{7,9,10,10,5,11,89,12,6,13,2,-23},new int[]{-164,8});
    states[8] = new State(-17);
    states[9] = new State(-18);
    states[10] = new State(-19);
    states[11] = new State(-20);
    states[12] = new State(-21);
    states[13] = new State(-22);
    states[14] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,74,32,73,33,72,34,71,35,61,36,56,37,115,38,17,39,16,40,55,41,18,42,116,43,117,44,118,45,119,46,120,47,121,48,122,49,123,50,124,51,125,52,19,53,66,54,80,55,20,56,21,57,23,58,24,59,25,60,64,61,88,62,26,63,27,64,28,65,22,66,93,67,90,68,29,69,30,70,31,71,32,72,33,73,34,74,92,75,35,76,36,77,38,78,39,79,40,80,86,81,41,82,91,83,42,84,43,85,63,86,87,87,44,88,45,89,46,90,47,91,48,92,49,93,50,94,51,95,53,96,94,97,95,98,96,99,97,100,54,101,67,102,37,104,81,105},new int[]{-268,15,-270,109,-132,19,-112,108,-121,22,-126,24,-127,27,-259,30,-125,31,-260,103});
    states[15] = new State(new int[]{10,16,89,17});
    states[16] = new State(-36);
    states[17] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,74,32,73,33,72,34,71,35,61,36,56,37,115,38,17,39,16,40,55,41,18,42,116,43,117,44,118,45,119,46,120,47,121,48,122,49,123,50,124,51,125,52,19,53,66,54,80,55,20,56,21,57,23,58,24,59,25,60,64,61,88,62,26,63,27,64,28,65,22,66,93,67,90,68,29,69,30,70,31,71,32,72,33,73,34,74,92,75,35,76,36,77,38,78,39,79,40,80,86,81,41,82,91,83,42,84,43,85,63,86,87,87,44,88,45,89,46,90,47,91,48,92,49,93,50,94,51,95,53,96,94,97,95,98,96,99,97,100,54,101,67,102,37,104,81,105},new int[]{-270,18,-132,19,-112,108,-121,22,-126,24,-127,27,-259,30,-125,31,-260,103});
    states[18] = new State(-38);
    states[19] = new State(new int[]{7,20,124,106,10,-39,89,-39});
    states[20] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,74,32,73,33,72,34,71,35,61,36,56,37,115,38,17,39,16,40,55,41,18,42,116,43,117,44,118,45,119,46,120,47,121,48,122,49,123,50,124,51,125,52,19,53,66,54,80,55,20,56,21,57,23,58,24,59,25,60,64,61,88,62,26,63,27,64,28,65,22,66,93,67,90,68,29,69,30,70,31,71,32,72,33,73,34,74,92,75,35,76,36,77,38,78,39,79,40,80,86,81,41,82,91,83,42,84,43,85,63,86,87,87,44,88,45,89,46,90,47,91,48,92,49,93,50,94,51,95,53,96,94,97,95,98,96,99,97,100,54,101,67,102,37,104,81,105},new int[]{-112,21,-121,22,-126,24,-127,27,-259,30,-125,31,-260,103});
    states[21] = new State(-34);
    states[22] = new State(-650);
    states[23] = new State(-647);
    states[24] = new State(-648);
    states[25] = new State(-662);
    states[26] = new State(-663);
    states[27] = new State(-649);
    states[28] = new State(-664);
    states[29] = new State(-665);
    states[30] = new State(-651);
    states[31] = new State(-670);
    states[32] = new State(-666);
    states[33] = new State(-667);
    states[34] = new State(-668);
    states[35] = new State(-669);
    states[36] = new State(-671);
    states[37] = new State(-672);
    states[38] = new State(-673);
    states[39] = new State(-674);
    states[40] = new State(-675);
    states[41] = new State(-676);
    states[42] = new State(-677);
    states[43] = new State(-678);
    states[44] = new State(-679);
    states[45] = new State(-680);
    states[46] = new State(-681);
    states[47] = new State(-682);
    states[48] = new State(-683);
    states[49] = new State(-684);
    states[50] = new State(-685);
    states[51] = new State(-686);
    states[52] = new State(-687);
    states[53] = new State(-688);
    states[54] = new State(-689);
    states[55] = new State(-690);
    states[56] = new State(-691);
    states[57] = new State(-692);
    states[58] = new State(-693);
    states[59] = new State(-694);
    states[60] = new State(-695);
    states[61] = new State(-696);
    states[62] = new State(-697);
    states[63] = new State(-698);
    states[64] = new State(-699);
    states[65] = new State(-700);
    states[66] = new State(-701);
    states[67] = new State(-702);
    states[68] = new State(-703);
    states[69] = new State(-704);
    states[70] = new State(-705);
    states[71] = new State(-706);
    states[72] = new State(-707);
    states[73] = new State(-708);
    states[74] = new State(-709);
    states[75] = new State(-710);
    states[76] = new State(-711);
    states[77] = new State(-712);
    states[78] = new State(-713);
    states[79] = new State(-714);
    states[80] = new State(-715);
    states[81] = new State(-716);
    states[82] = new State(-717);
    states[83] = new State(-718);
    states[84] = new State(-719);
    states[85] = new State(-720);
    states[86] = new State(-721);
    states[87] = new State(-722);
    states[88] = new State(-723);
    states[89] = new State(-724);
    states[90] = new State(-725);
    states[91] = new State(-726);
    states[92] = new State(-727);
    states[93] = new State(-728);
    states[94] = new State(-729);
    states[95] = new State(-730);
    states[96] = new State(-731);
    states[97] = new State(-732);
    states[98] = new State(-733);
    states[99] = new State(-734);
    states[100] = new State(-735);
    states[101] = new State(-736);
    states[102] = new State(-737);
    states[103] = new State(-652);
    states[104] = new State(-738);
    states[105] = new State(-739);
    states[106] = new State(new int[]{131,107});
    states[107] = new State(-40);
    states[108] = new State(-33);
    states[109] = new State(-37);
    states[110] = new State(new int[]{80,112},new int[]{-226,111});
    states[111] = new State(-31);
    states[112] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,481,142,147,141,482,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,10,-445},new int[]{-223,113,-233,479,-232,117,-3,118,-94,119,-106,256,-93,264,-121,480,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558,-117,1029});
    states[113] = new State(new int[]{81,114,10,115});
    states[114] = new State(-477);
    states[115] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,481,142,147,141,482,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,10,-445,87,-445,90,-445,27,-445,93,-445},new int[]{-233,116,-232,117,-3,118,-94,119,-106,256,-93,264,-121,480,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558,-117,1029});
    states[116] = new State(-479);
    states[117] = new State(-443);
    states[118] = new State(-446);
    states[119] = new State(new int[]{98,305,99,306,100,307,101,308,102,309,81,-475,10,-475,87,-475,90,-475,27,-475,93,-475,26,-475,13,-475,6,-475,89,-475,9,-475,12,-475,5,-475,88,-475,74,-475,73,-475,72,-475,71,-475,2,-475},new int[]{-170,120});
    states[120] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,312,16,368,17,373,5,381,31,592,36,608},new int[]{-78,121,-77,122,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,270,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380,-284,1054,-285,1055});
    states[121] = new State(-468);
    states[122] = new State(-532);
    states[123] = new State(new int[]{13,124,81,-534,10,-534,87,-534,90,-534,27,-534,93,-534,26,-534,6,-534,89,-534,9,-534,12,-534,5,-534,88,-534,74,-534,73,-534,72,-534,71,-534,2,-534});
    states[124] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-86,125,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[125] = new State(new int[]{5,126,13,124});
    states[126] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-86,127,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[127] = new State(new int[]{13,124,81,-540,10,-540,87,-540,90,-540,27,-540,93,-540,26,-540,6,-540,89,-540,9,-540,12,-540,5,-540,88,-540,74,-540,73,-540,72,-540,71,-540,2,-540,43,-540,50,-540,128,-540,130,-540,75,-540,76,-540,70,-540,68,-540,37,-540,34,-540,8,-540,16,-540,17,-540,131,-540,132,-540,140,-540,142,-540,141,-540,49,-540,80,-540,32,-540,20,-540,86,-540,46,-540,29,-540,47,-540,91,-540,39,-540,30,-540,45,-540,52,-540,67,-540,63,-540,64,-540});
    states[128] = new State(new int[]{14,913,107,915,112,916,110,917,108,918,111,919,109,920,124,921,13,-536,81,-536,10,-536,87,-536,90,-536,27,-536,93,-536,26,-536,6,-536,89,-536,9,-536,12,-536,5,-536,88,-536,74,-536,73,-536,72,-536,71,-536,2,-536,43,-536,50,-536,128,-536,130,-536,75,-536,76,-536,70,-536,68,-536,37,-536,34,-536,8,-536,16,-536,17,-536,131,-536,132,-536,140,-536,142,-536,141,-536,49,-536,80,-536,32,-536,20,-536,86,-536,46,-536,29,-536,47,-536,91,-536,39,-536,30,-536,45,-536,52,-536,67,-536,63,-536,64,-536},new int[]{-172,129});
    states[129] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-87,130,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378});
    states[130] = new State(new int[]{104,217,103,218,115,219,116,220,113,221,14,-558,107,-558,112,-558,110,-558,108,-558,111,-558,109,-558,124,-558,13,-558,81,-558,10,-558,87,-558,90,-558,27,-558,93,-558,26,-558,6,-558,89,-558,9,-558,12,-558,5,-558,88,-558,74,-558,73,-558,72,-558,71,-558,2,-558,43,-558,50,-558,128,-558,130,-558,75,-558,76,-558,70,-558,68,-558,37,-558,34,-558,8,-558,16,-558,17,-558,131,-558,132,-558,140,-558,142,-558,141,-558,49,-558,80,-558,32,-558,20,-558,86,-558,46,-558,29,-558,47,-558,91,-558,39,-558,30,-558,45,-558,52,-558,67,-558,63,-558,64,-558},new int[]{-173,131});
    states[131] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-74,132,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378});
    states[132] = new State(new int[]{106,225,105,226,118,227,119,228,120,229,121,230,117,231,123,202,125,203,5,-574,104,-574,103,-574,115,-574,116,-574,113,-574,14,-574,107,-574,112,-574,110,-574,108,-574,111,-574,109,-574,124,-574,13,-574,81,-574,10,-574,87,-574,90,-574,27,-574,93,-574,26,-574,6,-574,89,-574,9,-574,12,-574,88,-574,74,-574,73,-574,72,-574,71,-574,2,-574,43,-574,50,-574,128,-574,130,-574,75,-574,76,-574,70,-574,68,-574,37,-574,34,-574,8,-574,16,-574,17,-574,131,-574,132,-574,140,-574,142,-574,141,-574,49,-574,80,-574,32,-574,20,-574,86,-574,46,-574,29,-574,47,-574,91,-574,39,-574,30,-574,45,-574,52,-574,67,-574,63,-574,64,-574},new int[]{-174,133,-177,223});
    states[133] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,29,37,281,34,310,8,325,16,368,17,373},new int[]{-84,134,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372});
    states[134] = new State(-585);
    states[135] = new State(-595);
    states[136] = new State(new int[]{7,137,106,-596,105,-596,118,-596,119,-596,120,-596,121,-596,117,-596,123,-596,125,-596,5,-596,104,-596,103,-596,115,-596,116,-596,113,-596,14,-596,107,-596,112,-596,110,-596,108,-596,111,-596,109,-596,124,-596,13,-596,81,-596,10,-596,87,-596,90,-596,27,-596,93,-596,26,-596,6,-596,89,-596,9,-596,12,-596,88,-596,74,-596,73,-596,72,-596,71,-596,2,-596,43,-596,50,-596,128,-596,130,-596,75,-596,76,-596,70,-596,68,-596,37,-596,34,-596,8,-596,16,-596,17,-596,131,-596,132,-596,140,-596,142,-596,141,-596,49,-596,80,-596,32,-596,20,-596,86,-596,46,-596,29,-596,47,-596,91,-596,39,-596,30,-596,45,-596,52,-596,67,-596,63,-596,64,-596});
    states[137] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,74,32,73,33,72,34,71,35,61,36,56,37,115,38,17,39,16,40,55,41,18,42,116,43,117,44,118,45,119,46,120,47,121,48,122,49,123,50,124,51,125,52,19,53,66,54,80,55,20,56,21,57,23,58,24,59,25,60,64,61,88,62,26,63,27,64,28,65,22,66,93,67,90,68,29,69,30,70,31,71,32,72,33,73,34,74,92,75,35,76,36,77,38,78,39,79,40,80,86,81,41,82,91,83,42,84,43,85,63,86,87,87,44,88,45,89,46,90,47,91,48,92,49,93,50,94,51,95,53,96,94,97,95,98,96,99,97,100,54,101,67,102,37,104,81,105},new int[]{-112,138,-121,22,-126,24,-127,27,-259,30,-125,31,-260,103});
    states[138] = new State(-621);
    states[139] = new State(-604);
    states[140] = new State(new int[]{131,142,132,143,7,-637,106,-637,105,-637,118,-637,119,-637,120,-637,121,-637,117,-637,123,-637,125,-637,5,-637,104,-637,103,-637,115,-637,116,-637,113,-637,14,-637,107,-637,112,-637,110,-637,108,-637,111,-637,109,-637,124,-637,13,-637,81,-637,10,-637,87,-637,90,-637,27,-637,93,-637,26,-637,6,-637,89,-637,9,-637,12,-637,88,-637,74,-637,73,-637,72,-637,71,-637,2,-637,43,-637,50,-637,128,-637,130,-637,75,-637,76,-637,70,-637,68,-637,37,-637,34,-637,8,-637,16,-637,17,-637,140,-637,142,-637,141,-637,49,-637,80,-637,32,-637,20,-637,86,-637,46,-637,29,-637,47,-637,91,-637,39,-637,30,-637,45,-637,52,-637,67,-637,63,-637,64,-637,114,-637,98,-637,11,-637},new int[]{-141,141});
    states[141] = new State(-639);
    states[142] = new State(-635);
    states[143] = new State(-636);
    states[144] = new State(-638);
    states[145] = new State(-605);
    states[146] = new State(-172);
    states[147] = new State(-173);
    states[148] = new State(-174);
    states[149] = new State(-597);
    states[150] = new State(new int[]{8,151});
    states[151] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-250,152,-156,154,-121,187,-126,24,-127,27});
    states[152] = new State(new int[]{9,153});
    states[153] = new State(-594);
    states[154] = new State(new int[]{7,155,4,158,110,160,9,-541,123,-541,125,-541,106,-541,105,-541,118,-541,119,-541,120,-541,121,-541,117,-541,104,-541,103,-541,115,-541,116,-541,107,-541,112,-541,108,-541,111,-541,109,-541,124,-541,13,-541,6,-541,89,-541,12,-541,5,-541,81,-541,10,-541,87,-541,90,-541,27,-541,93,-541,26,-541,88,-541,74,-541,73,-541,72,-541,71,-541,2,-541,113,-541,14,-541,43,-541,50,-541,128,-541,130,-541,75,-541,76,-541,70,-541,68,-541,37,-541,34,-541,8,-541,16,-541,17,-541,131,-541,132,-541,140,-541,142,-541,141,-541,49,-541,80,-541,32,-541,20,-541,86,-541,46,-541,29,-541,47,-541,91,-541,39,-541,30,-541,45,-541,52,-541,67,-541,63,-541,64,-541},new int[]{-264,157});
    states[155] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,74,32,73,33,72,34,71,35,61,36,56,37,115,38,17,39,16,40,55,41,18,42,116,43,117,44,118,45,119,46,120,47,121,48,122,49,123,50,124,51,125,52,19,53,66,54,80,55,20,56,21,57,23,58,24,59,25,60,64,61,88,62,26,63,27,64,28,65,22,66,93,67,90,68,29,69,30,70,31,71,32,72,33,73,34,74,92,75,35,76,36,77,38,78,39,79,40,80,86,81,41,82,91,83,42,84,43,85,63,86,87,87,44,88,45,89,46,90,47,91,48,92,49,93,50,94,51,95,53,96,94,97,95,98,96,99,97,100,54,101,67,102,37,104,81,105},new int[]{-112,156,-121,22,-126,24,-127,27,-259,30,-125,31,-260,103});
    states[156] = new State(-235);
    states[157] = new State(-542);
    states[158] = new State(new int[]{110,160},new int[]{-264,159});
    states[159] = new State(-543);
    states[160] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-263,161,-247,1152,-240,165,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-248,737,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,738,-196,724,-195,725,-265,739});
    states[161] = new State(new int[]{108,162,89,163});
    states[162] = new State(-215);
    states[163] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-247,164,-240,165,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-248,737,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,738,-196,724,-195,725,-265,739});
    states[164] = new State(-217);
    states[165] = new State(-218);
    states[166] = new State(new int[]{6,1150,104,1137,103,1138,115,1139,116,1140,108,-222,89,-222,10,-222,9,-222,114,-222,107,-222,98,-222,81,-222,87,-222,90,-222,27,-222,93,-222,26,-222,13,-222,12,-222,5,-222,88,-222,74,-222,73,-222,72,-222,71,-222,2,-222,75,-222,76,-222,11,-222,124,-222},new int[]{-169,167});
    states[167] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143},new int[]{-88,168,-89,345,-156,636,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144});
    states[168] = new State(new int[]{106,204,105,205,118,206,119,207,120,208,121,209,117,210,6,-226,104,-226,103,-226,115,-226,116,-226,108,-226,89,-226,10,-226,9,-226,114,-226,107,-226,98,-226,81,-226,87,-226,90,-226,27,-226,93,-226,26,-226,13,-226,12,-226,5,-226,88,-226,74,-226,73,-226,72,-226,71,-226,2,-226,75,-226,76,-226,11,-226,124,-226},new int[]{-171,169});
    states[169] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143},new int[]{-89,170,-156,636,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144});
    states[170] = new State(new int[]{8,171,106,-228,105,-228,118,-228,119,-228,120,-228,121,-228,117,-228,6,-228,104,-228,103,-228,115,-228,116,-228,108,-228,89,-228,10,-228,9,-228,114,-228,107,-228,98,-228,81,-228,87,-228,90,-228,27,-228,93,-228,26,-228,13,-228,12,-228,5,-228,88,-228,74,-228,73,-228,72,-228,71,-228,2,-228,75,-228,76,-228,11,-228,124,-228});
    states[171] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572,9,-167},new int[]{-67,172,-64,174,-82,396,-79,177,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[172] = new State(new int[]{9,173});
    states[173] = new State(-233);
    states[174] = new State(new int[]{89,175,9,-166,12,-166});
    states[175] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572},new int[]{-82,176,-79,177,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[176] = new State(-169);
    states[177] = new State(new int[]{13,178,6,1148,89,-170,9,-170,12,-170,5,-170});
    states[178] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572},new int[]{-79,179,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[179] = new State(new int[]{5,180,13,178});
    states[180] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572},new int[]{-79,181,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[181] = new State(new int[]{13,178,6,-116,89,-116,9,-116,12,-116,5,-116,81,-116,10,-116,87,-116,90,-116,27,-116,93,-116,26,-116,88,-116,74,-116,73,-116,72,-116,71,-116,2,-116});
    states[182] = new State(new int[]{104,1137,103,1138,115,1139,116,1140,107,1141,112,1142,110,1143,108,1144,111,1145,109,1146,124,1147,13,-110,6,-110,89,-110,9,-110,12,-110,5,-110,81,-110,10,-110,87,-110,90,-110,27,-110,93,-110,26,-110,88,-110,74,-110,73,-110,72,-110,71,-110,2,-110},new int[]{-169,183,-168,1135});
    states[183] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,403,122,568,104,251,103,252,129,572},new int[]{-11,184,-9,211,-12,190,-121,402,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574});
    states[184] = new State(new int[]{123,202,125,203,106,204,105,205,118,206,119,207,120,208,121,209,117,210,104,-125,103,-125,115,-125,116,-125,107,-125,112,-125,110,-125,108,-125,111,-125,109,-125,124,-125,13,-125,6,-125,89,-125,9,-125,12,-125,5,-125,81,-125,10,-125,87,-125,90,-125,27,-125,93,-125,26,-125,88,-125,74,-125,73,-125,72,-125,71,-125,2,-125},new int[]{-177,185,-171,188});
    states[185] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-250,186,-156,154,-121,187,-126,24,-127,27});
    states[186] = new State(-130);
    states[187] = new State(-234);
    states[188] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,403,122,568,104,251,103,252,129,572},new int[]{-9,189,-12,190,-121,402,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570});
    states[189] = new State(-133);
    states[190] = new State(new int[]{7,192,129,194,8,195,11,1132,123,-141,125,-141,106,-141,105,-141,118,-141,119,-141,120,-141,121,-141,117,-141,104,-141,103,-141,115,-141,116,-141,107,-141,112,-141,110,-141,108,-141,111,-141,109,-141,124,-141,13,-141,6,-141,89,-141,9,-141,12,-141,5,-141,81,-141,10,-141,87,-141,90,-141,27,-141,93,-141,26,-141,88,-141,74,-141,73,-141,72,-141,71,-141,2,-141},new int[]{-10,191});
    states[191] = new State(-157);
    states[192] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,74,32,73,33,72,34,71,35,61,36,56,37,115,38,17,39,16,40,55,41,18,42,116,43,117,44,118,45,119,46,120,47,121,48,122,49,123,50,124,51,125,52,19,53,66,54,80,55,20,56,21,57,23,58,24,59,25,60,64,61,88,62,26,63,27,64,28,65,22,66,93,67,90,68,29,69,30,70,31,71,32,72,33,73,34,74,92,75,35,76,36,77,38,78,39,79,40,80,86,81,41,82,91,83,42,84,43,85,63,86,87,87,44,88,45,89,46,90,47,91,48,92,49,93,50,94,51,95,53,96,94,97,95,98,96,99,97,100,54,101,67,102,37,104,81,105},new int[]{-112,193,-121,22,-126,24,-127,27,-259,30,-125,31,-260,103});
    states[193] = new State(-158);
    states[194] = new State(-159);
    states[195] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572,9,-163},new int[]{-68,196,-65,198,-79,1131,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[196] = new State(new int[]{9,197});
    states[197] = new State(-160);
    states[198] = new State(new int[]{89,199,9,-162});
    states[199] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572},new int[]{-79,200,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[200] = new State(new int[]{13,178,89,-165,9,-165});
    states[201] = new State(new int[]{123,202,125,203,106,204,105,205,118,206,119,207,120,208,121,209,117,210,104,-124,103,-124,115,-124,116,-124,107,-124,112,-124,110,-124,108,-124,111,-124,109,-124,124,-124,13,-124,6,-124,89,-124,9,-124,12,-124,5,-124,81,-124,10,-124,87,-124,90,-124,27,-124,93,-124,26,-124,88,-124,74,-124,73,-124,72,-124,71,-124,2,-124},new int[]{-177,185,-171,188});
    states[202] = new State(-580);
    states[203] = new State(-581);
    states[204] = new State(-134);
    states[205] = new State(-135);
    states[206] = new State(-136);
    states[207] = new State(-137);
    states[208] = new State(-138);
    states[209] = new State(-139);
    states[210] = new State(-140);
    states[211] = new State(-131);
    states[212] = new State(new int[]{114,213,7,-154,129,-154,8,-154,11,-154,123,-154,125,-154,106,-154,105,-154,118,-154,119,-154,120,-154,121,-154,117,-154,104,-154,103,-154,115,-154,116,-154,107,-154,112,-154,110,-154,108,-154,111,-154,109,-154,124,-154,13,-154,6,-154,89,-154,9,-154,12,-154,5,-154,81,-154,10,-154,87,-154,90,-154,27,-154,93,-154,26,-154,88,-154,74,-154,73,-154,72,-154,71,-154,2,-154});
    states[213] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,80,112,32,414,46,484,86,475,29,489,30,515,20,463,91,505,52,545,67,560},new int[]{-290,214,-86,215,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-226,412,-128,413,-280,538,-218,539,-99,540,-98,541,-30,542,-266,543,-144,544,-100,559});
    states[214] = new State(-111);
    states[215] = new State(new int[]{13,124,81,-790,10,-790,87,-790,90,-790,27,-790,93,-790,26,-790,6,-790,89,-790,9,-790,12,-790,5,-790,88,-790,74,-790,73,-790,72,-790,71,-790,2,-790});
    states[216] = new State(new int[]{104,217,103,218,115,219,116,220,113,221,14,-557,107,-557,112,-557,110,-557,108,-557,111,-557,109,-557,124,-557,5,-557,13,-557,81,-557,10,-557,87,-557,90,-557,27,-557,93,-557,26,-557,6,-557,89,-557,9,-557,12,-557,88,-557,74,-557,73,-557,72,-557,71,-557,2,-557,43,-557,50,-557,128,-557,130,-557,75,-557,76,-557,70,-557,68,-557,37,-557,34,-557,8,-557,16,-557,17,-557,131,-557,132,-557,140,-557,142,-557,141,-557,49,-557,80,-557,32,-557,20,-557,86,-557,46,-557,29,-557,47,-557,91,-557,39,-557,30,-557,45,-557,52,-557,67,-557,63,-557,64,-557},new int[]{-173,131});
    states[217] = new State(-575);
    states[218] = new State(-576);
    states[219] = new State(-577);
    states[220] = new State(-578);
    states[221] = new State(-579);
    states[222] = new State(new int[]{106,225,105,226,118,227,119,228,120,229,121,230,117,231,123,202,125,203,5,-573,104,-573,103,-573,115,-573,116,-573,113,-573,14,-573,107,-573,112,-573,110,-573,108,-573,111,-573,109,-573,124,-573,13,-573,81,-573,10,-573,87,-573,90,-573,27,-573,93,-573,26,-573,6,-573,89,-573,9,-573,12,-573,88,-573,74,-573,73,-573,72,-573,71,-573,2,-573,43,-573,50,-573,128,-573,130,-573,75,-573,76,-573,70,-573,68,-573,37,-573,34,-573,8,-573,16,-573,17,-573,131,-573,132,-573,140,-573,142,-573,141,-573,49,-573,80,-573,32,-573,20,-573,86,-573,46,-573,29,-573,47,-573,91,-573,39,-573,30,-573,45,-573,52,-573,67,-573,63,-573,64,-573},new int[]{-174,133,-177,223});
    states[223] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-250,224,-156,154,-121,187,-126,24,-127,27});
    states[224] = new State(-582);
    states[225] = new State(-587);
    states[226] = new State(-588);
    states[227] = new State(-589);
    states[228] = new State(-590);
    states[229] = new State(-591);
    states[230] = new State(-592);
    states[231] = new State(-593);
    states[232] = new State(-583);
    states[233] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,381,12,-630},new int[]{-61,234,-69,236,-80,1130,-77,239,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380});
    states[234] = new State(new int[]{12,235});
    states[235] = new State(-598);
    states[236] = new State(new int[]{89,237,12,-629});
    states[237] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,381},new int[]{-80,238,-77,239,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380});
    states[238] = new State(-632);
    states[239] = new State(new int[]{6,240,89,-633,12,-633});
    states[240] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,381},new int[]{-77,241,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380});
    states[241] = new State(-634);
    states[242] = new State(new int[]{5,243,104,217,103,218,115,219,116,220,113,221,14,-557,107,-557,112,-557,110,-557,108,-557,111,-557,109,-557,124,-557,13,-557,81,-557,10,-557,87,-557,90,-557,27,-557,93,-557,26,-557,6,-557,89,-557,9,-557,12,-557,88,-557,74,-557,73,-557,72,-557,71,-557,2,-557},new int[]{-173,131});
    states[243] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,-561,81,-561,10,-561,87,-561,90,-561,27,-561,93,-561,26,-561,13,-561,6,-561,89,-561,9,-561,12,-561,88,-561,74,-561,73,-561,72,-561,71,-561,2,-561},new int[]{-95,244,-87,385,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378});
    states[244] = new State(new int[]{5,245,81,-562,10,-562,87,-562,90,-562,27,-562,93,-562,26,-562,13,-562,6,-562,89,-562,9,-562,12,-562,88,-562,74,-562,73,-562,72,-562,71,-562,2,-562});
    states[245] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-87,246,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378});
    states[246] = new State(new int[]{104,217,103,218,115,219,116,220,113,221,81,-564,10,-564,87,-564,90,-564,27,-564,93,-564,26,-564,13,-564,6,-564,89,-564,9,-564,12,-564,5,-564,88,-564,74,-564,73,-564,72,-564,71,-564,2,-564},new int[]{-173,131});
    states[247] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,29,37,281,34,310,8,325,16,368,17,373},new int[]{-84,248,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372});
    states[248] = new State(-599);
    states[249] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,29,37,281,34,310,8,325,16,368,17,373},new int[]{-84,250,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372});
    states[250] = new State(-600);
    states[251] = new State(-152);
    states[252] = new State(-153);
    states[253] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,29,37,281,34,310,8,325,16,368,17,373},new int[]{-84,254,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372});
    states[254] = new State(-601);
    states[255] = new State(-602);
    states[256] = new State(new int[]{128,1129,130,23,75,25,76,26,70,28,68,29,37,281,34,310,8,438,16,368,17,373,131,142,132,143,140,146,142,147,141,148},new int[]{-93,257,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145});
    states[257] = new State(new int[]{11,258,8,265,7,430,129,435,4,436,98,-606,99,-606,100,-606,101,-606,102,-606,81,-606,10,-606,87,-606,90,-606,27,-606,93,-606,106,-606,105,-606,118,-606,119,-606,120,-606,121,-606,117,-606,123,-606,125,-606,5,-606,104,-606,103,-606,115,-606,116,-606,113,-606,14,-606,107,-606,112,-606,110,-606,108,-606,111,-606,109,-606,124,-606,13,-606,26,-606,6,-606,89,-606,9,-606,12,-606,88,-606,74,-606,73,-606,72,-606,71,-606,2,-606,43,-606,50,-606,128,-606,130,-606,75,-606,76,-606,70,-606,68,-606,37,-606,34,-606,16,-606,17,-606,131,-606,132,-606,140,-606,142,-606,141,-606,49,-606,80,-606,32,-606,20,-606,86,-606,46,-606,29,-606,47,-606,91,-606,39,-606,30,-606,45,-606,52,-606,67,-606,63,-606,64,-606});
    states[258] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,312,16,368,17,373,5,381,31,592,36,608},new int[]{-63,259,-78,269,-77,122,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,270,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380,-284,1054,-285,1055});
    states[259] = new State(new int[]{12,260,89,261});
    states[260] = new State(-622);
    states[261] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,312,16,368,17,373,5,381,31,592,36,608},new int[]{-78,262,-77,122,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,270,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380,-284,1054,-285,1055});
    states[262] = new State(-529);
    states[263] = new State(-608);
    states[264] = new State(new int[]{11,258,8,265,7,430,129,435,4,436,98,-607,99,-607,100,-607,101,-607,102,-607,81,-607,10,-607,87,-607,90,-607,27,-607,93,-607,106,-607,105,-607,118,-607,119,-607,120,-607,121,-607,117,-607,123,-607,125,-607,5,-607,104,-607,103,-607,115,-607,116,-607,113,-607,14,-607,107,-607,112,-607,110,-607,108,-607,111,-607,109,-607,124,-607,13,-607,26,-607,6,-607,89,-607,9,-607,12,-607,88,-607,74,-607,73,-607,72,-607,71,-607,2,-607,43,-607,50,-607,128,-607,130,-607,75,-607,76,-607,70,-607,68,-607,37,-607,34,-607,16,-607,17,-607,131,-607,132,-607,140,-607,142,-607,141,-607,49,-607,80,-607,32,-607,20,-607,86,-607,46,-607,29,-607,47,-607,91,-607,39,-607,30,-607,45,-607,52,-607,67,-607,63,-607,64,-607});
    states[265] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,312,16,368,17,373,5,381,31,592,36,608,9,-628},new int[]{-60,266,-63,268,-78,269,-77,122,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,270,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380,-284,1054,-285,1055});
    states[266] = new State(new int[]{9,267});
    states[267] = new State(-623);
    states[268] = new State(new int[]{89,261,9,-627,12,-627});
    states[269] = new State(-528);
    states[270] = new State(new int[]{114,271,11,-615,8,-615,7,-615,129,-615,4,-615,106,-615,105,-615,118,-615,119,-615,120,-615,121,-615,117,-615,123,-615,125,-615,5,-615,104,-615,103,-615,115,-615,116,-615,113,-615,14,-615,107,-615,112,-615,110,-615,108,-615,111,-615,109,-615,124,-615,13,-615,81,-615,10,-615,87,-615,90,-615,27,-615,93,-615,26,-615,6,-615,89,-615,9,-615,12,-615,88,-615,74,-615,73,-615,72,-615,71,-615,2,-615});
    states[271] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,80,112,32,414,46,484,86,475,29,489,30,515,20,463,91,505,52,545,67,560},new int[]{-290,272,-86,215,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-226,412,-128,413,-280,538,-218,539,-99,540,-98,541,-30,542,-266,543,-144,544,-100,559});
    states[272] = new State(-767);
    states[273] = new State(-615);
    states[274] = new State(new int[]{21,1115,130,23,75,25,76,26,70,28,68,29,19,1128,11,-665,8,-665,7,-665,129,-665,4,-665,98,-665,99,-665,100,-665,101,-665,102,-665,81,-665,10,-665,5,-665,87,-665,90,-665,27,-665,93,-665,114,-665,106,-665,105,-665,118,-665,119,-665,120,-665,121,-665,117,-665,123,-665,125,-665,104,-665,103,-665,115,-665,116,-665,113,-665,14,-665,107,-665,112,-665,110,-665,108,-665,111,-665,109,-665,124,-665,13,-665,26,-665,6,-665,89,-665,9,-665,12,-665,88,-665,74,-665,73,-665,72,-665,71,-665,2,-665,43,-665,50,-665,128,-665,37,-665,34,-665,16,-665,17,-665,131,-665,132,-665,140,-665,142,-665,141,-665,49,-665,80,-665,32,-665,20,-665,86,-665,46,-665,29,-665,47,-665,91,-665,39,-665,30,-665,45,-665,52,-665,67,-665,63,-665,64,-665},new int[]{-250,275,-241,1107,-156,1126,-121,187,-126,24,-127,27,-238,1127});
    states[275] = new State(new int[]{8,277,81,-555,10,-555,87,-555,90,-555,27,-555,93,-555,106,-555,105,-555,118,-555,119,-555,120,-555,121,-555,117,-555,123,-555,125,-555,5,-555,104,-555,103,-555,115,-555,116,-555,113,-555,14,-555,107,-555,112,-555,110,-555,108,-555,111,-555,109,-555,124,-555,13,-555,26,-555,6,-555,89,-555,9,-555,12,-555,88,-555,74,-555,73,-555,72,-555,71,-555,2,-555,43,-555,50,-555,128,-555,130,-555,75,-555,76,-555,70,-555,68,-555,37,-555,34,-555,16,-555,17,-555,131,-555,132,-555,140,-555,142,-555,141,-555,49,-555,80,-555,32,-555,20,-555,86,-555,46,-555,29,-555,47,-555,91,-555,39,-555,30,-555,45,-555,52,-555,67,-555,63,-555,64,-555},new int[]{-62,276});
    states[276] = new State(-546);
    states[277] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,312,16,368,17,373,5,381,31,592,36,608,9,-628},new int[]{-60,278,-63,268,-78,269,-77,122,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,270,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380,-284,1054,-285,1055});
    states[278] = new State(new int[]{9,279});
    states[279] = new State(-556);
    states[280] = new State(-616);
    states[281] = new State(new int[]{103,283,104,284,105,285,106,286,107,287,108,288,109,289,110,290,111,291,112,292,115,293,116,294,117,295,118,296,119,297,120,298,121,299,122,300,124,301,126,302,127,303,98,305,99,306,100,307,101,308,102,309},new int[]{-176,282,-170,304});
    states[282] = new State(-640);
    states[283] = new State(-740);
    states[284] = new State(-741);
    states[285] = new State(-742);
    states[286] = new State(-743);
    states[287] = new State(-744);
    states[288] = new State(-745);
    states[289] = new State(-746);
    states[290] = new State(-747);
    states[291] = new State(-748);
    states[292] = new State(-749);
    states[293] = new State(-750);
    states[294] = new State(-751);
    states[295] = new State(-752);
    states[296] = new State(-753);
    states[297] = new State(-754);
    states[298] = new State(-755);
    states[299] = new State(-756);
    states[300] = new State(-757);
    states[301] = new State(-758);
    states[302] = new State(-759);
    states[303] = new State(-760);
    states[304] = new State(-761);
    states[305] = new State(-762);
    states[306] = new State(-763);
    states[307] = new State(-764);
    states[308] = new State(-765);
    states[309] = new State(-766);
    states[310] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-121,311,-126,24,-127,27});
    states[311] = new State(-617);
    states[312] = new State(new int[]{9,1084,48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,381},new int[]{-77,313,-86,315,-121,1088,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380});
    states[313] = new State(new int[]{9,314});
    states[314] = new State(-618);
    states[315] = new State(new int[]{89,316,13,124,9,-534});
    states[316] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-71,317,-86,1075,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[317] = new State(new int[]{89,1073,5,340,10,-786,9,-786},new int[]{-286,318});
    states[318] = new State(new int[]{10,332,9,-774},new int[]{-292,319});
    states[319] = new State(new int[]{9,320});
    states[320] = new State(new int[]{5,1076,106,-603,105,-603,118,-603,119,-603,120,-603,121,-603,117,-603,123,-603,125,-603,104,-603,103,-603,115,-603,116,-603,113,-603,14,-603,107,-603,112,-603,110,-603,108,-603,111,-603,109,-603,124,-603,13,-603,81,-603,10,-603,87,-603,90,-603,27,-603,93,-603,26,-603,6,-603,89,-603,9,-603,12,-603,88,-603,74,-603,73,-603,72,-603,71,-603,2,-603,114,-788},new int[]{-296,321,-287,322});
    states[321] = new State(-772);
    states[322] = new State(new int[]{114,323});
    states[323] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,80,112,32,414,46,484,86,475,29,489,30,515,20,463,91,505,52,545,67,560},new int[]{-290,324,-86,215,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-226,412,-128,413,-280,538,-218,539,-99,540,-98,541,-30,542,-266,543,-144,544,-100,559});
    states[324] = new State(-776);
    states[325] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,381},new int[]{-77,313,-86,326,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380});
    states[326] = new State(new int[]{89,327,13,124,9,-534});
    states[327] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-71,328,-86,1075,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[328] = new State(new int[]{89,1073,5,340,10,-786,9,-786},new int[]{-286,329});
    states[329] = new State(new int[]{10,332,9,-774},new int[]{-292,330});
    states[330] = new State(new int[]{9,331});
    states[331] = new State(-603);
    states[332] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-288,333,-289,606,-133,336,-121,607,-126,24,-127,27});
    states[333] = new State(new int[]{10,334,9,-775});
    states[334] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-289,335,-133,336,-121,607,-126,24,-127,27});
    states[335] = new State(-784);
    states[336] = new State(new int[]{89,338,5,340,10,-786,9,-786},new int[]{-286,337});
    states[337] = new State(-785);
    states[338] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-121,339,-126,24,-127,27});
    states[339] = new State(-320);
    states[340] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-243,341,-244,342,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[341] = new State(-787);
    states[342] = new State(-437);
    states[343] = new State(-208);
    states[344] = new State(new int[]{106,204,105,205,118,206,119,207,120,208,121,209,117,210,6,-225,104,-225,103,-225,115,-225,116,-225,108,-225,89,-225,10,-225,9,-225,114,-225,107,-225,98,-225,81,-225,87,-225,90,-225,27,-225,93,-225,26,-225,13,-225,12,-225,5,-225,88,-225,74,-225,73,-225,72,-225,71,-225,2,-225,75,-225,76,-225,11,-225,124,-225},new int[]{-171,169});
    states[345] = new State(new int[]{8,171,106,-227,105,-227,118,-227,119,-227,120,-227,121,-227,117,-227,6,-227,104,-227,103,-227,115,-227,116,-227,108,-227,89,-227,10,-227,9,-227,114,-227,107,-227,98,-227,81,-227,87,-227,90,-227,27,-227,93,-227,26,-227,13,-227,12,-227,5,-227,88,-227,74,-227,73,-227,72,-227,71,-227,2,-227,75,-227,76,-227,11,-227,124,-227});
    states[346] = new State(new int[]{7,155,114,347,110,160,8,-229,106,-229,105,-229,118,-229,119,-229,120,-229,121,-229,117,-229,6,-229,104,-229,103,-229,115,-229,116,-229,108,-229,89,-229,10,-229,9,-229,107,-229,98,-229,81,-229,87,-229,90,-229,27,-229,93,-229,26,-229,13,-229,12,-229,5,-229,88,-229,74,-229,73,-229,72,-229,71,-229,2,-229,75,-229,76,-229,11,-229,124,-229},new int[]{-264,886});
    states[347] = new State(new int[]{8,349,130,23,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-247,348,-240,165,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-248,737,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,738,-196,724,-195,725,-265,739});
    states[348] = new State(-265);
    states[349] = new State(new int[]{9,350,130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-72,355,-70,361,-244,364,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[350] = new State(new int[]{114,351,108,-269,89,-269,10,-269,9,-269,107,-269,98,-269,81,-269,87,-269,90,-269,27,-269,93,-269,26,-269,13,-269,6,-269,12,-269,5,-269,88,-269,74,-269,73,-269,72,-269,71,-269,2,-269,75,-269,76,-269,11,-269,124,-269});
    states[351] = new State(new int[]{8,353,130,23,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-247,352,-240,165,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-248,737,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,738,-196,724,-195,725,-265,739});
    states[352] = new State(-267);
    states[353] = new State(new int[]{9,354,130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-72,355,-70,361,-244,364,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[354] = new State(new int[]{114,351,108,-271,89,-271,10,-271,9,-271,107,-271,98,-271,81,-271,87,-271,90,-271,27,-271,93,-271,26,-271,13,-271,6,-271,12,-271,5,-271,88,-271,74,-271,73,-271,72,-271,71,-271,2,-271,75,-271,76,-271,11,-271,124,-271});
    states[355] = new State(new int[]{9,356,89,711});
    states[356] = new State(new int[]{114,357,108,-224,89,-224,10,-224,9,-224,107,-224,98,-224,81,-224,87,-224,90,-224,27,-224,93,-224,26,-224,13,-224,6,-224,12,-224,5,-224,88,-224,74,-224,73,-224,72,-224,71,-224,2,-224,75,-224,76,-224,11,-224,124,-224});
    states[357] = new State(new int[]{8,359,130,23,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-247,358,-240,165,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-248,737,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,738,-196,724,-195,725,-265,739});
    states[358] = new State(-268);
    states[359] = new State(new int[]{9,360,130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-72,355,-70,361,-244,364,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[360] = new State(new int[]{114,351,108,-272,89,-272,10,-272,9,-272,107,-272,98,-272,81,-272,87,-272,90,-272,27,-272,93,-272,26,-272,13,-272,6,-272,12,-272,5,-272,88,-272,74,-272,73,-272,72,-272,71,-272,2,-272,75,-272,76,-272,11,-272,124,-272});
    states[361] = new State(new int[]{89,362});
    states[362] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-70,363,-244,364,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[363] = new State(-236);
    states[364] = new State(new int[]{107,365,89,-238,9,-238});
    states[365] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,381},new int[]{-77,366,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380});
    states[366] = new State(-239);
    states[367] = new State(-619);
    states[368] = new State(new int[]{8,369});
    states[369] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-250,370,-156,154,-121,187,-126,24,-127,27});
    states[370] = new State(new int[]{9,371});
    states[371] = new State(-538);
    states[372] = new State(-620);
    states[373] = new State(new int[]{8,374});
    states[374] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-250,375,-156,154,-121,187,-126,24,-127,27});
    states[375] = new State(new int[]{9,376});
    states[376] = new State(-539);
    states[377] = new State(-584);
    states[378] = new State(-586);
    states[379] = new State(-537);
    states[380] = new State(-535);
    states[381] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,-561,81,-561,10,-561,87,-561,90,-561,27,-561,93,-561,26,-561,13,-561,6,-561,89,-561,9,-561,12,-561,88,-561,74,-561,73,-561,72,-561,71,-561,2,-561},new int[]{-95,382,-87,385,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378});
    states[382] = new State(new int[]{5,383,81,-563,10,-563,87,-563,90,-563,27,-563,93,-563,26,-563,13,-563,6,-563,89,-563,9,-563,12,-563,88,-563,74,-563,73,-563,72,-563,71,-563,2,-563});
    states[383] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-87,384,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378});
    states[384] = new State(new int[]{104,217,103,218,115,219,116,220,113,221,81,-565,10,-565,87,-565,90,-565,27,-565,93,-565,26,-565,13,-565,6,-565,89,-565,9,-565,12,-565,5,-565,88,-565,74,-565,73,-565,72,-565,71,-565,2,-565},new int[]{-173,131});
    states[385] = new State(new int[]{104,217,103,218,115,219,116,220,113,221,5,-560,81,-560,10,-560,87,-560,90,-560,27,-560,93,-560,26,-560,13,-560,6,-560,89,-560,9,-560,12,-560,88,-560,74,-560,73,-560,72,-560,71,-560,2,-560},new int[]{-173,131});
    states[386] = new State(new int[]{11,387,7,-647,114,-647,110,-647,8,-647,106,-647,105,-647,118,-647,119,-647,120,-647,121,-647,117,-647,6,-647,104,-647,103,-647,115,-647,116,-647,10,-647,9,-647,107,-647,89,-647,98,-647,81,-647,87,-647,90,-647,27,-647,93,-647,26,-647,13,-647,12,-647,5,-647,88,-647,74,-647,73,-647,72,-647,71,-647,2,-647,108,-647,75,-647,76,-647,124,-647});
    states[387] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572},new int[]{-79,388,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[388] = new State(new int[]{12,389,13,178});
    states[389] = new State(-259);
    states[390] = new State(-155);
    states[391] = new State(-156);
    states[392] = new State(-142);
    states[393] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572,12,-167},new int[]{-67,394,-64,174,-82,396,-79,177,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[394] = new State(new int[]{12,395});
    states[395] = new State(-151);
    states[396] = new State(-168);
    states[397] = new State(-143);
    states[398] = new State(-144);
    states[399] = new State(-145);
    states[400] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,403,122,568,104,251,103,252,129,572},new int[]{-9,401,-12,190,-121,402,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570});
    states[401] = new State(-146);
    states[402] = new State(-154);
    states[403] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572},new int[]{-79,404,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[404] = new State(new int[]{9,405,13,178});
    states[405] = new State(-147);
    states[406] = new State(new int[]{9,408,130,23,75,25,76,26,70,28,68,274,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,533,122,568,104,251,103,252,129,572,55,150},new int[]{-79,407,-59,1071,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575,-58,576,-76,583,-75,531,-83,579,-214,580,-149,581,-51,582});
    states[407] = new State(new int[]{9,405,13,178,89,-175});
    states[408] = new State(new int[]{5,340,114,-786},new int[]{-286,409});
    states[409] = new State(new int[]{114,410});
    states[410] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,80,112,32,414,46,484,86,475,29,489,30,515,20,463,91,505,52,545,67,560},new int[]{-290,411,-86,215,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-226,412,-128,413,-280,538,-218,539,-99,540,-98,541,-30,542,-266,543,-144,544,-100,559});
    states[411] = new State(-112);
    states[412] = new State(-791);
    states[413] = new State(-792);
    states[414] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-86,415,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[415] = new State(new int[]{43,416,13,124});
    states[416] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,10,-445,87,-445,90,-445,27,-445,93,-445,26,-445,13,-445,6,-445,89,-445,9,-445,12,-445,5,-445,88,-445,74,-445,73,-445,72,-445,71,-445,2,-445},new int[]{-232,417,-3,118,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558});
    states[417] = new State(new int[]{26,418,81,-480,10,-480,87,-480,90,-480,27,-480,93,-480,13,-480,6,-480,89,-480,9,-480,12,-480,5,-480,88,-480,74,-480,73,-480,72,-480,71,-480,2,-480});
    states[418] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,10,-445,87,-445,90,-445,27,-445,93,-445,26,-445,13,-445,6,-445,89,-445,9,-445,12,-445,5,-445,88,-445,74,-445,73,-445,72,-445,71,-445,2,-445},new int[]{-232,419,-3,118,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558});
    states[419] = new State(-481);
    states[420] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,81,-510,10,-510,87,-510,90,-510,27,-510,93,-510,26,-510,13,-510,6,-510,89,-510,9,-510,12,-510,5,-510,88,-510,74,-510,73,-510,72,-510,71,-510,2,-510},new int[]{-121,311,-126,24,-127,27});
    states[421] = new State(new int[]{45,441,48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,381},new int[]{-77,313,-93,422,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380});
    states[422] = new State(new int[]{89,423,11,258,8,265,7,430,129,435,4,436,106,-607,105,-607,118,-607,119,-607,120,-607,121,-607,117,-607,123,-607,125,-607,5,-607,104,-607,103,-607,115,-607,116,-607,113,-607,14,-607,107,-607,112,-607,110,-607,108,-607,111,-607,109,-607,124,-607,13,-607,9,-607});
    states[423] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,37,281,34,310,8,438,16,368,17,373,131,142,132,143,140,146,142,147,141,148},new int[]{-297,424,-93,440,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145});
    states[424] = new State(new int[]{9,425,89,428});
    states[425] = new State(new int[]{98,305,99,306,100,307,101,308,102,309},new int[]{-170,426});
    states[426] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,381},new int[]{-77,427,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380});
    states[427] = new State(-469);
    states[428] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,37,281,34,310,8,438,16,368,17,373,131,142,132,143,140,146,142,147,141,148},new int[]{-93,429,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145});
    states[429] = new State(new int[]{11,258,8,265,7,430,129,435,4,436,9,-472,89,-472});
    states[430] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,74,32,73,33,72,34,71,35,61,36,56,37,115,38,17,39,16,40,55,41,18,42,116,43,117,44,118,45,119,46,120,47,121,48,122,49,123,50,124,51,125,52,19,53,66,54,80,55,20,56,21,57,23,58,24,59,25,60,64,61,88,62,26,63,27,64,28,65,22,66,93,67,90,68,29,69,30,70,31,71,32,72,33,73,34,74,92,75,35,76,36,77,38,78,39,79,40,80,86,81,41,82,91,83,42,84,43,85,63,86,87,87,44,88,45,89,46,90,47,91,48,92,49,93,50,94,51,95,53,96,94,97,95,98,96,99,97,100,54,101,67,102,37,281},new int[]{-122,431,-121,432,-126,24,-127,27,-259,433,-125,31,-167,434});
    states[431] = new State(-624);
    states[432] = new State(-653);
    states[433] = new State(-654);
    states[434] = new State(-655);
    states[435] = new State(-625);
    states[436] = new State(new int[]{110,160},new int[]{-264,437});
    states[437] = new State(-626);
    states[438] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,381},new int[]{-77,313,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380});
    states[439] = new State(new int[]{7,137});
    states[440] = new State(new int[]{11,258,8,265,7,430,129,435,4,436,9,-471,89,-471});
    states[441] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,37,281,34,310,8,438,16,368,17,373,131,142,132,143,140,146,142,147,141,148},new int[]{-93,442,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145});
    states[442] = new State(new int[]{89,443,11,258,8,265,7,430,129,435,4,436});
    states[443] = new State(new int[]{45,451},new int[]{-298,444});
    states[444] = new State(new int[]{9,445,89,448});
    states[445] = new State(new int[]{98,305,99,306,100,307,101,308,102,309},new int[]{-170,446});
    states[446] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,381},new int[]{-77,447,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380});
    states[447] = new State(-470);
    states[448] = new State(new int[]{45,449});
    states[449] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,37,281,34,310,8,438,16,368,17,373,131,142,132,143,140,146,142,147,141,148},new int[]{-93,450,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145});
    states[450] = new State(new int[]{11,258,8,265,7,430,129,435,4,436,9,-474,89,-474});
    states[451] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,37,281,34,310,8,438,16,368,17,373,131,142,132,143,140,146,142,147,141,148},new int[]{-93,452,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145});
    states[452] = new State(new int[]{11,258,8,265,7,430,129,435,4,436,9,-473,89,-473});
    states[453] = new State(-447);
    states[454] = new State(-448);
    states[455] = new State(new int[]{140,457,141,458,130,23,75,25,76,26,70,28,68,29},new int[]{-117,456,-121,459,-126,24,-127,27});
    states[456] = new State(-476);
    states[457] = new State(-90);
    states[458] = new State(-91);
    states[459] = new State(-92);
    states[460] = new State(-449);
    states[461] = new State(-450);
    states[462] = new State(-451);
    states[463] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-86,464,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[464] = new State(new int[]{50,465,13,124});
    states[465] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572,10,-485,26,-485,81,-485},new int[]{-31,466,-234,1070,-66,471,-92,1067,-82,1066,-79,177,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[466] = new State(new int[]{10,469,26,1068,81,-490},new int[]{-224,467});
    states[467] = new State(new int[]{81,468});
    states[468] = new State(-482);
    states[469] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572,10,-485,26,-485,81,-485},new int[]{-234,470,-66,471,-92,1067,-82,1066,-79,177,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[470] = new State(-484);
    states[471] = new State(new int[]{5,472,89,1064});
    states[472] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,10,-445,26,-445,81,-445},new int[]{-232,473,-3,118,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558});
    states[473] = new State(-486);
    states[474] = new State(-452);
    states[475] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,481,142,147,141,482,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,87,-445,10,-445},new int[]{-223,476,-233,479,-232,117,-3,118,-94,119,-106,256,-93,264,-121,480,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558,-117,1029});
    states[476] = new State(new int[]{87,477,10,115});
    states[477] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,381},new int[]{-77,478,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380});
    states[478] = new State(-492);
    states[479] = new State(-478);
    states[480] = new State(new int[]{11,-615,8,-615,7,-615,129,-615,4,-615,98,-615,99,-615,100,-615,101,-615,102,-615,81,-615,10,-615,87,-615,90,-615,27,-615,93,-615,5,-92});
    states[481] = new State(new int[]{7,-172,5,-90});
    states[482] = new State(new int[]{7,-174,5,-91});
    states[483] = new State(-453);
    states[484] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-86,485,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[485] = new State(new int[]{13,124,88,1056,128,-495,130,-495,75,-495,76,-495,70,-495,68,-495,37,-495,34,-495,8,-495,16,-495,17,-495,131,-495,132,-495,140,-495,142,-495,141,-495,49,-495,80,-495,32,-495,20,-495,86,-495,46,-495,29,-495,47,-495,91,-495,39,-495,30,-495,45,-495,52,-495,67,-495,81,-495,10,-495,87,-495,90,-495,27,-495,93,-495,26,-495,6,-495,89,-495,9,-495,12,-495,5,-495,74,-495,73,-495,72,-495,71,-495,2,-495},new int[]{-258,486});
    states[486] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,10,-445,87,-445,90,-445,27,-445,93,-445,26,-445,13,-445,6,-445,89,-445,9,-445,12,-445,5,-445,88,-445,74,-445,73,-445,72,-445,71,-445,2,-445},new int[]{-232,487,-3,118,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558});
    states[487] = new State(-493);
    states[488] = new State(-454);
    states[489] = new State(new int[]{45,1063,130,-504,75,-504,76,-504,70,-504,68,-504},new int[]{-16,490});
    states[490] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-121,491,-126,24,-127,27});
    states[491] = new State(new int[]{98,1059,5,1060},new int[]{-252,492});
    states[492] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-86,493,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[493] = new State(new int[]{13,124,63,1057,64,1058},new int[]{-96,494});
    states[494] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-86,495,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[495] = new State(new int[]{13,124,88,1056,128,-495,130,-495,75,-495,76,-495,70,-495,68,-495,37,-495,34,-495,8,-495,16,-495,17,-495,131,-495,132,-495,140,-495,142,-495,141,-495,49,-495,80,-495,32,-495,20,-495,86,-495,46,-495,29,-495,47,-495,91,-495,39,-495,30,-495,45,-495,52,-495,67,-495,81,-495,10,-495,87,-495,90,-495,27,-495,93,-495,26,-495,6,-495,89,-495,9,-495,12,-495,5,-495,74,-495,73,-495,72,-495,71,-495,2,-495},new int[]{-258,496});
    states[496] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,10,-445,87,-445,90,-445,27,-445,93,-445,26,-445,13,-445,6,-445,89,-445,9,-445,12,-445,5,-445,88,-445,74,-445,73,-445,72,-445,71,-445,2,-445},new int[]{-232,497,-3,118,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558});
    states[497] = new State(-502);
    states[498] = new State(-455);
    states[499] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,312,16,368,17,373,5,381,31,592,36,608},new int[]{-63,500,-78,269,-77,122,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,270,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380,-284,1054,-285,1055});
    states[500] = new State(new int[]{88,501,89,261});
    states[501] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,10,-445,87,-445,90,-445,27,-445,93,-445,26,-445,13,-445,6,-445,89,-445,9,-445,12,-445,5,-445,88,-445,74,-445,73,-445,72,-445,71,-445,2,-445},new int[]{-232,502,-3,118,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558});
    states[502] = new State(-509);
    states[503] = new State(-456);
    states[504] = new State(-457);
    states[505] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,481,142,147,141,482,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,10,-445,90,-445,27,-445},new int[]{-223,506,-233,479,-232,117,-3,118,-94,119,-106,256,-93,264,-121,480,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558,-117,1029});
    states[506] = new State(new int[]{10,115,90,508,27,1032},new int[]{-256,507});
    states[507] = new State(-511);
    states[508] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,481,142,147,141,482,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,10,-445},new int[]{-223,509,-233,479,-232,117,-3,118,-94,119,-106,256,-93,264,-121,480,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558,-117,1029});
    states[509] = new State(new int[]{81,510,10,115});
    states[510] = new State(-512);
    states[511] = new State(-458);
    states[512] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,381,81,-526,10,-526,87,-526,90,-526,27,-526,93,-526,26,-526,13,-526,6,-526,89,-526,9,-526,12,-526,88,-526,74,-526,73,-526,72,-526,71,-526,2,-526},new int[]{-77,513,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380});
    states[513] = new State(-527);
    states[514] = new State(-459);
    states[515] = new State(new int[]{45,1017,130,23,75,25,76,26,70,28,68,29},new int[]{-121,516,-126,24,-127,27});
    states[516] = new State(new int[]{5,1015,124,-501},new int[]{-242,517});
    states[517] = new State(new int[]{124,518});
    states[518] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-86,519,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[519] = new State(new int[]{88,520,13,124});
    states[520] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,10,-445,87,-445,90,-445,27,-445,93,-445,26,-445,13,-445,6,-445,89,-445,9,-445,12,-445,5,-445,88,-445,74,-445,73,-445,72,-445,71,-445,2,-445},new int[]{-232,521,-3,118,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558});
    states[521] = new State(-497);
    states[522] = new State(-460);
    states[523] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-274,524,-133,525,-121,607,-126,24,-127,27});
    states[524] = new State(-467);
    states[525] = new State(new int[]{5,526,89,338,98,1013});
    states[526] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-244,527,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[527] = new State(new int[]{98,631,107,632,81,-375,10,-375,87,-375,90,-375,27,-375,93,-375,26,-375,13,-375,6,-375,89,-375,9,-375,12,-375,5,-375,88,-375,74,-375,73,-375,72,-375,71,-375,2,-375},new int[]{-299,528});
    states[528] = new State(new int[]{130,23,75,25,76,26,70,28,68,274,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,533,122,568,104,251,103,252,129,572,55,150,31,592,36,608},new int[]{-76,529,-285,530,-75,531,-79,532,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575,-83,579,-214,580,-149,581,-51,582});
    states[529] = new State(-377);
    states[530] = new State(-378);
    states[531] = new State(-379);
    states[532] = new State(new int[]{13,178,81,-175,10,-175,87,-175,90,-175,27,-175,93,-175,26,-175,6,-175,89,-175,9,-175,12,-175,5,-175,88,-175,74,-175,73,-175,72,-175,71,-175,2,-175});
    states[533] = new State(new int[]{9,408,130,23,75,25,76,26,70,28,68,274,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,533,122,568,104,251,103,252,129,572,55,150},new int[]{-79,407,-59,534,-214,561,-83,563,-216,565,-73,182,-11,201,-9,211,-12,190,-121,567,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575,-58,576,-76,583,-75,531,-149,581,-51,582,-215,584,-217,591,-110,587});
    states[534] = new State(new int[]{9,535});
    states[535] = new State(new int[]{114,536,89,-178,9,-178,81,-178,10,-178,87,-178,90,-178,27,-178,93,-178,26,-178,13,-178,6,-178,12,-178,5,-178,88,-178,74,-178,73,-178,72,-178,71,-178,2,-178});
    states[536] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,80,112,32,414,46,484,86,475,29,489,30,515,20,463,91,505,52,545,67,560},new int[]{-290,537,-86,215,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-226,412,-128,413,-280,538,-218,539,-99,540,-98,541,-30,542,-266,543,-144,544,-100,559});
    states[537] = new State(-113);
    states[538] = new State(-793);
    states[539] = new State(-794);
    states[540] = new State(-795);
    states[541] = new State(-796);
    states[542] = new State(-797);
    states[543] = new State(-798);
    states[544] = new State(-799);
    states[545] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-86,546,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[546] = new State(new int[]{88,547,13,124});
    states[547] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,10,-445,87,-445,90,-445,27,-445,93,-445,26,-445,13,-445,6,-445,89,-445,9,-445,12,-445,5,-445,88,-445,74,-445,73,-445,72,-445,71,-445,2,-445},new int[]{-232,548,-3,118,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558});
    states[548] = new State(-496);
    states[549] = new State(-461);
    states[550] = new State(-530);
    states[551] = new State(-531);
    states[552] = new State(-462);
    states[553] = new State(-463);
    states[554] = new State(new int[]{66,556,48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-86,555,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[555] = new State(new int[]{13,124,81,-465,10,-465,87,-465,90,-465,27,-465,93,-465,26,-465,6,-465,89,-465,9,-465,12,-465,5,-465,88,-465,74,-465,73,-465,72,-465,71,-465,2,-465});
    states[556] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-86,557,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[557] = new State(new int[]{13,124,81,-466,10,-466,87,-466,90,-466,27,-466,93,-466,26,-466,6,-466,89,-466,9,-466,12,-466,5,-466,88,-466,74,-466,73,-466,72,-466,71,-466,2,-466});
    states[558] = new State(-464);
    states[559] = new State(-800);
    states[560] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-86,555,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[561] = new State(new int[]{9,562,89,-177});
    states[562] = new State(-179);
    states[563] = new State(new int[]{9,564,89,-176});
    states[564] = new State(-180);
    states[565] = new State(new int[]{9,566});
    states[566] = new State(-185);
    states[567] = new State(new int[]{114,213,7,-154,129,-154,8,-154,11,-154,123,-154,125,-154,106,-154,105,-154,118,-154,119,-154,120,-154,121,-154,117,-154,104,-154,103,-154,115,-154,116,-154,107,-154,112,-154,110,-154,108,-154,111,-154,109,-154,124,-154,9,-154,13,-154,89,-154,5,-191});
    states[568] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,403,122,568,104,251,103,252,129,572},new int[]{-9,569,-12,190,-121,402,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570});
    states[569] = new State(-148);
    states[570] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,403,122,568,104,251,103,252,129,572},new int[]{-9,571,-12,190,-121,402,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570});
    states[571] = new State(-149);
    states[572] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,403,122,568,104,251,103,252,129,572},new int[]{-9,573,-12,190,-121,402,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570});
    states[573] = new State(-150);
    states[574] = new State(-132);
    states[575] = new State(-115);
    states[576] = new State(new int[]{89,577,9,-182});
    states[577] = new State(new int[]{130,23,75,25,76,26,70,28,68,274,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,533,122,568,104,251,103,252,129,572,55,150},new int[]{-76,578,-75,531,-79,532,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575,-83,579,-214,580,-149,581,-51,582});
    states[578] = new State(-184);
    states[579] = new State(-176);
    states[580] = new State(-177);
    states[581] = new State(-380);
    states[582] = new State(-381);
    states[583] = new State(-183);
    states[584] = new State(new int[]{10,585,9,-186});
    states[585] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,9,-187},new int[]{-217,586,-110,587,-121,590,-126,24,-127,27});
    states[586] = new State(-189);
    states[587] = new State(new int[]{5,588});
    states[588] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,533,122,568,104,251,103,252,129,572},new int[]{-75,589,-79,532,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575,-83,579,-214,580});
    states[589] = new State(-190);
    states[590] = new State(-191);
    states[591] = new State(-188);
    states[592] = new State(new int[]{8,596,5,340,114,-786},new int[]{-286,593});
    states[593] = new State(new int[]{114,594});
    states[594] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,80,112,32,414,46,484,86,475,29,489,30,515,20,463,91,505,52,545,67,560},new int[]{-290,595,-86,215,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-226,412,-128,413,-280,538,-218,539,-99,540,-98,541,-30,542,-266,543,-144,544,-100,559});
    states[595] = new State(-777);
    states[596] = new State(new int[]{9,597,130,23,75,25,76,26,70,28,68,29},new int[]{-288,601,-289,606,-133,336,-121,607,-126,24,-127,27});
    states[597] = new State(new int[]{5,340,114,-786},new int[]{-286,598});
    states[598] = new State(new int[]{114,599});
    states[599] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,80,112,32,414,46,484,86,475,29,489,30,515,20,463,91,505,52,545,67,560},new int[]{-290,600,-86,215,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-226,412,-128,413,-280,538,-218,539,-99,540,-98,541,-30,542,-266,543,-144,544,-100,559});
    states[600] = new State(-778);
    states[601] = new State(new int[]{9,602,10,334});
    states[602] = new State(new int[]{5,340,114,-786},new int[]{-286,603});
    states[603] = new State(new int[]{114,604});
    states[604] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,80,112,32,414,46,484,86,475,29,489,30,515,20,463,91,505,52,545,67,560},new int[]{-290,605,-86,215,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-226,412,-128,413,-280,538,-218,539,-99,540,-98,541,-30,542,-266,543,-144,544,-100,559});
    states[605] = new State(-779);
    states[606] = new State(-783);
    states[607] = new State(-319);
    states[608] = new State(new int[]{114,609,8,623});
    states[609] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,29,37,281,34,310,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,80,112,32,414,46,484,86,475,29,489,30,515,20,463,91,505,52,545,67,560},new int[]{-291,610,-184,611,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-226,612,-128,613,-280,614,-218,615,-99,616,-98,617,-30,618,-266,619,-144,620,-100,621,-3,622});
    states[610] = new State(-780);
    states[611] = new State(-801);
    states[612] = new State(-802);
    states[613] = new State(-803);
    states[614] = new State(-804);
    states[615] = new State(-805);
    states[616] = new State(-806);
    states[617] = new State(-807);
    states[618] = new State(-808);
    states[619] = new State(-809);
    states[620] = new State(-810);
    states[621] = new State(-811);
    states[622] = new State(-812);
    states[623] = new State(new int[]{9,624,130,23,75,25,76,26,70,28,68,29},new int[]{-288,627,-289,606,-133,336,-121,607,-126,24,-127,27});
    states[624] = new State(new int[]{114,625});
    states[625] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,29,37,281,34,310,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,80,112,32,414,46,484,86,475,29,489,30,515,20,463,91,505,52,545,67,560},new int[]{-291,626,-184,611,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-226,612,-128,613,-280,614,-218,615,-99,616,-98,617,-30,618,-266,619,-144,620,-100,621,-3,622});
    states[626] = new State(-781);
    states[627] = new State(new int[]{9,628,10,334});
    states[628] = new State(new int[]{114,629});
    states[629] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,29,37,281,34,310,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,80,112,32,414,46,484,86,475,29,489,30,515,20,463,91,505,52,545,67,560},new int[]{-291,630,-184,611,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-226,612,-128,613,-280,614,-218,615,-99,616,-98,617,-30,618,-266,619,-144,620,-100,621,-3,622});
    states[630] = new State(-782);
    states[631] = new State(-373);
    states[632] = new State(-374);
    states[633] = new State(-230);
    states[634] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143},new int[]{-89,635,-156,636,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144});
    states[635] = new State(new int[]{8,171,106,-231,105,-231,118,-231,119,-231,120,-231,121,-231,117,-231,6,-231,104,-231,103,-231,115,-231,116,-231,108,-231,89,-231,10,-231,9,-231,114,-231,107,-231,98,-231,81,-231,87,-231,90,-231,27,-231,93,-231,26,-231,13,-231,12,-231,5,-231,88,-231,74,-231,73,-231,72,-231,71,-231,2,-231,75,-231,76,-231,11,-231,124,-231});
    states[636] = new State(new int[]{7,155,8,-229,106,-229,105,-229,118,-229,119,-229,120,-229,121,-229,117,-229,6,-229,104,-229,103,-229,115,-229,116,-229,108,-229,89,-229,10,-229,9,-229,114,-229,107,-229,98,-229,81,-229,87,-229,90,-229,27,-229,93,-229,26,-229,13,-229,12,-229,5,-229,88,-229,74,-229,73,-229,72,-229,71,-229,2,-229,75,-229,76,-229,11,-229,124,-229});
    states[637] = new State(-232);
    states[638] = new State(new int[]{9,639,130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-72,355,-70,361,-244,364,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[639] = new State(new int[]{114,351});
    states[640] = new State(-209);
    states[641] = new State(-210);
    states[642] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-243,643,-244,342,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[643] = new State(-240);
    states[644] = new State(-211);
    states[645] = new State(-241);
    states[646] = new State(-243);
    states[647] = new State(new int[]{11,648,50,1011});
    states[648] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,708,12,-255,89,-255},new int[]{-139,649,-239,1010,-240,1009,-81,166,-88,344,-89,345,-156,636,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144});
    states[649] = new State(new int[]{12,650,89,1007});
    states[650] = new State(new int[]{50,651});
    states[651] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-244,652,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[652] = new State(-249);
    states[653] = new State(-250);
    states[654] = new State(-244);
    states[655] = new State(new int[]{8,880,18,-291,11,-291,81,-291,74,-291,73,-291,72,-291,71,-291,23,-291,130,-291,75,-291,76,-291,70,-291,68,-291,54,-291,21,-291,36,-291,31,-291,24,-291,25,-291,38,-291},new int[]{-159,656});
    states[656] = new State(new int[]{18,871,11,-298,81,-298,74,-298,73,-298,72,-298,71,-298,23,-298,130,-298,75,-298,76,-298,70,-298,68,-298,54,-298,21,-298,36,-298,31,-298,24,-298,25,-298,38,-298},new int[]{-279,657,-278,869,-277,892});
    states[657] = new State(new int[]{11,760,81,-315,74,-315,73,-315,72,-315,71,-315,23,-195,130,-195,75,-195,76,-195,70,-195,68,-195,54,-195,21,-195,36,-195,31,-195,24,-195,25,-195,38,-195},new int[]{-20,658,-27,849,-29,662,-39,850,-5,851,-221,772,-28,973,-48,975,-47,668,-49,974});
    states[658] = new State(new int[]{81,659,74,845,73,846,72,847,71,848},new int[]{-6,660});
    states[659] = new State(-274);
    states[660] = new State(new int[]{11,760,81,-315,74,-315,73,-315,72,-315,71,-315,23,-195,130,-195,75,-195,76,-195,70,-195,68,-195,54,-195,21,-195,36,-195,31,-195,24,-195,25,-195,38,-195},new int[]{-27,661,-29,662,-39,850,-5,851,-221,772,-28,973,-48,975,-47,668,-49,974});
    states[661] = new State(-310);
    states[662] = new State(new int[]{10,664,81,-321,74,-321,73,-321,72,-321,71,-321},new int[]{-166,663});
    states[663] = new State(-316);
    states[664] = new State(new int[]{11,760,81,-322,74,-322,73,-322,72,-322,71,-322,23,-195,130,-195,75,-195,76,-195,70,-195,68,-195,54,-195,21,-195,36,-195,31,-195,24,-195,25,-195,38,-195},new int[]{-39,665,-28,666,-5,851,-221,772,-48,975,-47,668,-49,974});
    states[665] = new State(-324);
    states[666] = new State(new int[]{11,760,81,-318,74,-318,73,-318,72,-318,71,-318,21,-195,36,-195,31,-195,24,-195,25,-195,38,-195},new int[]{-48,667,-47,668,-5,669,-221,772,-49,974});
    states[667] = new State(-327);
    states[668] = new State(-328);
    states[669] = new State(new int[]{21,674,36,864,31,900,24,961,25,965,11,760,38,926},new int[]{-194,670,-221,671,-191,672,-229,673,-202,958,-200,793,-197,863,-201,899,-199,959,-187,969,-188,970,-190,971,-230,972});
    states[670] = new State(-335);
    states[671] = new State(-194);
    states[672] = new State(-336);
    states[673] = new State(-354);
    states[674] = new State(new int[]{24,676,36,864,31,900,38,926},new int[]{-202,675,-188,791,-230,792,-200,793,-197,863,-201,899});
    states[675] = new State(-339);
    states[676] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,37,281,8,-349,10,-349},new int[]{-147,677,-146,774,-145,775,-116,776,-111,777,-108,778,-121,783,-126,24,-127,27,-167,784,-295,786,-123,790});
    states[677] = new State(new int[]{8,691,10,-421},new int[]{-102,678});
    states[678] = new State(new int[]{10,680},new int[]{-181,679});
    states[679] = new State(-346);
    states[680] = new State(new int[]{133,684,135,685,136,686,137,687,139,688,138,689,80,-641,51,-641,23,-641,59,-641,42,-641,45,-641,54,-641,11,-641,21,-641,36,-641,31,-641,24,-641,25,-641,38,-641,81,-641,74,-641,73,-641,72,-641,71,-641,18,-641,134,-641,33,-641},new int[]{-180,681,-183,690});
    states[681] = new State(new int[]{10,682});
    states[682] = new State(new int[]{133,684,135,685,136,686,137,687,139,688,138,689,80,-642,51,-642,23,-642,59,-642,42,-642,45,-642,54,-642,11,-642,21,-642,36,-642,31,-642,24,-642,25,-642,38,-642,81,-642,74,-642,73,-642,72,-642,71,-642,18,-642,134,-642,96,-642,33,-642},new int[]{-183,683});
    states[683] = new State(-646);
    states[684] = new State(-656);
    states[685] = new State(-657);
    states[686] = new State(-658);
    states[687] = new State(-659);
    states[688] = new State(-660);
    states[689] = new State(-661);
    states[690] = new State(-645);
    states[691] = new State(new int[]{9,692,11,760,130,-195,75,-195,76,-195,70,-195,68,-195,45,-195,23,-195,97,-195},new int[]{-103,693,-50,773,-5,697,-221,772});
    states[692] = new State(-422);
    states[693] = new State(new int[]{9,694,10,695});
    states[694] = new State(-423);
    states[695] = new State(new int[]{11,760,130,-195,75,-195,76,-195,70,-195,68,-195,45,-195,23,-195,97,-195},new int[]{-50,696,-5,697,-221,772});
    states[696] = new State(-425);
    states[697] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,45,744,23,750,97,756,11,760},new int[]{-262,698,-221,671,-134,699,-109,743,-121,742,-126,24,-127,27});
    states[698] = new State(-426);
    states[699] = new State(new int[]{5,700,89,740});
    states[700] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-243,701,-244,342,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[701] = new State(new int[]{98,702,9,-427,10,-427});
    states[702] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572},new int[]{-79,703,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[703] = new State(new int[]{13,178,9,-431,10,-431});
    states[704] = new State(-245);
    states[705] = new State(new int[]{50,706});
    states[706] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,708},new int[]{-240,707,-81,166,-88,344,-89,345,-156,636,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144});
    states[707] = new State(-256);
    states[708] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-72,709,-70,361,-244,364,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[709] = new State(new int[]{9,710,89,711});
    states[710] = new State(-224);
    states[711] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-70,712,-244,364,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[712] = new State(-237);
    states[713] = new State(-246);
    states[714] = new State(new int[]{50,715,108,-258,89,-258,10,-258,9,-258,114,-258,107,-258,98,-258,81,-258,87,-258,90,-258,27,-258,93,-258,26,-258,13,-258,6,-258,12,-258,5,-258,88,-258,74,-258,73,-258,72,-258,71,-258,2,-258,75,-258,76,-258,11,-258,124,-258});
    states[715] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-244,716,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[716] = new State(-257);
    states[717] = new State(-247);
    states[718] = new State(new int[]{50,719});
    states[719] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-244,720,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[720] = new State(-248);
    states[721] = new State(new int[]{19,647,40,655,41,705,28,714,66,718},new int[]{-249,722,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717});
    states[722] = new State(-242);
    states[723] = new State(-212);
    states[724] = new State(-260);
    states[725] = new State(-261);
    states[726] = new State(new int[]{8,691,108,-421,89,-421,10,-421,9,-421,114,-421,107,-421,98,-421,81,-421,87,-421,90,-421,27,-421,93,-421,26,-421,13,-421,6,-421,12,-421,5,-421,88,-421,74,-421,73,-421,72,-421,71,-421,2,-421,75,-421,76,-421,11,-421,124,-421},new int[]{-102,727});
    states[727] = new State(-262);
    states[728] = new State(new int[]{8,691,5,-421,108,-421,89,-421,10,-421,9,-421,114,-421,107,-421,98,-421,81,-421,87,-421,90,-421,27,-421,93,-421,26,-421,13,-421,6,-421,12,-421,88,-421,74,-421,73,-421,72,-421,71,-421,2,-421,75,-421,76,-421,11,-421,124,-421},new int[]{-102,729});
    states[729] = new State(new int[]{5,730,108,-263,89,-263,10,-263,9,-263,114,-263,107,-263,98,-263,81,-263,87,-263,90,-263,27,-263,93,-263,26,-263,13,-263,6,-263,12,-263,88,-263,74,-263,73,-263,72,-263,71,-263,2,-263,75,-263,76,-263,11,-263,124,-263});
    states[730] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-243,731,-244,342,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[731] = new State(-264);
    states[732] = new State(new int[]{114,733,10,-213,9,-213,107,-213,89,-213,98,-213,81,-213,87,-213,90,-213,27,-213,93,-213,26,-213,13,-213,6,-213,12,-213,5,-213,88,-213,74,-213,73,-213,72,-213,71,-213,2,-213,108,-213,75,-213,76,-213,11,-213,124,-213});
    states[733] = new State(new int[]{8,735,130,23,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-247,734,-240,165,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-248,737,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,738,-196,724,-195,725,-265,739});
    states[734] = new State(-266);
    states[735] = new State(new int[]{9,736,130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-72,355,-70,361,-244,364,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[736] = new State(new int[]{114,351,108,-270,89,-270,10,-270,9,-270,107,-270,98,-270,81,-270,87,-270,90,-270,27,-270,93,-270,26,-270,13,-270,6,-270,12,-270,5,-270,88,-270,74,-270,73,-270,72,-270,71,-270,2,-270,75,-270,76,-270,11,-270,124,-270});
    states[737] = new State(-219);
    states[738] = new State(-220);
    states[739] = new State(new int[]{114,733,108,-221,89,-221,10,-221,9,-221,107,-221,98,-221,81,-221,87,-221,90,-221,27,-221,93,-221,26,-221,13,-221,6,-221,12,-221,5,-221,88,-221,74,-221,73,-221,72,-221,71,-221,2,-221,75,-221,76,-221,11,-221,124,-221});
    states[740] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-109,741,-121,742,-126,24,-127,27});
    states[741] = new State(-435);
    states[742] = new State(-436);
    states[743] = new State(-434);
    states[744] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-134,745,-109,743,-121,742,-126,24,-127,27});
    states[745] = new State(new int[]{5,746,89,740});
    states[746] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-243,747,-244,342,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[747] = new State(new int[]{98,748,9,-428,10,-428});
    states[748] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572},new int[]{-79,749,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[749] = new State(new int[]{13,178,9,-432,10,-432});
    states[750] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-134,751,-109,743,-121,742,-126,24,-127,27});
    states[751] = new State(new int[]{5,752,89,740});
    states[752] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-243,753,-244,342,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[753] = new State(new int[]{98,754,9,-429,10,-429});
    states[754] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572},new int[]{-79,755,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[755] = new State(new int[]{13,178,9,-433,10,-433});
    states[756] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-134,757,-109,743,-121,742,-126,24,-127,27});
    states[757] = new State(new int[]{5,758,89,740});
    states[758] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-243,759,-244,342,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[759] = new State(-430);
    states[760] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-222,761,-7,771,-8,765,-156,766,-121,768,-126,24,-127,27});
    states[761] = new State(new int[]{12,762,89,763});
    states[762] = new State(-196);
    states[763] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-7,764,-8,765,-156,766,-121,768,-126,24,-127,27});
    states[764] = new State(-198);
    states[765] = new State(-199);
    states[766] = new State(new int[]{7,155,8,277,12,-555,89,-555},new int[]{-62,767});
    states[767] = new State(-610);
    states[768] = new State(new int[]{5,769,7,-234,8,-234,12,-234,89,-234});
    states[769] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-8,770,-156,766,-121,187,-126,24,-127,27});
    states[770] = new State(-200);
    states[771] = new State(-197);
    states[772] = new State(-193);
    states[773] = new State(-424);
    states[774] = new State(-348);
    states[775] = new State(-399);
    states[776] = new State(-400);
    states[777] = new State(new int[]{8,-405,10,-405,98,-405,5,-405,7,-402});
    states[778] = new State(new int[]{110,780,8,-408,10,-408,7,-408,98,-408,5,-408},new int[]{-130,779});
    states[779] = new State(-409);
    states[780] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-133,781,-121,607,-126,24,-127,27});
    states[781] = new State(new int[]{108,782,89,338});
    states[782] = new State(-297);
    states[783] = new State(-410);
    states[784] = new State(new int[]{110,780,8,-406,10,-406,98,-406,5,-406},new int[]{-130,785});
    states[785] = new State(-407);
    states[786] = new State(new int[]{7,787});
    states[787] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,37,281},new int[]{-116,788,-123,789,-111,777,-108,778,-121,783,-126,24,-127,27,-167,784});
    states[788] = new State(-401);
    states[789] = new State(-404);
    states[790] = new State(-403);
    states[791] = new State(-392);
    states[792] = new State(-356);
    states[793] = new State(new int[]{11,-342,21,-342,36,-342,31,-342,24,-342,25,-342,38,-342,81,-342,74,-342,73,-342,72,-342,71,-342,51,-61,23,-61,59,-61,42,-61,45,-61,54,-61,80,-61},new int[]{-152,794,-38,795,-34,798});
    states[794] = new State(-393);
    states[795] = new State(new int[]{80,112},new int[]{-226,796});
    states[796] = new State(new int[]{10,797});
    states[797] = new State(-420);
    states[798] = new State(new int[]{51,801,23,822,59,826,42,997,45,1003,54,1005,80,-60},new int[]{-40,799,-143,800,-24,807,-46,824,-255,828,-272,999});
    states[799] = new State(-62);
    states[800] = new State(-78);
    states[801] = new State(new int[]{140,457,141,458,130,23,75,25,76,26,70,28,68,29},new int[]{-131,802,-117,806,-121,459,-126,24,-127,27});
    states[802] = new State(new int[]{10,803,89,804});
    states[803] = new State(-87);
    states[804] = new State(new int[]{140,457,141,458,130,23,75,25,76,26,70,28,68,29},new int[]{-117,805,-121,459,-126,24,-127,27});
    states[805] = new State(-89);
    states[806] = new State(-88);
    states[807] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,51,-79,23,-79,59,-79,42,-79,45,-79,54,-79,80,-79},new int[]{-22,808,-23,809,-115,811,-121,821,-126,24,-127,27});
    states[808] = new State(-94);
    states[809] = new State(new int[]{10,810});
    states[810] = new State(-102);
    states[811] = new State(new int[]{107,812,5,817});
    states[812] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,815,122,568,104,251,103,252,129,572},new int[]{-91,813,-79,814,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575,-83,816});
    states[813] = new State(-103);
    states[814] = new State(new int[]{13,178,10,-105,81,-105,74,-105,73,-105,72,-105,71,-105});
    states[815] = new State(new int[]{9,408,130,23,75,25,76,26,70,28,68,274,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,533,122,568,104,251,103,252,129,572,55,150},new int[]{-79,407,-59,534,-214,561,-83,563,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575,-58,576,-76,583,-75,531,-149,581,-51,582});
    states[816] = new State(-106);
    states[817] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-244,818,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[818] = new State(new int[]{107,819});
    states[819] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,533,122,568,104,251,103,252,129,572},new int[]{-75,820,-79,532,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575,-83,579,-214,580});
    states[820] = new State(-104);
    states[821] = new State(-107);
    states[822] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-22,823,-23,809,-115,811,-121,821,-126,24,-127,27});
    states[823] = new State(-93);
    states[824] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,51,-80,23,-80,59,-80,42,-80,45,-80,54,-80,80,-80},new int[]{-22,825,-23,809,-115,811,-121,821,-126,24,-127,27});
    states[825] = new State(-96);
    states[826] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-22,827,-23,809,-115,811,-121,821,-126,24,-127,27});
    states[827] = new State(-95);
    states[828] = new State(new int[]{11,760,51,-81,23,-81,59,-81,42,-81,45,-81,54,-81,80,-81,130,-195,75,-195,76,-195,70,-195,68,-195},new int[]{-43,829,-5,830,-221,772});
    states[829] = new State(-98);
    states[830] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,11,760},new int[]{-44,831,-221,671,-118,832,-121,989,-126,24,-127,27,-119,994});
    states[831] = new State(-192);
    states[832] = new State(new int[]{107,833});
    states[833] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728,61,984,62,985,133,986,22,987,21,-279,35,-279,56,-279},new int[]{-253,834,-244,836,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732,-25,837,-18,838,-19,982,-17,988});
    states[834] = new State(new int[]{10,835});
    states[835] = new State(-201);
    states[836] = new State(-206);
    states[837] = new State(-207);
    states[838] = new State(new int[]{21,976,35,977,56,978},new int[]{-257,839});
    states[839] = new State(new int[]{8,880,18,-291,11,-291,81,-291,74,-291,73,-291,72,-291,71,-291,23,-291,130,-291,75,-291,76,-291,70,-291,68,-291,54,-291,21,-291,36,-291,31,-291,24,-291,25,-291,38,-291,10,-291},new int[]{-159,840});
    states[840] = new State(new int[]{18,871,11,-298,81,-298,74,-298,73,-298,72,-298,71,-298,23,-298,130,-298,75,-298,76,-298,70,-298,68,-298,54,-298,21,-298,36,-298,31,-298,24,-298,25,-298,38,-298,10,-298},new int[]{-279,841,-278,869,-277,892});
    states[841] = new State(new int[]{11,760,10,-289,81,-315,74,-315,73,-315,72,-315,71,-315,23,-195,130,-195,75,-195,76,-195,70,-195,68,-195,54,-195,21,-195,36,-195,31,-195,24,-195,25,-195,38,-195},new int[]{-21,842,-20,843,-27,849,-29,662,-39,850,-5,851,-221,772,-28,973,-48,975,-47,668,-49,974});
    states[842] = new State(-273);
    states[843] = new State(new int[]{81,844,74,845,73,846,72,847,71,848},new int[]{-6,660});
    states[844] = new State(-290);
    states[845] = new State(-311);
    states[846] = new State(-312);
    states[847] = new State(-313);
    states[848] = new State(-314);
    states[849] = new State(-309);
    states[850] = new State(-323);
    states[851] = new State(new int[]{23,853,130,23,75,25,76,26,70,28,68,29,54,857,21,861,11,760,36,864,31,900,24,961,25,965,38,926},new int[]{-45,852,-221,671,-194,670,-191,672,-229,673,-275,855,-274,856,-133,525,-121,607,-126,24,-127,27,-202,958,-200,793,-197,863,-201,899,-199,959,-187,969,-188,970,-190,971,-230,972});
    states[852] = new State(-325);
    states[853] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-23,854,-115,811,-121,821,-126,24,-127,27});
    states[854] = new State(-330);
    states[855] = new State(-331);
    states[856] = new State(-333);
    states[857] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-133,858,-121,607,-126,24,-127,27});
    states[858] = new State(new int[]{5,859,89,338});
    states[859] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-244,860,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[860] = new State(-334);
    states[861] = new State(new int[]{24,676,130,23,75,25,76,26,70,28,68,29,54,857,36,864,31,900,38,926},new int[]{-275,862,-202,675,-188,791,-230,792,-274,856,-133,525,-121,607,-126,24,-127,27,-200,793,-197,863,-201,899});
    states[862] = new State(-332);
    states[863] = new State(-343);
    states[864] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,37,281},new int[]{-146,865,-145,775,-116,776,-111,777,-108,778,-121,783,-126,24,-127,27,-167,784,-295,786,-123,790});
    states[865] = new State(new int[]{8,691,10,-421,98,-421},new int[]{-102,866});
    states[866] = new State(new int[]{10,897,98,-643},new int[]{-181,867,-182,893});
    states[867] = new State(new int[]{18,871,80,-298,51,-298,23,-298,59,-298,42,-298,45,-298,54,-298,11,-298,21,-298,36,-298,31,-298,24,-298,25,-298,38,-298,81,-298,74,-298,73,-298,72,-298,71,-298,134,-298,96,-298,33,-298},new int[]{-279,868,-278,869,-277,892});
    states[868] = new State(-411);
    states[869] = new State(new int[]{18,871,11,-299,81,-299,74,-299,73,-299,72,-299,71,-299,23,-299,130,-299,75,-299,76,-299,70,-299,68,-299,54,-299,21,-299,36,-299,31,-299,24,-299,25,-299,38,-299,10,-299,80,-299,51,-299,59,-299,42,-299,45,-299,134,-299,96,-299,33,-299},new int[]{-277,870});
    states[870] = new State(-301);
    states[871] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-133,872,-121,607,-126,24,-127,27});
    states[872] = new State(new int[]{5,873,89,338});
    states[873] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,879,41,705,28,714,66,718,57,721,36,726,31,728,21,889,24,890},new int[]{-254,874,-251,891,-244,878,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[874] = new State(new int[]{10,875,89,876});
    states[875] = new State(-302);
    states[876] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,879,41,705,28,714,66,718,57,721,36,726,31,728,21,889,24,890},new int[]{-251,877,-244,878,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[877] = new State(-304);
    states[878] = new State(-305);
    states[879] = new State(new int[]{8,880,10,-307,89,-307,18,-291,11,-291,81,-291,74,-291,73,-291,72,-291,71,-291,23,-291,130,-291,75,-291,76,-291,70,-291,68,-291,54,-291,21,-291,36,-291,31,-291,24,-291,25,-291,38,-291},new int[]{-159,656});
    states[880] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-158,881,-157,888,-156,885,-121,187,-126,24,-127,27,-265,887});
    states[881] = new State(new int[]{9,882,89,883});
    states[882] = new State(-292);
    states[883] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-157,884,-156,885,-121,187,-126,24,-127,27,-265,887});
    states[884] = new State(-294);
    states[885] = new State(new int[]{7,155,110,160,9,-295,89,-295},new int[]{-264,886});
    states[886] = new State(-214);
    states[887] = new State(-296);
    states[888] = new State(-293);
    states[889] = new State(-306);
    states[890] = new State(-308);
    states[891] = new State(-303);
    states[892] = new State(-300);
    states[893] = new State(new int[]{98,894});
    states[894] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,10,-445},new int[]{-232,895,-3,118,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558});
    states[895] = new State(new int[]{10,896});
    states[896] = new State(-396);
    states[897] = new State(new int[]{133,684,135,685,136,686,137,687,139,688,138,689,18,-641,80,-641,51,-641,23,-641,59,-641,42,-641,45,-641,54,-641,11,-641,21,-641,36,-641,31,-641,24,-641,25,-641,38,-641,81,-641,74,-641,73,-641,72,-641,71,-641,134,-641,96,-641},new int[]{-180,898,-183,690});
    states[898] = new State(new int[]{10,682,98,-644});
    states[899] = new State(-344);
    states[900] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,37,281},new int[]{-145,901,-116,776,-111,777,-108,778,-121,783,-126,24,-127,27,-167,784,-295,786,-123,790});
    states[901] = new State(new int[]{8,691,5,-421,10,-421,98,-421},new int[]{-102,902});
    states[902] = new State(new int[]{5,905,10,897,98,-643},new int[]{-181,903,-182,922});
    states[903] = new State(new int[]{18,871,80,-298,51,-298,23,-298,59,-298,42,-298,45,-298,54,-298,11,-298,21,-298,36,-298,31,-298,24,-298,25,-298,38,-298,81,-298,74,-298,73,-298,72,-298,71,-298,134,-298,96,-298,33,-298},new int[]{-279,904,-278,869,-277,892});
    states[904] = new State(-412);
    states[905] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-243,906,-244,342,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[906] = new State(new int[]{10,897,98,-643},new int[]{-181,907,-182,909});
    states[907] = new State(new int[]{18,871,80,-298,51,-298,23,-298,59,-298,42,-298,45,-298,54,-298,11,-298,21,-298,36,-298,31,-298,24,-298,25,-298,38,-298,81,-298,74,-298,73,-298,72,-298,71,-298,134,-298,96,-298,33,-298},new int[]{-279,908,-278,869,-277,892});
    states[908] = new State(-413);
    states[909] = new State(new int[]{98,910});
    states[910] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-85,911,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378});
    states[911] = new State(new int[]{10,912,14,913,107,915,112,916,110,917,108,918,111,919,109,920,124,921},new int[]{-172,129});
    states[912] = new State(-394);
    states[913] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-87,914,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378});
    states[914] = new State(new int[]{104,217,103,218,115,219,116,220,113,221,14,-559,107,-559,112,-559,110,-559,108,-559,111,-559,109,-559,124,-559,13,-559,81,-559,10,-559,87,-559,90,-559,27,-559,93,-559,26,-559,6,-559,89,-559,9,-559,12,-559,5,-559,88,-559,74,-559,73,-559,72,-559,71,-559,2,-559,43,-559,50,-559,128,-559,130,-559,75,-559,76,-559,70,-559,68,-559,37,-559,34,-559,8,-559,16,-559,17,-559,131,-559,132,-559,140,-559,142,-559,141,-559,49,-559,80,-559,32,-559,20,-559,86,-559,46,-559,29,-559,47,-559,91,-559,39,-559,30,-559,45,-559,52,-559,67,-559,63,-559,64,-559},new int[]{-173,131});
    states[915] = new State(-566);
    states[916] = new State(-567);
    states[917] = new State(-568);
    states[918] = new State(-569);
    states[919] = new State(-570);
    states[920] = new State(-571);
    states[921] = new State(-572);
    states[922] = new State(new int[]{98,923});
    states[923] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-85,924,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378});
    states[924] = new State(new int[]{10,925,14,913,107,915,112,916,110,917,108,918,111,919,109,920,124,921},new int[]{-172,129});
    states[925] = new State(-395);
    states[926] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,74,32,73,33,72,34,71,35},new int[]{-148,927,-121,956,-126,24,-127,27,-125,957});
    states[927] = new State(new int[]{7,941,11,947,75,-360,76,-360,10,-360,5,-362},new int[]{-205,928,-210,944});
    states[928] = new State(new int[]{75,934,76,937,10,-369},new int[]{-178,929});
    states[929] = new State(new int[]{10,930});
    states[930] = new State(new int[]{55,932,11,-358,21,-358,36,-358,31,-358,24,-358,25,-358,38,-358,81,-358,74,-358,73,-358,72,-358,71,-358},new int[]{-179,931});
    states[931] = new State(-357);
    states[932] = new State(new int[]{10,933});
    states[933] = new State(-359);
    states[934] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,10,-368},new int[]{-124,935,-121,940,-126,24,-127,27});
    states[935] = new State(new int[]{75,934,76,937,10,-369},new int[]{-178,936});
    states[936] = new State(-370);
    states[937] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,10,-368},new int[]{-124,938,-121,940,-126,24,-127,27});
    states[938] = new State(new int[]{75,934,76,937,10,-369},new int[]{-178,939});
    states[939] = new State(-371);
    states[940] = new State(-367);
    states[941] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,74,32,73,33,72,34,71,35},new int[]{-121,942,-125,943,-126,24,-127,27});
    states[942] = new State(-352);
    states[943] = new State(-353);
    states[944] = new State(new int[]{5,945});
    states[945] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-243,946,-244,342,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[946] = new State(-361);
    states[947] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-209,948,-208,955,-133,952,-121,607,-126,24,-127,27});
    states[948] = new State(new int[]{12,949,10,950});
    states[949] = new State(-363);
    states[950] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-208,951,-133,952,-121,607,-126,24,-127,27});
    states[951] = new State(-365);
    states[952] = new State(new int[]{5,953,89,338});
    states[953] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-243,954,-244,342,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[954] = new State(-366);
    states[955] = new State(-364);
    states[956] = new State(-350);
    states[957] = new State(-351);
    states[958] = new State(-340);
    states[959] = new State(new int[]{11,-341,21,-341,36,-341,31,-341,24,-341,25,-341,38,-341,81,-341,74,-341,73,-341,72,-341,71,-341,51,-61,23,-61,59,-61,42,-61,45,-61,54,-61,80,-61},new int[]{-152,960,-38,795,-34,798});
    states[960] = new State(-383);
    states[961] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,37,281,8,-349,10,-349},new int[]{-147,962,-146,774,-145,775,-116,776,-111,777,-108,778,-121,783,-126,24,-127,27,-167,784,-295,786,-123,790});
    states[962] = new State(new int[]{8,691,10,-421},new int[]{-102,963});
    states[963] = new State(new int[]{10,680},new int[]{-181,964});
    states[964] = new State(-345);
    states[965] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,37,281,8,-349,10,-349},new int[]{-147,966,-146,774,-145,775,-116,776,-111,777,-108,778,-121,783,-126,24,-127,27,-167,784,-295,786,-123,790});
    states[966] = new State(new int[]{8,691,10,-421},new int[]{-102,967});
    states[967] = new State(new int[]{10,680},new int[]{-181,968});
    states[968] = new State(-347);
    states[969] = new State(-337);
    states[970] = new State(-391);
    states[971] = new State(-338);
    states[972] = new State(-355);
    states[973] = new State(new int[]{11,760,81,-317,74,-317,73,-317,72,-317,71,-317,21,-195,36,-195,31,-195,24,-195,25,-195,38,-195},new int[]{-48,667,-47,668,-5,669,-221,772,-49,974});
    states[974] = new State(-329);
    states[975] = new State(-326);
    states[976] = new State(-283);
    states[977] = new State(-284);
    states[978] = new State(new int[]{21,979,40,980,35,981,8,-285,18,-285,11,-285,81,-285,74,-285,73,-285,72,-285,71,-285,23,-285,130,-285,75,-285,76,-285,70,-285,68,-285,54,-285,36,-285,31,-285,24,-285,25,-285,38,-285,10,-285});
    states[979] = new State(-286);
    states[980] = new State(-287);
    states[981] = new State(-288);
    states[982] = new State(new int[]{61,984,62,985,133,986,22,987,21,-280,35,-280,56,-280},new int[]{-17,983});
    states[983] = new State(-282);
    states[984] = new State(-275);
    states[985] = new State(-276);
    states[986] = new State(-277);
    states[987] = new State(-278);
    states[988] = new State(-281);
    states[989] = new State(new int[]{110,991,107,-203},new int[]{-130,990});
    states[990] = new State(-204);
    states[991] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-133,992,-121,607,-126,24,-127,27});
    states[992] = new State(new int[]{109,993,108,782,89,338});
    states[993] = new State(-205);
    states[994] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728,61,984,62,985,133,986,22,987,21,-279,35,-279,56,-279},new int[]{-253,995,-244,836,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732,-25,837,-18,838,-19,982,-17,988});
    states[995] = new State(new int[]{10,996});
    states[996] = new State(-202);
    states[997] = new State(new int[]{11,760,130,-195,75,-195,76,-195,70,-195,68,-195},new int[]{-43,998,-5,830,-221,772});
    states[998] = new State(-97);
    states[999] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,51,-82,23,-82,59,-82,42,-82,45,-82,54,-82,80,-82},new int[]{-273,1000,-274,1001,-133,525,-121,607,-126,24,-127,27});
    states[1000] = new State(-101);
    states[1001] = new State(new int[]{10,1002});
    states[1002] = new State(-372);
    states[1003] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-273,1004,-274,1001,-133,525,-121,607,-126,24,-127,27});
    states[1004] = new State(-99);
    states[1005] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-273,1006,-274,1001,-133,525,-121,607,-126,24,-127,27});
    states[1006] = new State(-100);
    states[1007] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,708,12,-255,89,-255},new int[]{-239,1008,-240,1009,-81,166,-88,344,-89,345,-156,636,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144});
    states[1008] = new State(-253);
    states[1009] = new State(-254);
    states[1010] = new State(-252);
    states[1011] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-244,1012,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[1012] = new State(-251);
    states[1013] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,381},new int[]{-77,1014,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380});
    states[1014] = new State(-376);
    states[1015] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-244,1016,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[1016] = new State(-500);
    states[1017] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-121,1018,-126,24,-127,27});
    states[1018] = new State(new int[]{5,1019,124,1025});
    states[1019] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-244,1020,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[1020] = new State(new int[]{124,1021});
    states[1021] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-86,1022,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[1022] = new State(new int[]{88,1023,13,124});
    states[1023] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,10,-445,87,-445,90,-445,27,-445,93,-445,26,-445,13,-445,6,-445,89,-445,9,-445,12,-445,5,-445,88,-445,74,-445,73,-445,72,-445,71,-445,2,-445},new int[]{-232,1024,-3,118,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558});
    states[1024] = new State(-498);
    states[1025] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-86,1026,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[1026] = new State(new int[]{88,1027,13,124});
    states[1027] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,10,-445,87,-445,90,-445,27,-445,93,-445,26,-445,13,-445,6,-445,89,-445,9,-445,12,-445,5,-445,88,-445,74,-445,73,-445,72,-445,71,-445,2,-445},new int[]{-232,1028,-3,118,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558});
    states[1028] = new State(-499);
    states[1029] = new State(new int[]{5,1030});
    states[1030] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,481,142,147,141,482,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,10,-445,87,-445,90,-445,27,-445,93,-445},new int[]{-233,1031,-232,117,-3,118,-94,119,-106,256,-93,264,-121,480,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558,-117,1029});
    states[1031] = new State(-444);
    states[1032] = new State(new int[]{69,1040,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,481,142,147,141,482,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,10,-445,81,-445},new int[]{-53,1033,-56,1035,-55,1052,-223,1053,-233,479,-232,117,-3,118,-94,119,-106,256,-93,264,-121,480,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558,-117,1029});
    states[1033] = new State(new int[]{81,1034});
    states[1034] = new State(-513);
    states[1035] = new State(new int[]{10,1037,26,1050,81,-519},new int[]{-225,1036});
    states[1036] = new State(-514);
    states[1037] = new State(new int[]{69,1040,26,1050,81,-519},new int[]{-55,1038,-225,1039});
    states[1038] = new State(-518);
    states[1039] = new State(-515);
    states[1040] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-57,1041,-155,1044,-156,1045,-121,1046,-126,24,-127,27,-114,1047});
    states[1041] = new State(new int[]{88,1042});
    states[1042] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,10,-445,26,-445,81,-445},new int[]{-232,1043,-3,118,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558});
    states[1043] = new State(-521);
    states[1044] = new State(-522);
    states[1045] = new State(new int[]{7,155,88,-524});
    states[1046] = new State(new int[]{7,-234,88,-234,5,-525});
    states[1047] = new State(new int[]{5,1048});
    states[1048] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-155,1049,-156,1045,-121,187,-126,24,-127,27});
    states[1049] = new State(-523);
    states[1050] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,481,142,147,141,482,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,10,-445,81,-445},new int[]{-223,1051,-233,479,-232,117,-3,118,-94,119,-106,256,-93,264,-121,480,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558,-117,1029});
    states[1051] = new State(new int[]{10,115,81,-520});
    states[1052] = new State(-517);
    states[1053] = new State(new int[]{10,115,81,-516});
    states[1054] = new State(-533);
    states[1055] = new State(-773);
    states[1056] = new State(-494);
    states[1057] = new State(-507);
    states[1058] = new State(-508);
    states[1059] = new State(-505);
    states[1060] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-156,1061,-121,187,-126,24,-127,27});
    states[1061] = new State(new int[]{98,1062,7,155});
    states[1062] = new State(-506);
    states[1063] = new State(-503);
    states[1064] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572},new int[]{-92,1065,-82,1066,-79,177,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[1065] = new State(-488);
    states[1066] = new State(-489);
    states[1067] = new State(-487);
    states[1068] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,481,142,147,141,482,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,10,-445,81,-445},new int[]{-223,1069,-233,479,-232,117,-3,118,-94,119,-106,256,-93,264,-121,480,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558,-117,1029});
    states[1069] = new State(new int[]{10,115,81,-491});
    states[1070] = new State(-483);
    states[1071] = new State(new int[]{9,1072});
    states[1072] = new State(new int[]{114,536});
    states[1073] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-86,1074,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379});
    states[1074] = new State(new int[]{13,124,89,-109,5,-109,10,-109,9,-109});
    states[1075] = new State(new int[]{13,124,89,-108,5,-108,10,-108,9,-108});
    states[1076] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,708,129,642,19,647,40,655,41,705,28,714,66,718,57,721},new int[]{-245,1077,-240,1078,-81,166,-88,344,-89,345,-156,1079,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,1080,-220,1081,-248,1082,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-265,1083});
    states[1077] = new State(-789);
    states[1078] = new State(-438);
    states[1079] = new State(new int[]{7,155,110,160,8,-229,106,-229,105,-229,118,-229,119,-229,120,-229,121,-229,117,-229,6,-229,104,-229,103,-229,115,-229,116,-229,114,-229},new int[]{-264,886});
    states[1080] = new State(-439);
    states[1081] = new State(-440);
    states[1082] = new State(-441);
    states[1083] = new State(-442);
    states[1084] = new State(new int[]{5,1076,114,-788},new int[]{-287,1085});
    states[1085] = new State(new int[]{114,1086});
    states[1086] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,80,112,32,414,46,484,86,475,29,489,30,515,20,463,91,505,52,545,67,560},new int[]{-290,1087,-86,215,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-226,412,-128,413,-280,538,-218,539,-99,540,-98,541,-30,542,-266,543,-144,544,-100,559});
    states[1087] = new State(-768);
    states[1088] = new State(new int[]{5,1089,10,1101,11,-615,8,-615,7,-615,129,-615,4,-615,106,-615,105,-615,118,-615,119,-615,120,-615,121,-615,117,-615,123,-615,125,-615,104,-615,103,-615,115,-615,116,-615,113,-615,14,-615,107,-615,112,-615,110,-615,108,-615,111,-615,109,-615,124,-615,89,-615,13,-615,9,-615});
    states[1089] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-243,1090,-244,342,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[1090] = new State(new int[]{9,1091,10,1095});
    states[1091] = new State(new int[]{5,1076,114,-788},new int[]{-287,1092});
    states[1092] = new State(new int[]{114,1093});
    states[1093] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,80,112,32,414,46,484,86,475,29,489,30,515,20,463,91,505,52,545,67,560},new int[]{-290,1094,-86,215,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-226,412,-128,413,-280,538,-218,539,-99,540,-98,541,-30,542,-266,543,-144,544,-100,559});
    states[1094] = new State(-769);
    states[1095] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-288,1096,-289,606,-133,336,-121,607,-126,24,-127,27});
    states[1096] = new State(new int[]{9,1097,10,334});
    states[1097] = new State(new int[]{5,1076,114,-788},new int[]{-287,1098});
    states[1098] = new State(new int[]{114,1099});
    states[1099] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,80,112,32,414,46,484,86,475,29,489,30,515,20,463,91,505,52,545,67,560},new int[]{-290,1100,-86,215,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-226,412,-128,413,-280,538,-218,539,-99,540,-98,541,-30,542,-266,543,-144,544,-100,559});
    states[1100] = new State(-771);
    states[1101] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-288,1102,-289,606,-133,336,-121,607,-126,24,-127,27});
    states[1102] = new State(new int[]{9,1103,10,334});
    states[1103] = new State(new int[]{5,1076,114,-788},new int[]{-287,1104});
    states[1104] = new State(new int[]{114,1105});
    states[1105] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,80,112,32,414,46,484,86,475,29,489,30,515,20,463,91,505,52,545,67,560},new int[]{-290,1106,-86,215,-85,128,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-226,412,-128,413,-280,538,-218,539,-99,540,-98,541,-30,542,-266,543,-144,544,-100,559});
    states[1106] = new State(-770);
    states[1107] = new State(new int[]{11,1108});
    states[1108] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,312,16,368,17,373,5,381,31,592,36,608,12,-628},new int[]{-60,1109,-63,268,-78,269,-77,122,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,270,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380,-284,1054,-285,1055});
    states[1109] = new State(new int[]{12,1110});
    states[1110] = new State(new int[]{8,1112,81,-545,10,-545,87,-545,90,-545,27,-545,93,-545,106,-545,105,-545,118,-545,119,-545,120,-545,121,-545,117,-545,123,-545,125,-545,5,-545,104,-545,103,-545,115,-545,116,-545,113,-545,14,-545,107,-545,112,-545,110,-545,108,-545,111,-545,109,-545,124,-545,13,-545,26,-545,6,-545,89,-545,9,-545,12,-545,88,-545,74,-545,73,-545,72,-545,71,-545,2,-545,43,-545,50,-545,128,-545,130,-545,75,-545,76,-545,70,-545,68,-545,37,-545,34,-545,16,-545,17,-545,131,-545,132,-545,140,-545,142,-545,141,-545,49,-545,80,-545,32,-545,20,-545,86,-545,46,-545,29,-545,47,-545,91,-545,39,-545,30,-545,45,-545,52,-545,67,-545,63,-545,64,-545},new int[]{-4,1111});
    states[1111] = new State(-547);
    states[1112] = new State(new int[]{130,23,75,25,76,26,70,28,68,274,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,533,122,568,104,251,103,252,129,572,55,150,9,-181},new int[]{-59,1113,-58,576,-76,583,-75,531,-79,532,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575,-83,579,-214,580,-149,581,-51,582});
    states[1113] = new State(new int[]{9,1114});
    states[1114] = new State(-544);
    states[1115] = new State(new int[]{8,1116});
    states[1116] = new State(new int[]{130,23,75,25,76,26,70,28,68,274,48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,37,281,34,310,8,325,16,368,17,373},new int[]{-294,1117,-293,1125,-121,1121,-126,24,-127,27,-85,1124,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-167,280,-228,367,-261,372,-149,377,-236,378});
    states[1117] = new State(new int[]{9,1118,89,1119});
    states[1118] = new State(-548);
    states[1119] = new State(new int[]{130,23,75,25,76,26,70,28,68,274,48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,37,281,34,310,8,325,16,368,17,373},new int[]{-293,1120,-121,1121,-126,24,-127,27,-85,1124,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-167,280,-228,367,-261,372,-149,377,-236,378});
    states[1120] = new State(-552);
    states[1121] = new State(new int[]{98,1122,11,-615,8,-615,7,-615,129,-615,4,-615,106,-615,105,-615,118,-615,119,-615,120,-615,121,-615,117,-615,123,-615,125,-615,104,-615,103,-615,115,-615,116,-615,113,-615,14,-615,107,-615,112,-615,110,-615,108,-615,111,-615,109,-615,124,-615,9,-615,89,-615});
    states[1122] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-85,1123,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378});
    states[1123] = new State(new int[]{14,913,107,915,112,916,110,917,108,918,111,919,109,920,124,921,9,-549,89,-549},new int[]{-172,129});
    states[1124] = new State(new int[]{14,913,107,915,112,916,110,917,108,918,111,919,109,920,124,921,9,-550,89,-550},new int[]{-172,129});
    states[1125] = new State(-551);
    states[1126] = new State(new int[]{7,155,4,158,110,160,8,-541,81,-541,10,-541,87,-541,90,-541,27,-541,93,-541,106,-541,105,-541,118,-541,119,-541,120,-541,121,-541,117,-541,123,-541,125,-541,5,-541,104,-541,103,-541,115,-541,116,-541,113,-541,14,-541,107,-541,112,-541,108,-541,111,-541,109,-541,124,-541,13,-541,26,-541,6,-541,89,-541,9,-541,12,-541,88,-541,74,-541,73,-541,72,-541,71,-541,2,-541,43,-541,50,-541,128,-541,130,-541,75,-541,76,-541,70,-541,68,-541,37,-541,34,-541,16,-541,17,-541,131,-541,132,-541,140,-541,142,-541,141,-541,49,-541,80,-541,32,-541,20,-541,86,-541,46,-541,29,-541,47,-541,91,-541,39,-541,30,-541,45,-541,52,-541,67,-541,63,-541,64,-541,11,-553},new int[]{-264,157});
    states[1127] = new State(-554);
    states[1128] = new State(new int[]{50,1011});
    states[1129] = new State(-609);
    states[1130] = new State(-631);
    states[1131] = new State(new int[]{13,178,89,-164,9,-164});
    states[1132] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572,12,-167},new int[]{-67,1133,-64,174,-82,396,-79,177,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[1133] = new State(new int[]{12,1134});
    states[1134] = new State(-161);
    states[1135] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,403,122,568,104,251,103,252,129,572},new int[]{-73,1136,-11,201,-9,211,-12,190,-121,402,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574});
    states[1136] = new State(new int[]{104,1137,103,1138,115,1139,116,1140,13,-114,6,-114,89,-114,9,-114,12,-114,5,-114,81,-114,10,-114,87,-114,90,-114,27,-114,93,-114,26,-114,88,-114,74,-114,73,-114,72,-114,71,-114,2,-114},new int[]{-169,183});
    states[1137] = new State(-126);
    states[1138] = new State(-127);
    states[1139] = new State(-128);
    states[1140] = new State(-129);
    states[1141] = new State(-117);
    states[1142] = new State(-118);
    states[1143] = new State(-119);
    states[1144] = new State(-120);
    states[1145] = new State(-121);
    states[1146] = new State(-122);
    states[1147] = new State(-123);
    states[1148] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,16,368,17,373,11,393,140,146,142,147,141,148,131,142,132,143,48,399,128,400,8,406,122,568,104,251,103,252,129,572},new int[]{-79,1149,-73,182,-11,201,-9,211,-12,190,-121,212,-126,24,-127,27,-228,390,-261,391,-211,392,-14,397,-140,398,-142,140,-141,144,-175,570,-237,574,-213,575});
    states[1149] = new State(new int[]{13,178,89,-171,9,-171,12,-171,5,-171});
    states[1150] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143},new int[]{-81,1151,-88,344,-89,345,-156,636,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144});
    states[1151] = new State(new int[]{104,1137,103,1138,115,1139,116,1140,108,-223,89,-223,10,-223,9,-223,114,-223,107,-223,98,-223,81,-223,87,-223,90,-223,27,-223,93,-223,26,-223,13,-223,6,-223,12,-223,5,-223,88,-223,74,-223,73,-223,72,-223,71,-223,2,-223,75,-223,76,-223,11,-223,124,-223},new int[]{-169,167});
    states[1152] = new State(-216);
    states[1153] = new State(-32);
    states[1154] = new State(new int[]{51,801,23,822,59,826,42,997,45,1003,54,1005,11,760,80,-57,81,-57,92,-57,36,-195,31,-195,21,-195,24,-195,25,-195},new int[]{-41,1155,-143,1156,-24,1157,-46,1158,-255,1159,-272,1160,-192,1161,-5,1162,-221,772});
    states[1155] = new State(-59);
    states[1156] = new State(-69);
    states[1157] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,51,-70,23,-70,59,-70,42,-70,45,-70,54,-70,11,-70,36,-70,31,-70,21,-70,24,-70,25,-70,80,-70,81,-70,92,-70},new int[]{-22,808,-23,809,-115,811,-121,821,-126,24,-127,27});
    states[1158] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,51,-71,23,-71,59,-71,42,-71,45,-71,54,-71,11,-71,36,-71,31,-71,21,-71,24,-71,25,-71,80,-71,81,-71,92,-71},new int[]{-22,825,-23,809,-115,811,-121,821,-126,24,-127,27});
    states[1159] = new State(new int[]{11,760,51,-72,23,-72,59,-72,42,-72,45,-72,54,-72,36,-72,31,-72,21,-72,24,-72,25,-72,80,-72,81,-72,92,-72,130,-195,75,-195,76,-195,70,-195,68,-195},new int[]{-43,829,-5,830,-221,772});
    states[1160] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,51,-73,23,-73,59,-73,42,-73,45,-73,54,-73,11,-73,36,-73,31,-73,21,-73,24,-73,25,-73,80,-73,81,-73,92,-73},new int[]{-273,1000,-274,1001,-133,525,-121,607,-126,24,-127,27});
    states[1161] = new State(-74);
    states[1162] = new State(new int[]{36,1184,31,1191,21,1204,24,961,25,965,11,760},new int[]{-185,1163,-221,671,-186,1164,-193,1165,-200,1166,-197,863,-201,899,-189,1206,-199,1207});
    states[1163] = new State(-77);
    states[1164] = new State(-75);
    states[1165] = new State(-384);
    states[1166] = new State(new int[]{134,1168,96,1175,51,-58,23,-58,59,-58,42,-58,45,-58,54,-58,11,-58,36,-58,31,-58,21,-58,24,-58,25,-58,80,-58},new int[]{-154,1167,-153,1170,-36,1171,-37,1154,-54,1174});
    states[1167] = new State(-386);
    states[1168] = new State(new int[]{10,1169});
    states[1169] = new State(-390);
    states[1170] = new State(-397);
    states[1171] = new State(new int[]{80,112},new int[]{-226,1172});
    states[1172] = new State(new int[]{10,1173});
    states[1173] = new State(-419);
    states[1174] = new State(-398);
    states[1175] = new State(new int[]{10,1183,130,23,75,25,76,26,70,28,68,29,131,142,132,143},new int[]{-90,1176,-121,1180,-126,24,-127,27,-140,1181,-142,140,-141,144});
    states[1176] = new State(new int[]{70,1177,10,1182});
    states[1177] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,131,142,132,143},new int[]{-90,1178,-121,1180,-126,24,-127,27,-140,1181,-142,140,-141,144});
    states[1178] = new State(new int[]{10,1179});
    states[1179] = new State(-414);
    states[1180] = new State(-417);
    states[1181] = new State(-418);
    states[1182] = new State(-415);
    states[1183] = new State(-416);
    states[1184] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,37,281},new int[]{-146,1185,-145,775,-116,776,-111,777,-108,778,-121,783,-126,24,-127,27,-167,784,-295,786,-123,790});
    states[1185] = new State(new int[]{8,691,10,-421,98,-421},new int[]{-102,1186});
    states[1186] = new State(new int[]{10,897,98,-643},new int[]{-181,867,-182,1187});
    states[1187] = new State(new int[]{98,1188});
    states[1188] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,146,142,147,141,148,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,10,-445},new int[]{-232,1189,-3,118,-94,119,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558});
    states[1189] = new State(new int[]{10,1190});
    states[1190] = new State(-389);
    states[1191] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,37,281},new int[]{-145,1192,-116,776,-111,777,-108,778,-121,783,-126,24,-127,27,-167,784,-295,786,-123,790});
    states[1192] = new State(new int[]{8,691,5,-421,10,-421,98,-421},new int[]{-102,1193});
    states[1193] = new State(new int[]{5,1194,10,897,98,-643},new int[]{-181,903,-182,1200});
    states[1194] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-243,1195,-244,342,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[1195] = new State(new int[]{10,897,98,-643},new int[]{-181,907,-182,1196});
    states[1196] = new State(new int[]{98,1197});
    states[1197] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-85,1198,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378});
    states[1198] = new State(new int[]{10,1199,14,913,107,915,112,916,110,917,108,918,111,919,109,920,124,921},new int[]{-172,129});
    states[1199] = new State(-387);
    states[1200] = new State(new int[]{98,1201});
    states[1201] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373},new int[]{-85,1202,-87,216,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378});
    states[1202] = new State(new int[]{10,1203,14,913,107,915,112,916,110,917,108,918,111,919,109,920,124,921},new int[]{-172,129});
    states[1203] = new State(-388);
    states[1204] = new State(new int[]{24,676,36,1184,31,1191},new int[]{-193,1205,-200,1166,-197,863,-201,899});
    states[1205] = new State(-385);
    states[1206] = new State(-76);
    states[1207] = new State(-58,new int[]{-153,1208,-36,1171,-37,1154});
    states[1208] = new State(-382);
    states[1209] = new State(new int[]{3,1211,44,-12,80,-12,51,-12,23,-12,59,-12,42,-12,45,-12,54,-12,11,-12,36,-12,31,-12,21,-12,24,-12,25,-12,35,-12,81,-12,92,-12},new int[]{-160,1210});
    states[1210] = new State(-14);
    states[1211] = new State(new int[]{130,1212,131,1213});
    states[1212] = new State(-15);
    states[1213] = new State(-16);
    states[1214] = new State(-13);
    states[1215] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-121,1216,-126,24,-127,27});
    states[1216] = new State(new int[]{10,1218,8,1219},new int[]{-163,1217});
    states[1217] = new State(-25);
    states[1218] = new State(-26);
    states[1219] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-165,1220,-120,1226,-121,1225,-126,24,-127,27});
    states[1220] = new State(new int[]{9,1221,89,1223});
    states[1221] = new State(new int[]{10,1222});
    states[1222] = new State(-27);
    states[1223] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-120,1224,-121,1225,-126,24,-127,27});
    states[1224] = new State(-29);
    states[1225] = new State(-30);
    states[1226] = new State(-28);
    states[1227] = new State(-3);
    states[1228] = new State(new int[]{94,1283,95,1284,11,760},new int[]{-271,1229,-221,671,-2,1278});
    states[1229] = new State(new int[]{35,1250,44,-35,51,-35,23,-35,59,-35,42,-35,45,-35,54,-35,11,-35,36,-35,31,-35,21,-35,24,-35,25,-35,81,-35,92,-35,80,-35},new int[]{-137,1230,-138,1247,-267,1276});
    states[1230] = new State(new int[]{33,1244},new int[]{-136,1231});
    states[1231] = new State(new int[]{81,1234,92,1235,80,1241},new int[]{-129,1232});
    states[1232] = new State(new int[]{7,1233});
    states[1233] = new State(-41);
    states[1234] = new State(-50);
    states[1235] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,481,142,147,141,482,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,93,-445,10,-445},new int[]{-223,1236,-233,479,-232,117,-3,118,-94,119,-106,256,-93,264,-121,480,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558,-117,1029});
    states[1236] = new State(new int[]{81,1237,93,1238,10,115});
    states[1237] = new State(-51);
    states[1238] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,481,142,147,141,482,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,10,-445},new int[]{-223,1239,-233,479,-232,117,-3,118,-94,119,-106,256,-93,264,-121,480,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558,-117,1029});
    states[1239] = new State(new int[]{81,1240,10,115});
    states[1240] = new State(-52);
    states[1241] = new State(new int[]{128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,420,8,421,16,368,17,373,131,142,132,143,140,481,142,147,141,482,49,455,80,112,32,414,20,463,86,475,46,484,29,489,47,499,91,505,39,512,30,515,45,523,52,545,67,554,81,-445,10,-445},new int[]{-223,1242,-233,479,-232,117,-3,118,-94,119,-106,256,-93,264,-121,480,-126,24,-127,27,-167,280,-228,367,-261,372,-13,439,-140,139,-142,140,-141,144,-14,145,-184,453,-107,454,-226,460,-128,461,-30,462,-218,474,-280,483,-99,488,-281,498,-135,503,-266,504,-219,511,-98,514,-276,522,-52,549,-150,550,-149,551,-144,552,-100,553,-101,558,-117,1029});
    states[1242] = new State(new int[]{81,1243,10,115});
    states[1243] = new State(-53);
    states[1244] = new State(-35,new int[]{-267,1245});
    states[1245] = new State(new int[]{44,14,51,-58,23,-58,59,-58,42,-58,45,-58,54,-58,11,-58,36,-58,31,-58,21,-58,24,-58,25,-58,81,-58,92,-58,80,-58},new int[]{-36,1246,-37,1154});
    states[1246] = new State(-48);
    states[1247] = new State(new int[]{81,1234,92,1235,80,1241},new int[]{-129,1248});
    states[1248] = new State(new int[]{7,1249});
    states[1249] = new State(-42);
    states[1250] = new State(-35,new int[]{-267,1251});
    states[1251] = new State(new int[]{44,14,23,-55,59,-55,42,-55,45,-55,54,-55,11,-55,36,-55,31,-55,33,-55},new int[]{-35,1252,-33,1253});
    states[1252] = new State(-47);
    states[1253] = new State(new int[]{23,822,59,826,42,997,45,1003,54,1005,11,760,33,-54,36,-195,31,-195},new int[]{-42,1254,-24,1255,-46,1256,-255,1257,-272,1258,-204,1259,-5,1260,-221,772,-203,1275});
    states[1254] = new State(-56);
    states[1255] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,23,-63,59,-63,42,-63,45,-63,54,-63,11,-63,36,-63,31,-63,33,-63},new int[]{-22,808,-23,809,-115,811,-121,821,-126,24,-127,27});
    states[1256] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,23,-64,59,-64,42,-64,45,-64,54,-64,11,-64,36,-64,31,-64,33,-64},new int[]{-22,825,-23,809,-115,811,-121,821,-126,24,-127,27});
    states[1257] = new State(new int[]{11,760,23,-65,59,-65,42,-65,45,-65,54,-65,36,-65,31,-65,33,-65,130,-195,75,-195,76,-195,70,-195,68,-195},new int[]{-43,829,-5,830,-221,772});
    states[1258] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,23,-66,59,-66,42,-66,45,-66,54,-66,11,-66,36,-66,31,-66,33,-66},new int[]{-273,1000,-274,1001,-133,525,-121,607,-126,24,-127,27});
    states[1259] = new State(-67);
    states[1260] = new State(new int[]{36,1267,11,760,31,1270},new int[]{-197,1261,-221,671,-201,1264});
    states[1261] = new State(new int[]{134,1262,23,-83,59,-83,42,-83,45,-83,54,-83,11,-83,36,-83,31,-83,33,-83});
    states[1262] = new State(new int[]{10,1263});
    states[1263] = new State(-84);
    states[1264] = new State(new int[]{134,1265,23,-85,59,-85,42,-85,45,-85,54,-85,11,-85,36,-85,31,-85,33,-85});
    states[1265] = new State(new int[]{10,1266});
    states[1266] = new State(-86);
    states[1267] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,37,281},new int[]{-146,1268,-145,775,-116,776,-111,777,-108,778,-121,783,-126,24,-127,27,-167,784,-295,786,-123,790});
    states[1268] = new State(new int[]{8,691,10,-421},new int[]{-102,1269});
    states[1269] = new State(new int[]{10,680},new int[]{-181,867});
    states[1270] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,37,281},new int[]{-145,1271,-116,776,-111,777,-108,778,-121,783,-126,24,-127,27,-167,784,-295,786,-123,790});
    states[1271] = new State(new int[]{8,691,5,-421,10,-421},new int[]{-102,1272});
    states[1272] = new State(new int[]{5,1273,10,680},new int[]{-181,903});
    states[1273] = new State(new int[]{130,386,75,25,76,26,70,28,68,29,140,146,142,147,141,148,104,251,103,252,131,142,132,143,8,638,129,642,19,647,40,655,41,705,28,714,66,718,57,721,36,726,31,728},new int[]{-243,1274,-244,342,-240,343,-81,166,-88,344,-89,345,-156,346,-121,187,-126,24,-127,27,-14,633,-175,634,-140,637,-142,140,-141,144,-227,640,-220,641,-248,644,-249,645,-246,646,-238,653,-26,654,-235,704,-104,713,-105,717,-198,723,-196,724,-195,725,-265,732});
    states[1274] = new State(new int[]{10,680},new int[]{-181,907});
    states[1275] = new State(-68);
    states[1276] = new State(new int[]{44,14,51,-58,23,-58,59,-58,42,-58,45,-58,54,-58,11,-58,36,-58,31,-58,21,-58,24,-58,25,-58,81,-58,92,-58,80,-58},new int[]{-36,1277,-37,1154});
    states[1277] = new State(-49);
    states[1278] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-113,1279,-121,1282,-126,24,-127,27});
    states[1279] = new State(new int[]{10,1280});
    states[1280] = new State(new int[]{3,1211,35,-11,81,-11,92,-11,80,-11,44,-11,51,-11,23,-11,59,-11,42,-11,45,-11,54,-11,11,-11,36,-11,31,-11,21,-11,24,-11,25,-11},new int[]{-161,1281,-162,1209,-160,1214});
    states[1281] = new State(-43);
    states[1282] = new State(-46);
    states[1283] = new State(-44);
    states[1284] = new State(-45);
    states[1285] = new State(-4);
    states[1286] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,381},new int[]{-77,1287,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380});
    states[1287] = new State(-5);
    states[1288] = new State(new int[]{130,23,75,25,76,26,70,28,68,29},new int[]{-282,1289,-283,1290,-121,1294,-126,24,-127,27});
    states[1289] = new State(-6);
    states[1290] = new State(new int[]{7,1291,110,160,2,-613},new int[]{-264,1293});
    states[1291] = new State(new int[]{130,23,75,25,76,26,70,28,68,29,74,32,73,33,72,34,71,35,61,36,56,37,115,38,17,39,16,40,55,41,18,42,116,43,117,44,118,45,119,46,120,47,121,48,122,49,123,50,124,51,125,52,19,53,66,54,80,55,20,56,21,57,23,58,24,59,25,60,64,61,88,62,26,63,27,64,28,65,22,66,93,67,90,68,29,69,30,70,31,71,32,72,33,73,34,74,92,75,35,76,36,77,38,78,39,79,40,80,86,81,41,82,91,83,42,84,43,85,63,86,87,87,44,88,45,89,46,90,47,91,48,92,49,93,50,94,51,95,53,96,94,97,95,98,96,99,97,100,54,101,67,102,37,104,81,105},new int[]{-112,1292,-121,22,-126,24,-127,27,-259,30,-125,31,-260,103});
    states[1292] = new State(-612);
    states[1293] = new State(-614);
    states[1294] = new State(-611);
    states[1295] = new State(new int[]{48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,1299,16,368,17,373,5,381,45,523},new int[]{-231,1296,-77,1297,-86,123,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,1298,-106,256,-93,264,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380,-3,1300,-276,1301});
    states[1296] = new State(-7);
    states[1297] = new State(-8);
    states[1298] = new State(new int[]{98,305,99,306,100,307,101,308,102,309,106,-602,105,-602,118,-602,119,-602,120,-602,121,-602,117,-602,123,-602,125,-602,5,-602,104,-602,103,-602,115,-602,116,-602,113,-602,14,-602,107,-602,112,-602,110,-602,108,-602,111,-602,109,-602,124,-602,13,-602,2,-602},new int[]{-170,120});
    states[1299] = new State(new int[]{45,441,48,135,131,142,132,143,140,146,142,147,141,148,55,150,11,233,122,247,104,251,103,252,129,253,128,263,130,23,75,25,76,26,70,28,68,274,37,281,34,310,8,325,16,368,17,373,5,381},new int[]{-77,313,-86,326,-93,422,-85,128,-87,242,-74,222,-84,232,-13,136,-140,139,-142,140,-141,144,-14,145,-51,149,-175,249,-94,255,-106,256,-121,273,-126,24,-127,27,-167,280,-228,367,-261,372,-149,377,-236,378,-212,379,-97,380});
    states[1300] = new State(-9);
    states[1301] = new State(-10);

    rules[1] = new Rule(-300, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-206});
    rules[3] = new Rule(-1, new int[]{-269});
    rules[4] = new Rule(-1, new int[]{-151});
    rules[5] = new Rule(-151, new int[]{77,-77});
    rules[6] = new Rule(-151, new int[]{79,-282});
    rules[7] = new Rule(-151, new int[]{78,-231});
    rules[8] = new Rule(-231, new int[]{-77});
    rules[9] = new Rule(-231, new int[]{-3});
    rules[10] = new Rule(-231, new int[]{-276});
    rules[11] = new Rule(-161, new int[]{});
    rules[12] = new Rule(-161, new int[]{-162});
    rules[13] = new Rule(-162, new int[]{-160});
    rules[14] = new Rule(-162, new int[]{-162,-160});
    rules[15] = new Rule(-160, new int[]{3,130});
    rules[16] = new Rule(-160, new int[]{3,131});
    rules[17] = new Rule(-206, new int[]{-207,-161,-267,-15,-164});
    rules[18] = new Rule(-164, new int[]{7});
    rules[19] = new Rule(-164, new int[]{10});
    rules[20] = new Rule(-164, new int[]{5});
    rules[21] = new Rule(-164, new int[]{89});
    rules[22] = new Rule(-164, new int[]{6});
    rules[23] = new Rule(-164, new int[]{});
    rules[24] = new Rule(-207, new int[]{});
    rules[25] = new Rule(-207, new int[]{53,-121,-163});
    rules[26] = new Rule(-163, new int[]{10});
    rules[27] = new Rule(-163, new int[]{8,-165,9,10});
    rules[28] = new Rule(-165, new int[]{-120});
    rules[29] = new Rule(-165, new int[]{-165,89,-120});
    rules[30] = new Rule(-120, new int[]{-121});
    rules[31] = new Rule(-15, new int[]{-32,-226});
    rules[32] = new Rule(-32, new int[]{-36});
    rules[33] = new Rule(-132, new int[]{-112});
    rules[34] = new Rule(-132, new int[]{-132,7,-112});
    rules[35] = new Rule(-267, new int[]{});
    rules[36] = new Rule(-267, new int[]{-267,44,-268,10});
    rules[37] = new Rule(-268, new int[]{-270});
    rules[38] = new Rule(-268, new int[]{-268,89,-270});
    rules[39] = new Rule(-270, new int[]{-132});
    rules[40] = new Rule(-270, new int[]{-132,124,131});
    rules[41] = new Rule(-269, new int[]{-5,-271,-137,-136,-129,7});
    rules[42] = new Rule(-269, new int[]{-5,-271,-138,-129,7});
    rules[43] = new Rule(-271, new int[]{-2,-113,10,-161});
    rules[44] = new Rule(-2, new int[]{94});
    rules[45] = new Rule(-2, new int[]{95});
    rules[46] = new Rule(-113, new int[]{-121});
    rules[47] = new Rule(-137, new int[]{35,-267,-35});
    rules[48] = new Rule(-136, new int[]{33,-267,-36});
    rules[49] = new Rule(-138, new int[]{-267,-36});
    rules[50] = new Rule(-129, new int[]{81});
    rules[51] = new Rule(-129, new int[]{92,-223,81});
    rules[52] = new Rule(-129, new int[]{92,-223,93,-223,81});
    rules[53] = new Rule(-129, new int[]{80,-223,81});
    rules[54] = new Rule(-35, new int[]{-33});
    rules[55] = new Rule(-33, new int[]{});
    rules[56] = new Rule(-33, new int[]{-33,-42});
    rules[57] = new Rule(-36, new int[]{-37});
    rules[58] = new Rule(-37, new int[]{});
    rules[59] = new Rule(-37, new int[]{-37,-41});
    rules[60] = new Rule(-38, new int[]{-34});
    rules[61] = new Rule(-34, new int[]{});
    rules[62] = new Rule(-34, new int[]{-34,-40});
    rules[63] = new Rule(-42, new int[]{-24});
    rules[64] = new Rule(-42, new int[]{-46});
    rules[65] = new Rule(-42, new int[]{-255});
    rules[66] = new Rule(-42, new int[]{-272});
    rules[67] = new Rule(-42, new int[]{-204});
    rules[68] = new Rule(-42, new int[]{-203});
    rules[69] = new Rule(-41, new int[]{-143});
    rules[70] = new Rule(-41, new int[]{-24});
    rules[71] = new Rule(-41, new int[]{-46});
    rules[72] = new Rule(-41, new int[]{-255});
    rules[73] = new Rule(-41, new int[]{-272});
    rules[74] = new Rule(-41, new int[]{-192});
    rules[75] = new Rule(-185, new int[]{-186});
    rules[76] = new Rule(-185, new int[]{-189});
    rules[77] = new Rule(-192, new int[]{-5,-185});
    rules[78] = new Rule(-40, new int[]{-143});
    rules[79] = new Rule(-40, new int[]{-24});
    rules[80] = new Rule(-40, new int[]{-46});
    rules[81] = new Rule(-40, new int[]{-255});
    rules[82] = new Rule(-40, new int[]{-272});
    rules[83] = new Rule(-204, new int[]{-5,-197});
    rules[84] = new Rule(-204, new int[]{-5,-197,134,10});
    rules[85] = new Rule(-203, new int[]{-5,-201});
    rules[86] = new Rule(-203, new int[]{-5,-201,134,10});
    rules[87] = new Rule(-143, new int[]{51,-131,10});
    rules[88] = new Rule(-131, new int[]{-117});
    rules[89] = new Rule(-131, new int[]{-131,89,-117});
    rules[90] = new Rule(-117, new int[]{140});
    rules[91] = new Rule(-117, new int[]{141});
    rules[92] = new Rule(-117, new int[]{-121});
    rules[93] = new Rule(-24, new int[]{23,-22});
    rules[94] = new Rule(-24, new int[]{-24,-22});
    rules[95] = new Rule(-46, new int[]{59,-22});
    rules[96] = new Rule(-46, new int[]{-46,-22});
    rules[97] = new Rule(-255, new int[]{42,-43});
    rules[98] = new Rule(-255, new int[]{-255,-43});
    rules[99] = new Rule(-272, new int[]{45,-273});
    rules[100] = new Rule(-272, new int[]{54,-273});
    rules[101] = new Rule(-272, new int[]{-272,-273});
    rules[102] = new Rule(-22, new int[]{-23,10});
    rules[103] = new Rule(-23, new int[]{-115,107,-91});
    rules[104] = new Rule(-23, new int[]{-115,5,-244,107,-75});
    rules[105] = new Rule(-91, new int[]{-79});
    rules[106] = new Rule(-91, new int[]{-83});
    rules[107] = new Rule(-115, new int[]{-121});
    rules[108] = new Rule(-71, new int[]{-86});
    rules[109] = new Rule(-71, new int[]{-71,89,-86});
    rules[110] = new Rule(-79, new int[]{-73});
    rules[111] = new Rule(-79, new int[]{-121,114,-290});
    rules[112] = new Rule(-79, new int[]{8,9,-286,114,-290});
    rules[113] = new Rule(-79, new int[]{8,-59,9,114,-290});
    rules[114] = new Rule(-79, new int[]{-73,-168,-73});
    rules[115] = new Rule(-79, new int[]{-213});
    rules[116] = new Rule(-213, new int[]{-79,13,-79,5,-79});
    rules[117] = new Rule(-168, new int[]{107});
    rules[118] = new Rule(-168, new int[]{112});
    rules[119] = new Rule(-168, new int[]{110});
    rules[120] = new Rule(-168, new int[]{108});
    rules[121] = new Rule(-168, new int[]{111});
    rules[122] = new Rule(-168, new int[]{109});
    rules[123] = new Rule(-168, new int[]{124});
    rules[124] = new Rule(-73, new int[]{-11});
    rules[125] = new Rule(-73, new int[]{-73,-169,-11});
    rules[126] = new Rule(-169, new int[]{104});
    rules[127] = new Rule(-169, new int[]{103});
    rules[128] = new Rule(-169, new int[]{115});
    rules[129] = new Rule(-169, new int[]{116});
    rules[130] = new Rule(-237, new int[]{-11,-177,-250});
    rules[131] = new Rule(-11, new int[]{-9});
    rules[132] = new Rule(-11, new int[]{-237});
    rules[133] = new Rule(-11, new int[]{-11,-171,-9});
    rules[134] = new Rule(-171, new int[]{106});
    rules[135] = new Rule(-171, new int[]{105});
    rules[136] = new Rule(-171, new int[]{118});
    rules[137] = new Rule(-171, new int[]{119});
    rules[138] = new Rule(-171, new int[]{120});
    rules[139] = new Rule(-171, new int[]{121});
    rules[140] = new Rule(-171, new int[]{117});
    rules[141] = new Rule(-9, new int[]{-12});
    rules[142] = new Rule(-9, new int[]{-211});
    rules[143] = new Rule(-9, new int[]{-14});
    rules[144] = new Rule(-9, new int[]{-140});
    rules[145] = new Rule(-9, new int[]{48});
    rules[146] = new Rule(-9, new int[]{128,-9});
    rules[147] = new Rule(-9, new int[]{8,-79,9});
    rules[148] = new Rule(-9, new int[]{122,-9});
    rules[149] = new Rule(-9, new int[]{-175,-9});
    rules[150] = new Rule(-9, new int[]{129,-9});
    rules[151] = new Rule(-211, new int[]{11,-67,12});
    rules[152] = new Rule(-175, new int[]{104});
    rules[153] = new Rule(-175, new int[]{103});
    rules[154] = new Rule(-12, new int[]{-121});
    rules[155] = new Rule(-12, new int[]{-228});
    rules[156] = new Rule(-12, new int[]{-261});
    rules[157] = new Rule(-12, new int[]{-12,-10});
    rules[158] = new Rule(-10, new int[]{7,-112});
    rules[159] = new Rule(-10, new int[]{129});
    rules[160] = new Rule(-10, new int[]{8,-68,9});
    rules[161] = new Rule(-10, new int[]{11,-67,12});
    rules[162] = new Rule(-68, new int[]{-65});
    rules[163] = new Rule(-68, new int[]{});
    rules[164] = new Rule(-65, new int[]{-79});
    rules[165] = new Rule(-65, new int[]{-65,89,-79});
    rules[166] = new Rule(-67, new int[]{-64});
    rules[167] = new Rule(-67, new int[]{});
    rules[168] = new Rule(-64, new int[]{-82});
    rules[169] = new Rule(-64, new int[]{-64,89,-82});
    rules[170] = new Rule(-82, new int[]{-79});
    rules[171] = new Rule(-82, new int[]{-79,6,-79});
    rules[172] = new Rule(-14, new int[]{140});
    rules[173] = new Rule(-14, new int[]{142});
    rules[174] = new Rule(-14, new int[]{141});
    rules[175] = new Rule(-75, new int[]{-79});
    rules[176] = new Rule(-75, new int[]{-83});
    rules[177] = new Rule(-75, new int[]{-214});
    rules[178] = new Rule(-83, new int[]{8,-59,9});
    rules[179] = new Rule(-83, new int[]{8,-214,9});
    rules[180] = new Rule(-83, new int[]{8,-83,9});
    rules[181] = new Rule(-59, new int[]{});
    rules[182] = new Rule(-59, new int[]{-58});
    rules[183] = new Rule(-58, new int[]{-76});
    rules[184] = new Rule(-58, new int[]{-58,89,-76});
    rules[185] = new Rule(-214, new int[]{8,-216,9});
    rules[186] = new Rule(-216, new int[]{-215});
    rules[187] = new Rule(-216, new int[]{-215,10});
    rules[188] = new Rule(-215, new int[]{-217});
    rules[189] = new Rule(-215, new int[]{-215,10,-217});
    rules[190] = new Rule(-217, new int[]{-110,5,-75});
    rules[191] = new Rule(-110, new int[]{-121});
    rules[192] = new Rule(-43, new int[]{-5,-44});
    rules[193] = new Rule(-5, new int[]{-221});
    rules[194] = new Rule(-5, new int[]{-5,-221});
    rules[195] = new Rule(-5, new int[]{});
    rules[196] = new Rule(-221, new int[]{11,-222,12});
    rules[197] = new Rule(-222, new int[]{-7});
    rules[198] = new Rule(-222, new int[]{-222,89,-7});
    rules[199] = new Rule(-7, new int[]{-8});
    rules[200] = new Rule(-7, new int[]{-121,5,-8});
    rules[201] = new Rule(-44, new int[]{-118,107,-253,10});
    rules[202] = new Rule(-44, new int[]{-119,-253,10});
    rules[203] = new Rule(-118, new int[]{-121});
    rules[204] = new Rule(-118, new int[]{-121,-130});
    rules[205] = new Rule(-119, new int[]{-121,110,-133,109});
    rules[206] = new Rule(-253, new int[]{-244});
    rules[207] = new Rule(-253, new int[]{-25});
    rules[208] = new Rule(-244, new int[]{-240});
    rules[209] = new Rule(-244, new int[]{-227});
    rules[210] = new Rule(-244, new int[]{-220});
    rules[211] = new Rule(-244, new int[]{-248});
    rules[212] = new Rule(-244, new int[]{-198});
    rules[213] = new Rule(-244, new int[]{-265});
    rules[214] = new Rule(-265, new int[]{-156,-264});
    rules[215] = new Rule(-264, new int[]{110,-263,108});
    rules[216] = new Rule(-263, new int[]{-247});
    rules[217] = new Rule(-263, new int[]{-263,89,-247});
    rules[218] = new Rule(-247, new int[]{-240});
    rules[219] = new Rule(-247, new int[]{-248});
    rules[220] = new Rule(-247, new int[]{-198});
    rules[221] = new Rule(-247, new int[]{-265});
    rules[222] = new Rule(-240, new int[]{-81});
    rules[223] = new Rule(-240, new int[]{-81,6,-81});
    rules[224] = new Rule(-240, new int[]{8,-72,9});
    rules[225] = new Rule(-81, new int[]{-88});
    rules[226] = new Rule(-81, new int[]{-81,-169,-88});
    rules[227] = new Rule(-88, new int[]{-89});
    rules[228] = new Rule(-88, new int[]{-88,-171,-89});
    rules[229] = new Rule(-89, new int[]{-156});
    rules[230] = new Rule(-89, new int[]{-14});
    rules[231] = new Rule(-89, new int[]{-175,-89});
    rules[232] = new Rule(-89, new int[]{-140});
    rules[233] = new Rule(-89, new int[]{-89,8,-67,9});
    rules[234] = new Rule(-156, new int[]{-121});
    rules[235] = new Rule(-156, new int[]{-156,7,-112});
    rules[236] = new Rule(-72, new int[]{-70,89,-70});
    rules[237] = new Rule(-72, new int[]{-72,89,-70});
    rules[238] = new Rule(-70, new int[]{-244});
    rules[239] = new Rule(-70, new int[]{-244,107,-77});
    rules[240] = new Rule(-220, new int[]{129,-243});
    rules[241] = new Rule(-248, new int[]{-249});
    rules[242] = new Rule(-248, new int[]{57,-249});
    rules[243] = new Rule(-249, new int[]{-246});
    rules[244] = new Rule(-249, new int[]{-26});
    rules[245] = new Rule(-249, new int[]{-235});
    rules[246] = new Rule(-249, new int[]{-104});
    rules[247] = new Rule(-249, new int[]{-105});
    rules[248] = new Rule(-105, new int[]{66,50,-244});
    rules[249] = new Rule(-246, new int[]{19,11,-139,12,50,-244});
    rules[250] = new Rule(-246, new int[]{-238});
    rules[251] = new Rule(-238, new int[]{19,50,-244});
    rules[252] = new Rule(-139, new int[]{-239});
    rules[253] = new Rule(-139, new int[]{-139,89,-239});
    rules[254] = new Rule(-239, new int[]{-240});
    rules[255] = new Rule(-239, new int[]{});
    rules[256] = new Rule(-235, new int[]{41,50,-240});
    rules[257] = new Rule(-104, new int[]{28,50,-244});
    rules[258] = new Rule(-104, new int[]{28});
    rules[259] = new Rule(-227, new int[]{130,11,-79,12});
    rules[260] = new Rule(-198, new int[]{-196});
    rules[261] = new Rule(-196, new int[]{-195});
    rules[262] = new Rule(-195, new int[]{36,-102});
    rules[263] = new Rule(-195, new int[]{31,-102});
    rules[264] = new Rule(-195, new int[]{31,-102,5,-243});
    rules[265] = new Rule(-195, new int[]{-156,114,-247});
    rules[266] = new Rule(-195, new int[]{-265,114,-247});
    rules[267] = new Rule(-195, new int[]{8,9,114,-247});
    rules[268] = new Rule(-195, new int[]{8,-72,9,114,-247});
    rules[269] = new Rule(-195, new int[]{-156,114,8,9});
    rules[270] = new Rule(-195, new int[]{-265,114,8,9});
    rules[271] = new Rule(-195, new int[]{8,9,114,8,9});
    rules[272] = new Rule(-195, new int[]{8,-72,9,114,8,9});
    rules[273] = new Rule(-25, new int[]{-18,-257,-159,-279,-21});
    rules[274] = new Rule(-26, new int[]{40,-159,-279,-20,81});
    rules[275] = new Rule(-17, new int[]{61});
    rules[276] = new Rule(-17, new int[]{62});
    rules[277] = new Rule(-17, new int[]{133});
    rules[278] = new Rule(-17, new int[]{22});
    rules[279] = new Rule(-18, new int[]{});
    rules[280] = new Rule(-18, new int[]{-19});
    rules[281] = new Rule(-19, new int[]{-17});
    rules[282] = new Rule(-19, new int[]{-19,-17});
    rules[283] = new Rule(-257, new int[]{21});
    rules[284] = new Rule(-257, new int[]{35});
    rules[285] = new Rule(-257, new int[]{56});
    rules[286] = new Rule(-257, new int[]{56,21});
    rules[287] = new Rule(-257, new int[]{56,40});
    rules[288] = new Rule(-257, new int[]{56,35});
    rules[289] = new Rule(-21, new int[]{});
    rules[290] = new Rule(-21, new int[]{-20,81});
    rules[291] = new Rule(-159, new int[]{});
    rules[292] = new Rule(-159, new int[]{8,-158,9});
    rules[293] = new Rule(-158, new int[]{-157});
    rules[294] = new Rule(-158, new int[]{-158,89,-157});
    rules[295] = new Rule(-157, new int[]{-156});
    rules[296] = new Rule(-157, new int[]{-265});
    rules[297] = new Rule(-130, new int[]{110,-133,108});
    rules[298] = new Rule(-279, new int[]{});
    rules[299] = new Rule(-279, new int[]{-278});
    rules[300] = new Rule(-278, new int[]{-277});
    rules[301] = new Rule(-278, new int[]{-278,-277});
    rules[302] = new Rule(-277, new int[]{18,-133,5,-254,10});
    rules[303] = new Rule(-254, new int[]{-251});
    rules[304] = new Rule(-254, new int[]{-254,89,-251});
    rules[305] = new Rule(-251, new int[]{-244});
    rules[306] = new Rule(-251, new int[]{21});
    rules[307] = new Rule(-251, new int[]{40});
    rules[308] = new Rule(-251, new int[]{24});
    rules[309] = new Rule(-20, new int[]{-27});
    rules[310] = new Rule(-20, new int[]{-20,-6,-27});
    rules[311] = new Rule(-6, new int[]{74});
    rules[312] = new Rule(-6, new int[]{73});
    rules[313] = new Rule(-6, new int[]{72});
    rules[314] = new Rule(-6, new int[]{71});
    rules[315] = new Rule(-27, new int[]{});
    rules[316] = new Rule(-27, new int[]{-29,-166});
    rules[317] = new Rule(-27, new int[]{-28});
    rules[318] = new Rule(-27, new int[]{-29,10,-28});
    rules[319] = new Rule(-133, new int[]{-121});
    rules[320] = new Rule(-133, new int[]{-133,89,-121});
    rules[321] = new Rule(-166, new int[]{});
    rules[322] = new Rule(-166, new int[]{10});
    rules[323] = new Rule(-29, new int[]{-39});
    rules[324] = new Rule(-29, new int[]{-29,10,-39});
    rules[325] = new Rule(-39, new int[]{-5,-45});
    rules[326] = new Rule(-28, new int[]{-48});
    rules[327] = new Rule(-28, new int[]{-28,-48});
    rules[328] = new Rule(-48, new int[]{-47});
    rules[329] = new Rule(-48, new int[]{-49});
    rules[330] = new Rule(-45, new int[]{23,-23});
    rules[331] = new Rule(-45, new int[]{-275});
    rules[332] = new Rule(-45, new int[]{21,-275});
    rules[333] = new Rule(-275, new int[]{-274});
    rules[334] = new Rule(-275, new int[]{54,-133,5,-244});
    rules[335] = new Rule(-47, new int[]{-5,-194});
    rules[336] = new Rule(-47, new int[]{-5,-191});
    rules[337] = new Rule(-191, new int[]{-187});
    rules[338] = new Rule(-191, new int[]{-190});
    rules[339] = new Rule(-194, new int[]{21,-202});
    rules[340] = new Rule(-194, new int[]{-202});
    rules[341] = new Rule(-194, new int[]{-199});
    rules[342] = new Rule(-202, new int[]{-200});
    rules[343] = new Rule(-200, new int[]{-197});
    rules[344] = new Rule(-200, new int[]{-201});
    rules[345] = new Rule(-199, new int[]{24,-147,-102,-181});
    rules[346] = new Rule(-199, new int[]{21,24,-147,-102,-181});
    rules[347] = new Rule(-199, new int[]{25,-147,-102,-181});
    rules[348] = new Rule(-147, new int[]{-146});
    rules[349] = new Rule(-147, new int[]{});
    rules[350] = new Rule(-148, new int[]{-121});
    rules[351] = new Rule(-148, new int[]{-125});
    rules[352] = new Rule(-148, new int[]{-148,7,-121});
    rules[353] = new Rule(-148, new int[]{-148,7,-125});
    rules[354] = new Rule(-49, new int[]{-5,-229});
    rules[355] = new Rule(-229, new int[]{-230});
    rules[356] = new Rule(-229, new int[]{21,-230});
    rules[357] = new Rule(-230, new int[]{38,-148,-205,-178,10,-179});
    rules[358] = new Rule(-179, new int[]{});
    rules[359] = new Rule(-179, new int[]{55,10});
    rules[360] = new Rule(-205, new int[]{});
    rules[361] = new Rule(-205, new int[]{-210,5,-243});
    rules[362] = new Rule(-210, new int[]{});
    rules[363] = new Rule(-210, new int[]{11,-209,12});
    rules[364] = new Rule(-209, new int[]{-208});
    rules[365] = new Rule(-209, new int[]{-209,10,-208});
    rules[366] = new Rule(-208, new int[]{-133,5,-243});
    rules[367] = new Rule(-124, new int[]{-121});
    rules[368] = new Rule(-124, new int[]{});
    rules[369] = new Rule(-178, new int[]{});
    rules[370] = new Rule(-178, new int[]{75,-124,-178});
    rules[371] = new Rule(-178, new int[]{76,-124,-178});
    rules[372] = new Rule(-273, new int[]{-274,10});
    rules[373] = new Rule(-299, new int[]{98});
    rules[374] = new Rule(-299, new int[]{107});
    rules[375] = new Rule(-274, new int[]{-133,5,-244});
    rules[376] = new Rule(-274, new int[]{-133,98,-77});
    rules[377] = new Rule(-274, new int[]{-133,5,-244,-299,-76});
    rules[378] = new Rule(-274, new int[]{-133,5,-244,-299,-285});
    rules[379] = new Rule(-76, new int[]{-75});
    rules[380] = new Rule(-76, new int[]{-149});
    rules[381] = new Rule(-76, new int[]{-51});
    rules[382] = new Rule(-189, new int[]{-199,-153});
    rules[383] = new Rule(-190, new int[]{-199,-152});
    rules[384] = new Rule(-186, new int[]{-193});
    rules[385] = new Rule(-186, new int[]{21,-193});
    rules[386] = new Rule(-193, new int[]{-200,-154});
    rules[387] = new Rule(-193, new int[]{31,-145,-102,5,-243,-182,98,-85,10});
    rules[388] = new Rule(-193, new int[]{31,-145,-102,-182,98,-85,10});
    rules[389] = new Rule(-193, new int[]{36,-146,-102,-182,98,-232,10});
    rules[390] = new Rule(-193, new int[]{-200,134,10});
    rules[391] = new Rule(-187, new int[]{-188});
    rules[392] = new Rule(-187, new int[]{21,-188});
    rules[393] = new Rule(-188, new int[]{-200,-152});
    rules[394] = new Rule(-188, new int[]{31,-145,-102,5,-243,-182,98,-85,10});
    rules[395] = new Rule(-188, new int[]{31,-145,-102,-182,98,-85,10});
    rules[396] = new Rule(-188, new int[]{36,-146,-102,-182,98,-232,10});
    rules[397] = new Rule(-154, new int[]{-153});
    rules[398] = new Rule(-154, new int[]{-54});
    rules[399] = new Rule(-146, new int[]{-145});
    rules[400] = new Rule(-145, new int[]{-116});
    rules[401] = new Rule(-145, new int[]{-295,7,-116});
    rules[402] = new Rule(-123, new int[]{-111});
    rules[403] = new Rule(-295, new int[]{-123});
    rules[404] = new Rule(-295, new int[]{-295,7,-123});
    rules[405] = new Rule(-116, new int[]{-111});
    rules[406] = new Rule(-116, new int[]{-167});
    rules[407] = new Rule(-116, new int[]{-167,-130});
    rules[408] = new Rule(-111, new int[]{-108});
    rules[409] = new Rule(-111, new int[]{-108,-130});
    rules[410] = new Rule(-108, new int[]{-121});
    rules[411] = new Rule(-197, new int[]{36,-146,-102,-181,-279});
    rules[412] = new Rule(-201, new int[]{31,-145,-102,-181,-279});
    rules[413] = new Rule(-201, new int[]{31,-145,-102,5,-243,-181,-279});
    rules[414] = new Rule(-54, new int[]{96,-90,70,-90,10});
    rules[415] = new Rule(-54, new int[]{96,-90,10});
    rules[416] = new Rule(-54, new int[]{96,10});
    rules[417] = new Rule(-90, new int[]{-121});
    rules[418] = new Rule(-90, new int[]{-140});
    rules[419] = new Rule(-153, new int[]{-36,-226,10});
    rules[420] = new Rule(-152, new int[]{-38,-226,10});
    rules[421] = new Rule(-102, new int[]{});
    rules[422] = new Rule(-102, new int[]{8,9});
    rules[423] = new Rule(-102, new int[]{8,-103,9});
    rules[424] = new Rule(-103, new int[]{-50});
    rules[425] = new Rule(-103, new int[]{-103,10,-50});
    rules[426] = new Rule(-50, new int[]{-5,-262});
    rules[427] = new Rule(-262, new int[]{-134,5,-243});
    rules[428] = new Rule(-262, new int[]{45,-134,5,-243});
    rules[429] = new Rule(-262, new int[]{23,-134,5,-243});
    rules[430] = new Rule(-262, new int[]{97,-134,5,-243});
    rules[431] = new Rule(-262, new int[]{-134,5,-243,98,-79});
    rules[432] = new Rule(-262, new int[]{45,-134,5,-243,98,-79});
    rules[433] = new Rule(-262, new int[]{23,-134,5,-243,98,-79});
    rules[434] = new Rule(-134, new int[]{-109});
    rules[435] = new Rule(-134, new int[]{-134,89,-109});
    rules[436] = new Rule(-109, new int[]{-121});
    rules[437] = new Rule(-243, new int[]{-244});
    rules[438] = new Rule(-245, new int[]{-240});
    rules[439] = new Rule(-245, new int[]{-227});
    rules[440] = new Rule(-245, new int[]{-220});
    rules[441] = new Rule(-245, new int[]{-248});
    rules[442] = new Rule(-245, new int[]{-265});
    rules[443] = new Rule(-233, new int[]{-232});
    rules[444] = new Rule(-233, new int[]{-117,5,-233});
    rules[445] = new Rule(-232, new int[]{});
    rules[446] = new Rule(-232, new int[]{-3});
    rules[447] = new Rule(-232, new int[]{-184});
    rules[448] = new Rule(-232, new int[]{-107});
    rules[449] = new Rule(-232, new int[]{-226});
    rules[450] = new Rule(-232, new int[]{-128});
    rules[451] = new Rule(-232, new int[]{-30});
    rules[452] = new Rule(-232, new int[]{-218});
    rules[453] = new Rule(-232, new int[]{-280});
    rules[454] = new Rule(-232, new int[]{-99});
    rules[455] = new Rule(-232, new int[]{-281});
    rules[456] = new Rule(-232, new int[]{-135});
    rules[457] = new Rule(-232, new int[]{-266});
    rules[458] = new Rule(-232, new int[]{-219});
    rules[459] = new Rule(-232, new int[]{-98});
    rules[460] = new Rule(-232, new int[]{-276});
    rules[461] = new Rule(-232, new int[]{-52});
    rules[462] = new Rule(-232, new int[]{-144});
    rules[463] = new Rule(-232, new int[]{-100});
    rules[464] = new Rule(-232, new int[]{-101});
    rules[465] = new Rule(-100, new int[]{67,-86});
    rules[466] = new Rule(-101, new int[]{67,66,-86});
    rules[467] = new Rule(-276, new int[]{45,-274});
    rules[468] = new Rule(-3, new int[]{-94,-170,-78});
    rules[469] = new Rule(-3, new int[]{8,-93,89,-297,9,-170,-77});
    rules[470] = new Rule(-3, new int[]{8,45,-93,89,-298,9,-170,-77});
    rules[471] = new Rule(-297, new int[]{-93});
    rules[472] = new Rule(-297, new int[]{-297,89,-93});
    rules[473] = new Rule(-298, new int[]{45,-93});
    rules[474] = new Rule(-298, new int[]{-298,89,45,-93});
    rules[475] = new Rule(-184, new int[]{-94});
    rules[476] = new Rule(-107, new int[]{49,-117});
    rules[477] = new Rule(-226, new int[]{80,-223,81});
    rules[478] = new Rule(-223, new int[]{-233});
    rules[479] = new Rule(-223, new int[]{-223,10,-233});
    rules[480] = new Rule(-128, new int[]{32,-86,43,-232});
    rules[481] = new Rule(-128, new int[]{32,-86,43,-232,26,-232});
    rules[482] = new Rule(-30, new int[]{20,-86,50,-31,-224,81});
    rules[483] = new Rule(-31, new int[]{-234});
    rules[484] = new Rule(-31, new int[]{-31,10,-234});
    rules[485] = new Rule(-234, new int[]{});
    rules[486] = new Rule(-234, new int[]{-66,5,-232});
    rules[487] = new Rule(-66, new int[]{-92});
    rules[488] = new Rule(-66, new int[]{-66,89,-92});
    rules[489] = new Rule(-92, new int[]{-82});
    rules[490] = new Rule(-224, new int[]{});
    rules[491] = new Rule(-224, new int[]{26,-223});
    rules[492] = new Rule(-218, new int[]{86,-223,87,-77});
    rules[493] = new Rule(-280, new int[]{46,-86,-258,-232});
    rules[494] = new Rule(-258, new int[]{88});
    rules[495] = new Rule(-258, new int[]{});
    rules[496] = new Rule(-144, new int[]{52,-86,88,-232});
    rules[497] = new Rule(-98, new int[]{30,-121,-242,124,-86,88,-232});
    rules[498] = new Rule(-98, new int[]{30,45,-121,5,-244,124,-86,88,-232});
    rules[499] = new Rule(-98, new int[]{30,45,-121,124,-86,88,-232});
    rules[500] = new Rule(-242, new int[]{5,-244});
    rules[501] = new Rule(-242, new int[]{});
    rules[502] = new Rule(-99, new int[]{29,-16,-121,-252,-86,-96,-86,-258,-232});
    rules[503] = new Rule(-16, new int[]{45});
    rules[504] = new Rule(-16, new int[]{});
    rules[505] = new Rule(-252, new int[]{98});
    rules[506] = new Rule(-252, new int[]{5,-156,98});
    rules[507] = new Rule(-96, new int[]{63});
    rules[508] = new Rule(-96, new int[]{64});
    rules[509] = new Rule(-281, new int[]{47,-63,88,-232});
    rules[510] = new Rule(-135, new int[]{34});
    rules[511] = new Rule(-266, new int[]{91,-223,-256});
    rules[512] = new Rule(-256, new int[]{90,-223,81});
    rules[513] = new Rule(-256, new int[]{27,-53,81});
    rules[514] = new Rule(-53, new int[]{-56,-225});
    rules[515] = new Rule(-53, new int[]{-56,10,-225});
    rules[516] = new Rule(-53, new int[]{-223});
    rules[517] = new Rule(-56, new int[]{-55});
    rules[518] = new Rule(-56, new int[]{-56,10,-55});
    rules[519] = new Rule(-225, new int[]{});
    rules[520] = new Rule(-225, new int[]{26,-223});
    rules[521] = new Rule(-55, new int[]{69,-57,88,-232});
    rules[522] = new Rule(-57, new int[]{-155});
    rules[523] = new Rule(-57, new int[]{-114,5,-155});
    rules[524] = new Rule(-155, new int[]{-156});
    rules[525] = new Rule(-114, new int[]{-121});
    rules[526] = new Rule(-219, new int[]{39});
    rules[527] = new Rule(-219, new int[]{39,-77});
    rules[528] = new Rule(-63, new int[]{-78});
    rules[529] = new Rule(-63, new int[]{-63,89,-78});
    rules[530] = new Rule(-52, new int[]{-150});
    rules[531] = new Rule(-150, new int[]{-149});
    rules[532] = new Rule(-78, new int[]{-77});
    rules[533] = new Rule(-78, new int[]{-284});
    rules[534] = new Rule(-77, new int[]{-86});
    rules[535] = new Rule(-77, new int[]{-97});
    rules[536] = new Rule(-86, new int[]{-85});
    rules[537] = new Rule(-86, new int[]{-212});
    rules[538] = new Rule(-228, new int[]{16,8,-250,9});
    rules[539] = new Rule(-261, new int[]{17,8,-250,9});
    rules[540] = new Rule(-212, new int[]{-86,13,-86,5,-86});
    rules[541] = new Rule(-250, new int[]{-156});
    rules[542] = new Rule(-250, new int[]{-156,-264});
    rules[543] = new Rule(-250, new int[]{-156,4,-264});
    rules[544] = new Rule(-4, new int[]{8,-59,9});
    rules[545] = new Rule(-4, new int[]{});
    rules[546] = new Rule(-149, new int[]{68,-250,-62});
    rules[547] = new Rule(-149, new int[]{68,-241,11,-60,12,-4});
    rules[548] = new Rule(-149, new int[]{68,21,8,-294,9});
    rules[549] = new Rule(-293, new int[]{-121,98,-85});
    rules[550] = new Rule(-293, new int[]{-85});
    rules[551] = new Rule(-294, new int[]{-293});
    rules[552] = new Rule(-294, new int[]{-294,89,-293});
    rules[553] = new Rule(-241, new int[]{-156});
    rules[554] = new Rule(-241, new int[]{-238});
    rules[555] = new Rule(-62, new int[]{});
    rules[556] = new Rule(-62, new int[]{8,-60,9});
    rules[557] = new Rule(-85, new int[]{-87});
    rules[558] = new Rule(-85, new int[]{-85,-172,-87});
    rules[559] = new Rule(-85, new int[]{-85,14,-87});
    rules[560] = new Rule(-95, new int[]{-87});
    rules[561] = new Rule(-95, new int[]{});
    rules[562] = new Rule(-97, new int[]{-87,5,-95});
    rules[563] = new Rule(-97, new int[]{5,-95});
    rules[564] = new Rule(-97, new int[]{-87,5,-95,5,-87});
    rules[565] = new Rule(-97, new int[]{5,-95,5,-87});
    rules[566] = new Rule(-172, new int[]{107});
    rules[567] = new Rule(-172, new int[]{112});
    rules[568] = new Rule(-172, new int[]{110});
    rules[569] = new Rule(-172, new int[]{108});
    rules[570] = new Rule(-172, new int[]{111});
    rules[571] = new Rule(-172, new int[]{109});
    rules[572] = new Rule(-172, new int[]{124});
    rules[573] = new Rule(-87, new int[]{-74});
    rules[574] = new Rule(-87, new int[]{-87,-173,-74});
    rules[575] = new Rule(-173, new int[]{104});
    rules[576] = new Rule(-173, new int[]{103});
    rules[577] = new Rule(-173, new int[]{115});
    rules[578] = new Rule(-173, new int[]{116});
    rules[579] = new Rule(-173, new int[]{113});
    rules[580] = new Rule(-177, new int[]{123});
    rules[581] = new Rule(-177, new int[]{125});
    rules[582] = new Rule(-236, new int[]{-74,-177,-250});
    rules[583] = new Rule(-74, new int[]{-84});
    rules[584] = new Rule(-74, new int[]{-149});
    rules[585] = new Rule(-74, new int[]{-74,-174,-84});
    rules[586] = new Rule(-74, new int[]{-236});
    rules[587] = new Rule(-174, new int[]{106});
    rules[588] = new Rule(-174, new int[]{105});
    rules[589] = new Rule(-174, new int[]{118});
    rules[590] = new Rule(-174, new int[]{119});
    rules[591] = new Rule(-174, new int[]{120});
    rules[592] = new Rule(-174, new int[]{121});
    rules[593] = new Rule(-174, new int[]{117});
    rules[594] = new Rule(-51, new int[]{55,8,-250,9});
    rules[595] = new Rule(-84, new int[]{48});
    rules[596] = new Rule(-84, new int[]{-13});
    rules[597] = new Rule(-84, new int[]{-51});
    rules[598] = new Rule(-84, new int[]{11,-61,12});
    rules[599] = new Rule(-84, new int[]{122,-84});
    rules[600] = new Rule(-84, new int[]{-175,-84});
    rules[601] = new Rule(-84, new int[]{129,-84});
    rules[602] = new Rule(-84, new int[]{-94});
    rules[603] = new Rule(-84, new int[]{8,-86,89,-71,-286,-292,9});
    rules[604] = new Rule(-13, new int[]{-140});
    rules[605] = new Rule(-13, new int[]{-14});
    rules[606] = new Rule(-94, new int[]{-106,-93});
    rules[607] = new Rule(-94, new int[]{-93});
    rules[608] = new Rule(-106, new int[]{128});
    rules[609] = new Rule(-106, new int[]{-106,128});
    rules[610] = new Rule(-8, new int[]{-156,-62});
    rules[611] = new Rule(-283, new int[]{-121});
    rules[612] = new Rule(-283, new int[]{-283,7,-112});
    rules[613] = new Rule(-282, new int[]{-283});
    rules[614] = new Rule(-282, new int[]{-283,-264});
    rules[615] = new Rule(-93, new int[]{-121});
    rules[616] = new Rule(-93, new int[]{-167});
    rules[617] = new Rule(-93, new int[]{34,-121});
    rules[618] = new Rule(-93, new int[]{8,-77,9});
    rules[619] = new Rule(-93, new int[]{-228});
    rules[620] = new Rule(-93, new int[]{-261});
    rules[621] = new Rule(-93, new int[]{-13,7,-112});
    rules[622] = new Rule(-93, new int[]{-93,11,-63,12});
    rules[623] = new Rule(-93, new int[]{-93,8,-60,9});
    rules[624] = new Rule(-93, new int[]{-93,7,-122});
    rules[625] = new Rule(-93, new int[]{-93,129});
    rules[626] = new Rule(-93, new int[]{-93,4,-264});
    rules[627] = new Rule(-60, new int[]{-63});
    rules[628] = new Rule(-60, new int[]{});
    rules[629] = new Rule(-61, new int[]{-69});
    rules[630] = new Rule(-61, new int[]{});
    rules[631] = new Rule(-69, new int[]{-80});
    rules[632] = new Rule(-69, new int[]{-69,89,-80});
    rules[633] = new Rule(-80, new int[]{-77});
    rules[634] = new Rule(-80, new int[]{-77,6,-77});
    rules[635] = new Rule(-141, new int[]{131});
    rules[636] = new Rule(-141, new int[]{132});
    rules[637] = new Rule(-140, new int[]{-142});
    rules[638] = new Rule(-142, new int[]{-141});
    rules[639] = new Rule(-142, new int[]{-142,-141});
    rules[640] = new Rule(-167, new int[]{37,-176});
    rules[641] = new Rule(-181, new int[]{10});
    rules[642] = new Rule(-181, new int[]{10,-180,10});
    rules[643] = new Rule(-182, new int[]{});
    rules[644] = new Rule(-182, new int[]{10,-180});
    rules[645] = new Rule(-180, new int[]{-183});
    rules[646] = new Rule(-180, new int[]{-180,10,-183});
    rules[647] = new Rule(-121, new int[]{130});
    rules[648] = new Rule(-121, new int[]{-126});
    rules[649] = new Rule(-121, new int[]{-127});
    rules[650] = new Rule(-112, new int[]{-121});
    rules[651] = new Rule(-112, new int[]{-259});
    rules[652] = new Rule(-112, new int[]{-260});
    rules[653] = new Rule(-122, new int[]{-121});
    rules[654] = new Rule(-122, new int[]{-259});
    rules[655] = new Rule(-122, new int[]{-167});
    rules[656] = new Rule(-183, new int[]{133});
    rules[657] = new Rule(-183, new int[]{135});
    rules[658] = new Rule(-183, new int[]{136});
    rules[659] = new Rule(-183, new int[]{137});
    rules[660] = new Rule(-183, new int[]{139});
    rules[661] = new Rule(-183, new int[]{138});
    rules[662] = new Rule(-126, new int[]{75});
    rules[663] = new Rule(-126, new int[]{76});
    rules[664] = new Rule(-127, new int[]{70});
    rules[665] = new Rule(-127, new int[]{68});
    rules[666] = new Rule(-125, new int[]{74});
    rules[667] = new Rule(-125, new int[]{73});
    rules[668] = new Rule(-125, new int[]{72});
    rules[669] = new Rule(-125, new int[]{71});
    rules[670] = new Rule(-259, new int[]{-125});
    rules[671] = new Rule(-259, new int[]{61});
    rules[672] = new Rule(-259, new int[]{56});
    rules[673] = new Rule(-259, new int[]{115});
    rules[674] = new Rule(-259, new int[]{17});
    rules[675] = new Rule(-259, new int[]{16});
    rules[676] = new Rule(-259, new int[]{55});
    rules[677] = new Rule(-259, new int[]{18});
    rules[678] = new Rule(-259, new int[]{116});
    rules[679] = new Rule(-259, new int[]{117});
    rules[680] = new Rule(-259, new int[]{118});
    rules[681] = new Rule(-259, new int[]{119});
    rules[682] = new Rule(-259, new int[]{120});
    rules[683] = new Rule(-259, new int[]{121});
    rules[684] = new Rule(-259, new int[]{122});
    rules[685] = new Rule(-259, new int[]{123});
    rules[686] = new Rule(-259, new int[]{124});
    rules[687] = new Rule(-259, new int[]{125});
    rules[688] = new Rule(-259, new int[]{19});
    rules[689] = new Rule(-259, new int[]{66});
    rules[690] = new Rule(-259, new int[]{80});
    rules[691] = new Rule(-259, new int[]{20});
    rules[692] = new Rule(-259, new int[]{21});
    rules[693] = new Rule(-259, new int[]{23});
    rules[694] = new Rule(-259, new int[]{24});
    rules[695] = new Rule(-259, new int[]{25});
    rules[696] = new Rule(-259, new int[]{64});
    rules[697] = new Rule(-259, new int[]{88});
    rules[698] = new Rule(-259, new int[]{26});
    rules[699] = new Rule(-259, new int[]{27});
    rules[700] = new Rule(-259, new int[]{28});
    rules[701] = new Rule(-259, new int[]{22});
    rules[702] = new Rule(-259, new int[]{93});
    rules[703] = new Rule(-259, new int[]{90});
    rules[704] = new Rule(-259, new int[]{29});
    rules[705] = new Rule(-259, new int[]{30});
    rules[706] = new Rule(-259, new int[]{31});
    rules[707] = new Rule(-259, new int[]{32});
    rules[708] = new Rule(-259, new int[]{33});
    rules[709] = new Rule(-259, new int[]{34});
    rules[710] = new Rule(-259, new int[]{92});
    rules[711] = new Rule(-259, new int[]{35});
    rules[712] = new Rule(-259, new int[]{36});
    rules[713] = new Rule(-259, new int[]{38});
    rules[714] = new Rule(-259, new int[]{39});
    rules[715] = new Rule(-259, new int[]{40});
    rules[716] = new Rule(-259, new int[]{86});
    rules[717] = new Rule(-259, new int[]{41});
    rules[718] = new Rule(-259, new int[]{91});
    rules[719] = new Rule(-259, new int[]{42});
    rules[720] = new Rule(-259, new int[]{43});
    rules[721] = new Rule(-259, new int[]{63});
    rules[722] = new Rule(-259, new int[]{87});
    rules[723] = new Rule(-259, new int[]{44});
    rules[724] = new Rule(-259, new int[]{45});
    rules[725] = new Rule(-259, new int[]{46});
    rules[726] = new Rule(-259, new int[]{47});
    rules[727] = new Rule(-259, new int[]{48});
    rules[728] = new Rule(-259, new int[]{49});
    rules[729] = new Rule(-259, new int[]{50});
    rules[730] = new Rule(-259, new int[]{51});
    rules[731] = new Rule(-259, new int[]{53});
    rules[732] = new Rule(-259, new int[]{94});
    rules[733] = new Rule(-259, new int[]{95});
    rules[734] = new Rule(-259, new int[]{96});
    rules[735] = new Rule(-259, new int[]{97});
    rules[736] = new Rule(-259, new int[]{54});
    rules[737] = new Rule(-259, new int[]{67});
    rules[738] = new Rule(-260, new int[]{37});
    rules[739] = new Rule(-260, new int[]{81});
    rules[740] = new Rule(-176, new int[]{103});
    rules[741] = new Rule(-176, new int[]{104});
    rules[742] = new Rule(-176, new int[]{105});
    rules[743] = new Rule(-176, new int[]{106});
    rules[744] = new Rule(-176, new int[]{107});
    rules[745] = new Rule(-176, new int[]{108});
    rules[746] = new Rule(-176, new int[]{109});
    rules[747] = new Rule(-176, new int[]{110});
    rules[748] = new Rule(-176, new int[]{111});
    rules[749] = new Rule(-176, new int[]{112});
    rules[750] = new Rule(-176, new int[]{115});
    rules[751] = new Rule(-176, new int[]{116});
    rules[752] = new Rule(-176, new int[]{117});
    rules[753] = new Rule(-176, new int[]{118});
    rules[754] = new Rule(-176, new int[]{119});
    rules[755] = new Rule(-176, new int[]{120});
    rules[756] = new Rule(-176, new int[]{121});
    rules[757] = new Rule(-176, new int[]{122});
    rules[758] = new Rule(-176, new int[]{124});
    rules[759] = new Rule(-176, new int[]{126});
    rules[760] = new Rule(-176, new int[]{127});
    rules[761] = new Rule(-176, new int[]{-170});
    rules[762] = new Rule(-170, new int[]{98});
    rules[763] = new Rule(-170, new int[]{99});
    rules[764] = new Rule(-170, new int[]{100});
    rules[765] = new Rule(-170, new int[]{101});
    rules[766] = new Rule(-170, new int[]{102});
    rules[767] = new Rule(-284, new int[]{-121,114,-290});
    rules[768] = new Rule(-284, new int[]{8,9,-287,114,-290});
    rules[769] = new Rule(-284, new int[]{8,-121,5,-243,9,-287,114,-290});
    rules[770] = new Rule(-284, new int[]{8,-121,10,-288,9,-287,114,-290});
    rules[771] = new Rule(-284, new int[]{8,-121,5,-243,10,-288,9,-287,114,-290});
    rules[772] = new Rule(-284, new int[]{8,-86,89,-71,-286,-292,9,-296});
    rules[773] = new Rule(-284, new int[]{-285});
    rules[774] = new Rule(-292, new int[]{});
    rules[775] = new Rule(-292, new int[]{10,-288});
    rules[776] = new Rule(-296, new int[]{-287,114,-290});
    rules[777] = new Rule(-285, new int[]{31,-286,114,-290});
    rules[778] = new Rule(-285, new int[]{31,8,9,-286,114,-290});
    rules[779] = new Rule(-285, new int[]{31,8,-288,9,-286,114,-290});
    rules[780] = new Rule(-285, new int[]{36,114,-291});
    rules[781] = new Rule(-285, new int[]{36,8,9,114,-291});
    rules[782] = new Rule(-285, new int[]{36,8,-288,9,114,-291});
    rules[783] = new Rule(-288, new int[]{-289});
    rules[784] = new Rule(-288, new int[]{-288,10,-289});
    rules[785] = new Rule(-289, new int[]{-133,-286});
    rules[786] = new Rule(-286, new int[]{});
    rules[787] = new Rule(-286, new int[]{5,-243});
    rules[788] = new Rule(-287, new int[]{});
    rules[789] = new Rule(-287, new int[]{5,-245});
    rules[790] = new Rule(-290, new int[]{-86});
    rules[791] = new Rule(-290, new int[]{-226});
    rules[792] = new Rule(-290, new int[]{-128});
    rules[793] = new Rule(-290, new int[]{-280});
    rules[794] = new Rule(-290, new int[]{-218});
    rules[795] = new Rule(-290, new int[]{-99});
    rules[796] = new Rule(-290, new int[]{-98});
    rules[797] = new Rule(-290, new int[]{-30});
    rules[798] = new Rule(-290, new int[]{-266});
    rules[799] = new Rule(-290, new int[]{-144});
    rules[800] = new Rule(-290, new int[]{-100});
    rules[801] = new Rule(-291, new int[]{-184});
    rules[802] = new Rule(-291, new int[]{-226});
    rules[803] = new Rule(-291, new int[]{-128});
    rules[804] = new Rule(-291, new int[]{-280});
    rules[805] = new Rule(-291, new int[]{-218});
    rules[806] = new Rule(-291, new int[]{-99});
    rules[807] = new Rule(-291, new int[]{-98});
    rules[808] = new Rule(-291, new int[]{-30});
    rules[809] = new Rule(-291, new int[]{-266});
    rules[810] = new Rule(-291, new int[]{-144});
    rules[811] = new Rule(-291, new int[]{-100});
    rules[812] = new Rule(-291, new int[]{-3});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
    {
  CurrentSemanticValue = new Union();
    switch (action)
    {
      case 2: // parse_goal -> program_file
{ root = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 3: // parse_goal -> unit_file
{ root = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 4: // parse_goal -> parts
{ root = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 5: // parts -> tkParseModeExpression, expr
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 6: // parts -> tkParseModeType, variable_as_type
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 7: // parts -> tkParseModeStatement, stmt_or_expression
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 8: // stmt_or_expression -> expr
{ CurrentSemanticValue.stn = new expression_as_statement(ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);}
        break;
      case 9: // stmt_or_expression -> assignment
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 10: // stmt_or_expression -> var_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 11: // optional_head_compiler_directives -> /* empty */
{ CurrentSemanticValue.ob = null; }
        break;
      case 12: // optional_head_compiler_directives -> head_compiler_directives
{ CurrentSemanticValue.ob = null; }
        break;
      case 13: // head_compiler_directives -> one_compiler_directive
{ CurrentSemanticValue.ob = null; }
        break;
      case 14: // head_compiler_directives -> head_compiler_directives, one_compiler_directive
{ CurrentSemanticValue.ob = null; }
        break;
      case 15: // one_compiler_directive -> tkDirectiveName, tkIdentifier
{
			parsertools.AddErrorFromResource("UNSUPPORTED_OLD_DIRECTIVES",CurrentLocationSpan);
			CurrentSemanticValue.ob = null;
        }
        break;
      case 16: // one_compiler_directive -> tkDirectiveName, tkStringLiteral
{
			parsertools.AddErrorFromResource("UNSUPPORTED_OLD_DIRECTIVES",CurrentLocationSpan);
			CurrentSemanticValue.ob = null;
        }
        break;
      case 17: // program_file -> program_header, optional_head_compiler_directives, uses_clause, 
               //                 program_block, optional_tk_point
{ 
			CurrentSemanticValue.stn = NewProgramModule(ValueStack[ValueStack.Depth-5].stn as program_name, ValueStack[ValueStack.Depth-4].ob, ValueStack[ValueStack.Depth-3].stn as uses_list, ValueStack[ValueStack.Depth-2].stn, ValueStack[ValueStack.Depth-1].ob, CurrentLocationSpan);
        }
        break;
      case 18: // optional_tk_point -> tkPoint
{ CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 19: // optional_tk_point -> tkSemiColon
{ CurrentSemanticValue.ob = null; }
        break;
      case 20: // optional_tk_point -> tkColon
{ CurrentSemanticValue.ob = null; }
        break;
      case 21: // optional_tk_point -> tkComma
{ CurrentSemanticValue.ob = null; }
        break;
      case 22: // optional_tk_point -> tkDotDot
{ CurrentSemanticValue.ob = null; }
        break;
      case 24: // program_header -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 25: // program_header -> tkProgram, identifier, program_heading_2
{ CurrentSemanticValue.stn = new program_name(ValueStack[ValueStack.Depth-2].id,CurrentLocationSpan); }
        break;
      case 26: // program_heading_2 -> tkSemiColon
{ CurrentSemanticValue.ob = null; }
        break;
      case 27: // program_heading_2 -> tkRoundOpen, program_param_list, tkRoundClose, tkSemiColon
{ CurrentSemanticValue.ob = null; }
        break;
      case 28: // program_param_list -> program_param
{ CurrentSemanticValue.ob = null; }
        break;
      case 29: // program_param_list -> program_param_list, tkComma, program_param
{ CurrentSemanticValue.ob = null; }
        break;
      case 30: // program_param -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 31: // program_block -> program_decl_sect_list, compound_stmt
{ 
			CurrentSemanticValue.stn = new block(ValueStack[ValueStack.Depth-2].stn as declarations, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
        }
        break;
      case 32: // program_decl_sect_list -> decl_sect_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 33: // ident_or_keyword_pointseparator_list -> identifier_or_keyword
{ 
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 34: // ident_or_keyword_pointseparator_list -> ident_or_keyword_pointseparator_list, 
               //                                         tkPoint, identifier_or_keyword
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 35: // uses_clause -> /* empty */
{ 
			CurrentSemanticValue.stn = null; 
		}
        break;
      case 36: // uses_clause -> uses_clause, tkUses, used_units_list, tkSemiColon
{ 
   			if (parsertools.build_tree_for_formatter)
   			{
	        	if (ValueStack[ValueStack.Depth-4].stn == null)
	        		ValueStack[ValueStack.Depth-4].stn = new uses_closure(ValueStack[ValueStack.Depth-2].stn as uses_list,CurrentLocationSpan);
	        	else (ValueStack[ValueStack.Depth-4].stn as uses_closure).AddUsesList(ValueStack[ValueStack.Depth-2].stn as uses_list,CurrentLocationSpan);
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-4].stn;
   			}
   			else 
   			{
	        	if (ValueStack[ValueStack.Depth-4].stn == null)
	        		ValueStack[ValueStack.Depth-4].stn = ValueStack[ValueStack.Depth-2].stn;
	        	else (ValueStack[ValueStack.Depth-4].stn as uses_list).AddUsesList(ValueStack[ValueStack.Depth-2].stn as uses_list,CurrentLocationSpan);
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-4].stn;
				CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
			}
		}
        break;
      case 37: // used_units_list -> used_unit_name
{ 
		  CurrentSemanticValue.stn = new uses_list(ValueStack[ValueStack.Depth-1].stn as unit_or_namespace,CurrentLocationSpan);
        }
        break;
      case 38: // used_units_list -> used_units_list, tkComma, used_unit_name
{ 
		  CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as uses_list).Add(ValueStack[ValueStack.Depth-1].stn as unit_or_namespace, CurrentLocationSpan);
        }
        break;
      case 39: // used_unit_name -> ident_or_keyword_pointseparator_list
{ 
			CurrentSemanticValue.stn = new unit_or_namespace(ValueStack[ValueStack.Depth-1].stn as ident_list,CurrentLocationSpan); 
		}
        break;
      case 40: // used_unit_name -> ident_or_keyword_pointseparator_list, tkIn, tkStringLiteral
{ 
			CurrentSemanticValue.stn = new uses_unit_in(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].stn as string_const, CurrentLocationSpan);
        }
        break;
      case 41: // unit_file -> attribute_declarations, unit_header, interface_part, 
               //              implementation_part, initialization_part, tkPoint
{ 
			CurrentSemanticValue.stn = new unit_module(ValueStack[ValueStack.Depth-5].stn as unit_name, ValueStack[ValueStack.Depth-4].stn as interface_node, ValueStack[ValueStack.Depth-3].stn as implementation_node, (ValueStack[ValueStack.Depth-2].stn as initfinal_part).initialization_sect, (ValueStack[ValueStack.Depth-2].stn as initfinal_part).finalization_sect, ValueStack[ValueStack.Depth-6].stn as attribute_list, CurrentLocationSpan);                    
		}
        break;
      case 42: // unit_file -> attribute_declarations, unit_header, abc_interface_part, 
               //              initialization_part, tkPoint
{ 
			CurrentSemanticValue.stn = new unit_module(ValueStack[ValueStack.Depth-4].stn as unit_name, ValueStack[ValueStack.Depth-3].stn as interface_node, null, (ValueStack[ValueStack.Depth-2].stn as initfinal_part).initialization_sect, (ValueStack[ValueStack.Depth-2].stn as initfinal_part).finalization_sect, ValueStack[ValueStack.Depth-5].stn as attribute_list, CurrentLocationSpan);
        }
        break;
      case 43: // unit_header -> unit_key_word, unit_name, tkSemiColon, 
               //                optional_head_compiler_directives
{ 
			CurrentSemanticValue.stn = NewUnitHeading(new ident(ValueStack[ValueStack.Depth-4].ti.text, LocationStack[LocationStack.Depth-4]), ValueStack[ValueStack.Depth-3].id, CurrentLocationSpan); 
		}
        break;
      case 44: // unit_key_word -> tkUnit
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 45: // unit_key_word -> tkLibrary
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 46: // unit_name -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 47: // interface_part -> tkInterface, uses_clause, interface_decl_sect_list
{ 
			CurrentSemanticValue.stn = new interface_node(ValueStack[ValueStack.Depth-1].stn as declarations, ValueStack[ValueStack.Depth-2].stn as uses_list, null, LexLocation.MergeAll(LocationStack[LocationStack.Depth-3],LocationStack[LocationStack.Depth-2],LocationStack[LocationStack.Depth-1])); 
        }
        break;
      case 48: // implementation_part -> tkImplementation, uses_clause, decl_sect_list
{ 
			CurrentSemanticValue.stn = new implementation_node(ValueStack[ValueStack.Depth-2].stn as uses_list, ValueStack[ValueStack.Depth-1].stn as declarations, null, LexLocation.MergeAll(LocationStack[LocationStack.Depth-3],LocationStack[LocationStack.Depth-2],LocationStack[LocationStack.Depth-1])); 
        }
        break;
      case 49: // abc_interface_part -> uses_clause, decl_sect_list
{ 
			CurrentSemanticValue.stn = new interface_node(ValueStack[ValueStack.Depth-1].stn as declarations, ValueStack[ValueStack.Depth-2].stn as uses_list, null, null); 
        }
        break;
      case 50: // initialization_part -> tkEnd
{ 
			CurrentSemanticValue.stn = new initfinal_part(); 
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 51: // initialization_part -> tkInitialization, stmt_list, tkEnd
{ 
		  CurrentSemanticValue.stn = new initfinal_part(ValueStack[ValueStack.Depth-3].ti, ValueStack[ValueStack.Depth-2].stn as statement_list, ValueStack[ValueStack.Depth-1].ti, null, null, CurrentLocationSpan);
        }
        break;
      case 52: // initialization_part -> tkInitialization, stmt_list, tkFinalization, stmt_list, 
               //                        tkEnd
{ 
		  CurrentSemanticValue.stn = new initfinal_part(ValueStack[ValueStack.Depth-5].ti, ValueStack[ValueStack.Depth-4].stn as statement_list, ValueStack[ValueStack.Depth-3].ti, ValueStack[ValueStack.Depth-2].stn as statement_list, ValueStack[ValueStack.Depth-1].ti, CurrentLocationSpan);
        }
        break;
      case 53: // initialization_part -> tkBegin, stmt_list, tkEnd
{ 
		  CurrentSemanticValue.stn = new initfinal_part(ValueStack[ValueStack.Depth-3].ti, ValueStack[ValueStack.Depth-2].stn as statement_list, ValueStack[ValueStack.Depth-1].ti, null, null, CurrentLocationSpan);
        }
        break;
      case 54: // interface_decl_sect_list -> int_decl_sect_list1
{
			if ((ValueStack[ValueStack.Depth-1].stn as declarations).defs.Count > 0) 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
			else 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 55: // int_decl_sect_list1 -> /* empty */
{ 
			CurrentSemanticValue.stn = new declarations();  
			if (GlobalDecls==null) 
				GlobalDecls = CurrentSemanticValue.stn as declarations;
		}
        break;
      case 56: // int_decl_sect_list1 -> int_decl_sect_list1, int_decl_sect
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as declarations).Add(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 57: // decl_sect_list -> decl_sect_list1
{
			if ((ValueStack[ValueStack.Depth-1].stn as declarations).defs.Count > 0) 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
			else 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 58: // decl_sect_list1 -> /* empty */
{ 
			CurrentSemanticValue.stn = new declarations(); 
			if (GlobalDecls==null) 
				GlobalDecls = CurrentSemanticValue.stn as declarations;
		}
        break;
      case 59: // decl_sect_list1 -> decl_sect_list1, decl_sect
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as declarations).Add(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 60: // inclass_decl_sect_list -> inclass_decl_sect_list1
{
			if ((ValueStack[ValueStack.Depth-1].stn as declarations).defs.Count > 0) 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
			else 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 61: // inclass_decl_sect_list1 -> /* empty */
{ 
        	CurrentSemanticValue.stn = new declarations(); 
        }
        break;
      case 62: // inclass_decl_sect_list1 -> inclass_decl_sect_list1, abc_decl_sect
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as declarations).Add(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 63: // int_decl_sect -> const_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 64: // int_decl_sect -> res_str_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 65: // int_decl_sect -> type_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 66: // int_decl_sect -> var_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 67: // int_decl_sect -> int_proc_header
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 68: // int_decl_sect -> int_func_header
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 69: // decl_sect -> label_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 70: // decl_sect -> const_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 71: // decl_sect -> res_str_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 72: // decl_sect -> type_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 73: // decl_sect -> var_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 74: // decl_sect -> proc_func_constr_destr_decl_with_attr
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 75: // proc_func_constr_destr_decl -> proc_func_decl
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 76: // proc_func_constr_destr_decl -> constr_destr_decl
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 77: // proc_func_constr_destr_decl_with_attr -> attribute_declarations, 
               //                                          proc_func_constr_destr_decl
{
		    (ValueStack[ValueStack.Depth-1].stn as procedure_definition).AssignAttrList(ValueStack[ValueStack.Depth-2].stn as attribute_list);
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 78: // abc_decl_sect -> label_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 79: // abc_decl_sect -> const_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 80: // abc_decl_sect -> res_str_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 81: // abc_decl_sect -> type_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 82: // abc_decl_sect -> var_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 83: // int_proc_header -> attribute_declarations, proc_header
{  
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
			(CurrentSemanticValue.td as procedure_header).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
        }
        break;
      case 84: // int_proc_header -> attribute_declarations, proc_header, tkForward, tkSemiColon
{  
			CurrentSemanticValue.td = NewProcedureHeader(ValueStack[ValueStack.Depth-4].stn as attribute_list, ValueStack[ValueStack.Depth-3].td as procedure_header, ValueStack[ValueStack.Depth-2].id as procedure_attribute, CurrentLocationSpan);
		}
        break;
      case 85: // int_func_header -> attribute_declarations, func_header
{  
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
			(CurrentSemanticValue.td as procedure_header).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
        }
        break;
      case 86: // int_func_header -> attribute_declarations, func_header, tkForward, tkSemiColon
{  
			CurrentSemanticValue.td = NewProcedureHeader(ValueStack[ValueStack.Depth-4].stn as attribute_list, ValueStack[ValueStack.Depth-3].td as procedure_header, ValueStack[ValueStack.Depth-2].id as procedure_attribute, CurrentLocationSpan);
		}
        break;
      case 87: // label_decl_sect -> tkLabel, label_list, tkSemiColon
{ 
			CurrentSemanticValue.stn = new label_definitions(ValueStack[ValueStack.Depth-2].stn as ident_list, CurrentLocationSpan); 
		}
        break;
      case 88: // label_list -> label_name
{ 
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 89: // label_list -> label_list, tkComma, label_name
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 90: // label_name -> tkInteger
{ 
			CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].ex.ToString(), CurrentLocationSpan);
		}
        break;
      case 91: // label_name -> tkFloat
{ 
			CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].ex.ToString(), CurrentLocationSpan);  
		}
        break;
      case 92: // label_name -> identifier
{ 
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 93: // const_decl_sect -> tkConst, const_decl
{ 
			CurrentSemanticValue.stn = new consts_definitions_list(ValueStack[ValueStack.Depth-1].stn as const_definition, CurrentLocationSpan);
		}
        break;
      case 94: // const_decl_sect -> const_decl_sect, const_decl
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as consts_definitions_list).Add(ValueStack[ValueStack.Depth-1].stn as const_definition, CurrentLocationSpan);
		}
        break;
      case 95: // res_str_decl_sect -> tkResourceString, const_decl
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 96: // res_str_decl_sect -> res_str_decl_sect, const_decl
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; 
		}
        break;
      case 97: // type_decl_sect -> tkType, type_decl
{ 
            CurrentSemanticValue.stn = new type_declarations(ValueStack[ValueStack.Depth-1].stn as type_declaration, CurrentLocationSpan);
		}
        break;
      case 98: // type_decl_sect -> type_decl_sect, type_decl
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as type_declarations).Add(ValueStack[ValueStack.Depth-1].stn as type_declaration, CurrentLocationSpan);
		}
        break;
      case 99: // var_decl_sect -> tkVar, var_decl
{ 
			CurrentSemanticValue.stn = new variable_definitions(ValueStack[ValueStack.Depth-1].stn as var_def_statement, CurrentLocationSpan);
		}
        break;
      case 100: // var_decl_sect -> tkEvent, var_decl
{ 
			CurrentSemanticValue.stn = new variable_definitions(ValueStack[ValueStack.Depth-1].stn as var_def_statement, CurrentLocationSpan);                        
			(ValueStack[ValueStack.Depth-1].stn as var_def_statement).is_event = true;
        }
        break;
      case 101: // var_decl_sect -> var_decl_sect, var_decl
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as variable_definitions).Add(ValueStack[ValueStack.Depth-1].stn as var_def_statement, CurrentLocationSpan);
		}
        break;
      case 102: // const_decl -> only_const_decl, tkSemiColon
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 103: // only_const_decl -> const_name, tkEqual, init_const_expr
{ 
			CurrentSemanticValue.stn = new simple_const_definition(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 104: // only_const_decl -> const_name, tkColon, type_ref, tkEqual, typed_const
{ 
			CurrentSemanticValue.stn = new typed_const_definition(ValueStack[ValueStack.Depth-5].id, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-3].td, CurrentLocationSpan);
		}
        break;
      case 105: // init_const_expr -> const_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 106: // init_const_expr -> array_const
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 107: // const_name -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 108: // expr_l1_list -> expr_l1
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 109: // expr_l1_list -> expr_l1_list, tkComma, expr_l1
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 110: // const_expr -> const_simple_expr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 111: // const_expr -> identifier, tkArrow, lambda_function_body
{  
			var idList = new ident_list(ValueStack[ValueStack.Depth-3].id, LocationStack[LocationStack.Depth-3]); 
			var formalPars = new formal_parameters(new typed_parameters(idList, new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null), parametr_kind.none, null, LocationStack[LocationStack.Depth-3]), LocationStack[LocationStack.Depth-3]);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null), ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 112: // const_expr -> tkRoundOpen, tkRoundClose, lambda_type_ref, tkArrow, 
                //               lambda_function_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 113: // const_expr -> tkRoundOpen, typed_const_list, tkRoundClose, tkArrow, 
                //               lambda_function_body
{  
		    var el = ValueStack[ValueStack.Depth-4].stn as expression_list;
		    var cnt = el.expressions.Count;
		    
			var idList = new ident_list();
			idList.source_context = LocationStack[LocationStack.Depth-4];
			
			for (int j = 0; j < cnt; j++)
			{
				if (!(el.expressions[j] is ident))
					parsertools.AddErrorFromResource("ONE_TKIDENTIFIER",el.expressions[j].source_context);
				idList.idents.Add(el.expressions[j] as ident);
			}	
				
			var any = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);	
				
			var formalPars = new formal_parameters(new typed_parameters(idList, any, parametr_kind.none, null, LocationStack[LocationStack.Depth-4]), LocationStack[LocationStack.Depth-4]);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, any, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 114: // const_expr -> const_simple_expr, const_relop, const_simple_expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 115: // const_expr -> question_constexpr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 116: // question_constexpr -> const_expr, tkQuestion, const_expr, tkColon, const_expr
{ CurrentSemanticValue.ex = new question_colon_expression(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); }
        break;
      case 117: // const_relop -> tkEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 118: // const_relop -> tkNotEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 119: // const_relop -> tkLower
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 120: // const_relop -> tkGreater
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 121: // const_relop -> tkLowerEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 122: // const_relop -> tkGreaterEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 123: // const_relop -> tkIn
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 124: // const_simple_expr -> const_term
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 125: // const_simple_expr -> const_simple_expr, const_addop, const_term
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 126: // const_addop -> tkPlus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 127: // const_addop -> tkMinus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 128: // const_addop -> tkOr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 129: // const_addop -> tkXor
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 130: // as_is_constexpr -> const_term, typecast_op, simple_or_template_type_reference
{ 
			CurrentSemanticValue.ex = NewAsIsConstexpr(ValueStack[ValueStack.Depth-3].ex, (op_typecast)ValueStack[ValueStack.Depth-2].ob, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);                                
		}
        break;
      case 131: // const_term -> const_factor
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 132: // const_term -> as_is_constexpr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 133: // const_term -> const_term, const_mulop, const_factor
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 134: // const_mulop -> tkStar
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 135: // const_mulop -> tkSlash
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 136: // const_mulop -> tkDiv
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 137: // const_mulop -> tkMod
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 138: // const_mulop -> tkShl
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 139: // const_mulop -> tkShr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 140: // const_mulop -> tkAnd
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 141: // const_factor -> const_variable
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 142: // const_factor -> const_set
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 143: // const_factor -> unsigned_number
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 144: // const_factor -> literal
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 145: // const_factor -> tkNil
{ 
			CurrentSemanticValue.ex = new nil_const();  
			CurrentSemanticValue.ex.source_context = CurrentLocationSpan;
		}
        break;
      case 146: // const_factor -> tkAddressOf, const_factor
{ 
			CurrentSemanticValue.ex = new get_address(ValueStack[ValueStack.Depth-1].ex as addressed_value, CurrentLocationSpan);  
		}
        break;
      case 147: // const_factor -> tkRoundOpen, const_expr, tkRoundClose
{ 
	 	    CurrentSemanticValue.ex = new bracket_expr(ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan); 
		}
        break;
      case 148: // const_factor -> tkNot, const_factor
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 149: // const_factor -> sign, const_factor
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 150: // const_factor -> tkDeref, const_factor
{ 
			CurrentSemanticValue.ex = new roof_dereference(ValueStack[ValueStack.Depth-1].ex as addressed_value, CurrentLocationSpan);
		}
        break;
      case 151: // const_set -> tkSquareOpen, const_elem_list, tkSquareClose
{ 
			CurrentSemanticValue.ex = new pascal_set_constant(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan); 
		}
        break;
      case 152: // sign -> tkPlus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 153: // sign -> tkMinus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 154: // const_variable -> identifier
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 155: // const_variable -> sizeof_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 156: // const_variable -> typeof_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 157: // const_variable -> const_variable, const_variable_2
{
			CurrentSemanticValue.ex = NewConstVariable(ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
        }
        break;
      case 158: // const_variable_2 -> tkPoint, identifier_or_keyword
{ 
			CurrentSemanticValue.ex = new dot_node(null, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 159: // const_variable_2 -> tkDeref
{ 
			CurrentSemanticValue.ex = new roof_dereference();  
			CurrentSemanticValue.ex.source_context = CurrentLocationSpan;
		}
        break;
      case 160: // const_variable_2 -> tkRoundOpen, optional_const_func_expr_list, tkRoundClose
{ 
			CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);  
		}
        break;
      case 161: // const_variable_2 -> tkSquareOpen, const_elem_list, tkSquareClose
{ 
			CurrentSemanticValue.ex = new indexer(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);  
		}
        break;
      case 162: // optional_const_func_expr_list -> const_func_expr_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 163: // optional_const_func_expr_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 164: // const_func_expr_list -> const_expr
{ 	
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 165: // const_func_expr_list -> const_func_expr_list, tkComma, const_expr
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 166: // const_elem_list -> const_elem_list1
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 168: // const_elem_list1 -> const_elem
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 169: // const_elem_list1 -> const_elem_list1, tkComma, const_elem
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 170: // const_elem -> const_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 171: // const_elem -> const_expr, tkDotDot, const_expr
{ 
			CurrentSemanticValue.ex = new diapason_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 172: // unsigned_number -> tkInteger
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 173: // unsigned_number -> tkHex
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 174: // unsigned_number -> tkFloat
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 175: // typed_const -> const_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 176: // typed_const -> array_const
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 177: // typed_const -> record_const
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 178: // array_const -> tkRoundOpen, typed_const_list, tkRoundClose
{ 
			CurrentSemanticValue.ex = new array_const(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan); 
		}
        break;
      case 179: // array_const -> tkRoundOpen, record_const, tkRoundClose
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex; }
        break;
      case 180: // array_const -> tkRoundOpen, array_const, tkRoundClose
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex; }
        break;
      case 182: // typed_const_list -> typed_const_list1
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 183: // typed_const_list1 -> typed_const_or_new
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
        }
        break;
      case 184: // typed_const_list1 -> typed_const_list1, tkComma, typed_const_or_new
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 185: // record_const -> tkRoundOpen, const_field_list, tkRoundClose
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex;
			CurrentSemanticValue.ex.source_context = CurrentLocationSpan;
		}
        break;
      case 186: // const_field_list -> const_field_list_1
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 187: // const_field_list -> const_field_list_1, tkSemiColon
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex; }
        break;
      case 188: // const_field_list_1 -> const_field
{ 
			CurrentSemanticValue.ex = new record_const(ValueStack[ValueStack.Depth-1].stn as record_const_definition, CurrentLocationSpan);
		}
        break;
      case 189: // const_field_list_1 -> const_field_list_1, tkSemiColon, const_field
{ 
			CurrentSemanticValue.ex = (ValueStack[ValueStack.Depth-3].ex as record_const).Add(ValueStack[ValueStack.Depth-1].stn as record_const_definition, CurrentLocationSpan);
		}
        break;
      case 190: // const_field -> const_field_name, tkColon, typed_const
{ 
			CurrentSemanticValue.stn = new record_const_definition(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 191: // const_field_name -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 192: // type_decl -> attribute_declarations, simple_type_decl
{  
			(ValueStack[ValueStack.Depth-1].stn as declaration).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
			CurrentSemanticValue.stn.source_context = LocationStack[LocationStack.Depth-1];
        }
        break;
      case 193: // attribute_declarations -> attribute_declaration
{ 
			CurrentSemanticValue.stn = new attribute_list(ValueStack[ValueStack.Depth-1].stn as simple_attribute_list, CurrentLocationSpan);
    }
        break;
      case 194: // attribute_declarations -> attribute_declarations, attribute_declaration
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as attribute_list).Add(ValueStack[ValueStack.Depth-1].stn as simple_attribute_list, CurrentLocationSpan);
		}
        break;
      case 195: // attribute_declarations -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 196: // attribute_declaration -> tkSquareOpen, one_or_some_attribute, tkSquareClose
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 197: // one_or_some_attribute -> one_attribute
{ 
			CurrentSemanticValue.stn = new simple_attribute_list(ValueStack[ValueStack.Depth-1].stn as attribute, CurrentLocationSpan);
		}
        break;
      case 198: // one_or_some_attribute -> one_or_some_attribute, tkComma, one_attribute
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as simple_attribute_list).Add(ValueStack[ValueStack.Depth-1].stn as attribute, CurrentLocationSpan);
		}
        break;
      case 199: // one_attribute -> attribute_variable
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 200: // one_attribute -> identifier, tkColon, attribute_variable
{  
			(ValueStack[ValueStack.Depth-1].stn as attribute).qualifier = ValueStack[ValueStack.Depth-3].id;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
        }
        break;
      case 201: // simple_type_decl -> type_decl_identifier, tkEqual, type_decl_type, tkSemiColon
{ 
			CurrentSemanticValue.stn = new type_declaration(ValueStack[ValueStack.Depth-4].id, ValueStack[ValueStack.Depth-2].td, CurrentLocationSpan); 
		}
        break;
      case 202: // simple_type_decl -> template_identifier_with_equal, type_decl_type, tkSemiColon
{ 
			CurrentSemanticValue.stn = new type_declaration(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-2].td, CurrentLocationSpan); 
		}
        break;
      case 203: // type_decl_identifier -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 204: // type_decl_identifier -> identifier, template_arguments
{ 
			CurrentSemanticValue.id = new template_type_name(ValueStack[ValueStack.Depth-2].id.name, ValueStack[ValueStack.Depth-1].stn as ident_list, CurrentLocationSpan); 
        }
        break;
      case 205: // template_identifier_with_equal -> identifier, tkLower, ident_list, 
                //                                   tkGreaterEqual
{ 
			CurrentSemanticValue.id = new template_type_name(ValueStack[ValueStack.Depth-4].id.name, ValueStack[ValueStack.Depth-2].stn as ident_list, CurrentLocationSpan); 
        }
        break;
      case 206: // type_decl_type -> type_ref
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 207: // type_decl_type -> object_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 208: // type_ref -> simple_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 209: // type_ref -> string_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 210: // type_ref -> pointer_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 211: // type_ref -> structured_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 212: // type_ref -> procedural_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 213: // type_ref -> template_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 214: // template_type -> simple_type_identifier, template_type_params
{ 
			CurrentSemanticValue.td = new template_type_reference(ValueStack[ValueStack.Depth-2].td as named_type_reference, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan); 
		}
        break;
      case 215: // template_type_params -> tkLower, template_param_list, tkGreater
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 216: // template_param_list -> template_param
{ 
			CurrentSemanticValue.stn = new template_param_list(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 217: // template_param_list -> template_param_list, tkComma, template_param
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as template_param_list).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 218: // template_param -> simple_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 219: // template_param -> structured_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 220: // template_param -> procedural_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 221: // template_param -> template_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 222: // simple_type -> range_expr
{
	    	CurrentSemanticValue.td = parsertools.ConvertDotNodeOrIdentToNamedTypeReference(ValueStack[ValueStack.Depth-1].ex); 
	    }
        break;
      case 223: // simple_type -> range_expr, tkDotDot, range_expr
{ 
			CurrentSemanticValue.td = new diapason(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 224: // simple_type -> tkRoundOpen, enumeration_id_list, tkRoundClose
{ 
			CurrentSemanticValue.td = new enum_type_definition(ValueStack[ValueStack.Depth-2].stn as enumerator_list, CurrentLocationSpan);  
		}
        break;
      case 225: // range_expr -> range_term
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 226: // range_expr -> range_expr, const_addop, range_term
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 227: // range_term -> range_factor
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 228: // range_term -> range_term, const_mulop, range_factor
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 229: // range_factor -> simple_type_identifier
{ 
			CurrentSemanticValue.ex = parsertools.ConvertNamedTypeReferenceToDotNodeOrIdent(ValueStack[ValueStack.Depth-1].td as named_type_reference);
        }
        break;
      case 230: // range_factor -> unsigned_number
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 231: // range_factor -> sign, range_factor
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 232: // range_factor -> literal
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 233: // range_factor -> range_factor, tkRoundOpen, const_elem_list, tkRoundClose
{ 
			CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-4].ex as addressed_value, ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
        }
        break;
      case 234: // simple_type_identifier -> identifier
{ 
			CurrentSemanticValue.td = new named_type_reference(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 235: // simple_type_identifier -> simple_type_identifier, tkPoint, 
                //                           identifier_or_keyword
{ 
			CurrentSemanticValue.td = (ValueStack[ValueStack.Depth-3].td as named_type_reference).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 236: // enumeration_id_list -> enumeration_id, tkComma, enumeration_id
{ 
			CurrentSemanticValue.stn = new enumerator_list(ValueStack[ValueStack.Depth-3].stn as enumerator, CurrentLocationSpan);
			(CurrentSemanticValue.stn as enumerator_list).Add(ValueStack[ValueStack.Depth-1].stn as enumerator, CurrentLocationSpan);
        }
        break;
      case 237: // enumeration_id_list -> enumeration_id_list, tkComma, enumeration_id
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as enumerator_list).Add(ValueStack[ValueStack.Depth-1].stn as enumerator, CurrentLocationSpan);
        }
        break;
      case 238: // enumeration_id -> type_ref
{ 
			CurrentSemanticValue.stn = new enumerator(ValueStack[ValueStack.Depth-1].td, null, CurrentLocationSpan); 
		}
        break;
      case 239: // enumeration_id -> type_ref, tkEqual, expr
{ 
			CurrentSemanticValue.stn = new enumerator(ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 240: // pointer_type -> tkDeref, fptype
{ 
			CurrentSemanticValue.td = new ref_type(ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);
		}
        break;
      case 241: // structured_type -> unpacked_structured_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 242: // structured_type -> tkPacked, unpacked_structured_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 243: // unpacked_structured_type -> array_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 244: // unpacked_structured_type -> record_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 245: // unpacked_structured_type -> set_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 246: // unpacked_structured_type -> file_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 247: // unpacked_structured_type -> sequence_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 248: // sequence_type -> tkSequence, tkOf, type_ref
{
			CurrentSemanticValue.td = new sequence_type(ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);
		}
        break;
      case 249: // array_type -> tkArray, tkSquareOpen, simple_type_list, tkSquareClose, tkOf, 
                //               type_ref
{ 
			CurrentSemanticValue.td = new array_type(ValueStack[ValueStack.Depth-4].stn as indexers_types, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
        }
        break;
      case 250: // array_type -> unsized_array_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 251: // unsized_array_type -> tkArray, tkOf, type_ref
{ 
			CurrentSemanticValue.td = new array_type(null, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
        }
        break;
      case 252: // simple_type_list -> simple_type_or_
{ 
			CurrentSemanticValue.stn = new indexers_types(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
        }
        break;
      case 253: // simple_type_list -> simple_type_list, tkComma, simple_type_or_
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as indexers_types).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
        }
        break;
      case 254: // simple_type_or_ -> simple_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 255: // simple_type_or_ -> /* empty */
{ CurrentSemanticValue.td = null; }
        break;
      case 256: // set_type -> tkSet, tkOf, simple_type
{ 
			CurrentSemanticValue.td = new set_type_definition(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
		}
        break;
      case 257: // file_type -> tkFile, tkOf, type_ref
{ 
			CurrentSemanticValue.td = new file_type(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 258: // file_type -> tkFile
{ 
			CurrentSemanticValue.td = new file_type();  
			CurrentSemanticValue.td.source_context = CurrentLocationSpan;
		}
        break;
      case 259: // string_type -> tkIdentifier, tkSquareOpen, const_expr, tkSquareClose
{ 
			CurrentSemanticValue.td = new string_num_definition(ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-4].id, CurrentLocationSpan);
		}
        break;
      case 260: // procedural_type -> procedural_type_kind
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 261: // procedural_type_kind -> proc_type_decl
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 262: // proc_type_decl -> tkProcedure, fp_list
{ 
			CurrentSemanticValue.td = new procedure_header(ValueStack[ValueStack.Depth-1].stn as formal_parameters,null,null,false,false,null,null,CurrentLocationSpan);
        }
        break;
      case 263: // proc_type_decl -> tkFunction, fp_list
{
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-1].stn as formal_parameters, null, null, null, null, CurrentLocationSpan);
		}
        break;
      case 264: // proc_type_decl -> tkFunction, fp_list, tkColon, fptype
{ 
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-3].stn as formal_parameters, null, null, null, ValueStack[ValueStack.Depth-1].td as type_definition, CurrentLocationSpan);
        }
        break;
      case 265: // proc_type_decl -> simple_type_identifier, tkArrow, template_param
{
    		CurrentSemanticValue.td = new modern_proc_type(ValueStack[ValueStack.Depth-3].td,null,ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);            
    	}
        break;
      case 266: // proc_type_decl -> template_type, tkArrow, template_param
{
    		CurrentSemanticValue.td = new modern_proc_type(ValueStack[ValueStack.Depth-3].td,null,ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);            
    	}
        break;
      case 267: // proc_type_decl -> tkRoundOpen, tkRoundClose, tkArrow, template_param
{
    		CurrentSemanticValue.td = new modern_proc_type(null,null,ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);
    	}
        break;
      case 268: // proc_type_decl -> tkRoundOpen, enumeration_id_list, tkRoundClose, tkArrow, 
                //                   template_param
{
    		CurrentSemanticValue.td = new modern_proc_type(null,ValueStack[ValueStack.Depth-4].stn as enumerator_list,ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);
    	}
        break;
      case 269: // proc_type_decl -> simple_type_identifier, tkArrow, tkRoundOpen, tkRoundClose
{
    		CurrentSemanticValue.td = new modern_proc_type(ValueStack[ValueStack.Depth-4].td,null,null,CurrentLocationSpan);
    	}
        break;
      case 270: // proc_type_decl -> template_type, tkArrow, tkRoundOpen, tkRoundClose
{
    		CurrentSemanticValue.td = new modern_proc_type(ValueStack[ValueStack.Depth-4].td,null,null,CurrentLocationSpan);
    	}
        break;
      case 271: // proc_type_decl -> tkRoundOpen, tkRoundClose, tkArrow, tkRoundOpen, tkRoundClose
{
    		CurrentSemanticValue.td = new modern_proc_type(null,null,null,CurrentLocationSpan);
    	}
        break;
      case 272: // proc_type_decl -> tkRoundOpen, enumeration_id_list, tkRoundClose, tkArrow, 
                //                   tkRoundOpen, tkRoundClose
{
    		CurrentSemanticValue.td = new modern_proc_type(null,ValueStack[ValueStack.Depth-5].stn as enumerator_list,null,CurrentLocationSpan);
    	}
        break;
      case 273: // object_type -> class_attributes, class_or_interface_keyword, 
                //                optional_base_classes, optional_where_section, 
                //                optional_component_list_seq_end
{ 
			CurrentSemanticValue.td = NewObjectType((class_attribute)ValueStack[ValueStack.Depth-5].ob, ValueStack[ValueStack.Depth-4].ti, ValueStack[ValueStack.Depth-3].stn as named_type_reference_list, ValueStack[ValueStack.Depth-2].stn as where_definition_list, ValueStack[ValueStack.Depth-1].stn as class_body, CurrentLocationSpan);
		}
        break;
      case 274: // record_type -> tkRecord, optional_base_classes, optional_where_section, 
                //                member_list_section, tkEnd
{ 
			CurrentSemanticValue.td = NewRecordType(ValueStack[ValueStack.Depth-4].stn as named_type_reference_list, ValueStack[ValueStack.Depth-3].stn as where_definition_list, ValueStack[ValueStack.Depth-2].stn as class_body, CurrentLocationSpan);
		}
        break;
      case 275: // class_attribute -> tkSealed
{ CurrentSemanticValue.ob = class_attribute.Sealed; }
        break;
      case 276: // class_attribute -> tkPartial
{ CurrentSemanticValue.ob = class_attribute.Partial; }
        break;
      case 277: // class_attribute -> tkAbstract
{ CurrentSemanticValue.ob = class_attribute.Abstract; }
        break;
      case 278: // class_attribute -> tkAuto
{ CurrentSemanticValue.ob = class_attribute.Auto; }
        break;
      case 279: // class_attributes -> /* empty */
{ 
			CurrentSemanticValue.ob = class_attribute.None; 
		}
        break;
      case 280: // class_attributes -> class_attributes1
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ob;
		}
        break;
      case 281: // class_attributes1 -> class_attribute
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ob;
		}
        break;
      case 282: // class_attributes1 -> class_attributes1, class_attribute
{
			ValueStack[ValueStack.Depth-2].ob = ((class_attribute)ValueStack[ValueStack.Depth-2].ob) | ((class_attribute)ValueStack[ValueStack.Depth-1].ob);
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-2].ob;
		}
        break;
      case 283: // class_or_interface_keyword -> tkClass
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 284: // class_or_interface_keyword -> tkInterface
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 285: // class_or_interface_keyword -> tkTemplate
{ 
			CurrentSemanticValue.ti = NewClassOrInterfaceKeyword(ValueStack[ValueStack.Depth-1].ti);
		}
        break;
      case 286: // class_or_interface_keyword -> tkTemplate, tkClass
{ 
			CurrentSemanticValue.ti = NewClassOrInterfaceKeyword(ValueStack[ValueStack.Depth-2].ti, "c", CurrentLocationSpan);
		}
        break;
      case 287: // class_or_interface_keyword -> tkTemplate, tkRecord
{ 
			CurrentSemanticValue.ti = NewClassOrInterfaceKeyword(ValueStack[ValueStack.Depth-2].ti, "r", CurrentLocationSpan);
		}
        break;
      case 288: // class_or_interface_keyword -> tkTemplate, tkInterface
{ 
			CurrentSemanticValue.ti = NewClassOrInterfaceKeyword(ValueStack[ValueStack.Depth-2].ti, "i", CurrentLocationSpan);
		}
        break;
      case 289: // optional_component_list_seq_end -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 290: // optional_component_list_seq_end -> member_list_section, tkEnd
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 292: // optional_base_classes -> tkRoundOpen, base_classes_names_list, tkRoundClose
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 293: // base_classes_names_list -> base_class_name
{ 
			CurrentSemanticValue.stn = new named_type_reference_list(ValueStack[ValueStack.Depth-1].stn as named_type_reference, CurrentLocationSpan);
		}
        break;
      case 294: // base_classes_names_list -> base_classes_names_list, tkComma, base_class_name
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as named_type_reference_list).Add(ValueStack[ValueStack.Depth-1].stn as named_type_reference, CurrentLocationSpan);
		}
        break;
      case 295: // base_class_name -> simple_type_identifier
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 296: // base_class_name -> template_type
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 297: // template_arguments -> tkLower, ident_list, tkGreater
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 298: // optional_where_section -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 299: // optional_where_section -> where_part_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 300: // where_part_list -> where_part
{ 
			CurrentSemanticValue.stn = new where_definition_list(ValueStack[ValueStack.Depth-1].stn as where_definition, CurrentLocationSpan);
		}
        break;
      case 301: // where_part_list -> where_part_list, where_part
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as where_definition_list).Add(ValueStack[ValueStack.Depth-1].stn as where_definition, CurrentLocationSpan);
		}
        break;
      case 302: // where_part -> tkWhere, ident_list, tkColon, type_ref_and_secific_list, 
                //               tkSemiColon
{ 
			CurrentSemanticValue.stn = new where_definition(ValueStack[ValueStack.Depth-4].stn as ident_list, ValueStack[ValueStack.Depth-2].stn as where_type_specificator_list, CurrentLocationSpan); 
		}
        break;
      case 303: // type_ref_and_secific_list -> type_ref_or_secific
{ 
			CurrentSemanticValue.stn = new where_type_specificator_list(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 304: // type_ref_and_secific_list -> type_ref_and_secific_list, tkComma, 
                //                              type_ref_or_secific
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as where_type_specificator_list).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 305: // type_ref_or_secific -> type_ref
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 306: // type_ref_or_secific -> tkClass
{ 
			CurrentSemanticValue.td = new declaration_specificator(DeclarationSpecificator.WhereDefClass, ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); 
		}
        break;
      case 307: // type_ref_or_secific -> tkRecord
{ 
			CurrentSemanticValue.td = new declaration_specificator(DeclarationSpecificator.WhereDefValueType, ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); 
		}
        break;
      case 308: // type_ref_or_secific -> tkConstructor
{ 
			CurrentSemanticValue.td = new declaration_specificator(DeclarationSpecificator.WhereDefConstructor, ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); 
		}
        break;
      case 309: // member_list_section -> member_list
{ 
			CurrentSemanticValue.stn = new class_body(ValueStack[ValueStack.Depth-1].stn as class_members, CurrentLocationSpan);
        }
        break;
      case 310: // member_list_section -> member_list_section, ot_visibility_specifier, 
                //                        member_list
{ 
		    (ValueStack[ValueStack.Depth-1].stn as class_members).access_mod = ValueStack[ValueStack.Depth-2].stn as access_modifer_node;
			(ValueStack[ValueStack.Depth-3].stn as class_body).Add(ValueStack[ValueStack.Depth-1].stn as class_members,CurrentLocationSpan);
			
			if ((ValueStack[ValueStack.Depth-3].stn as class_body).class_def_blocks[0].members.Count == 0)
                (ValueStack[ValueStack.Depth-3].stn as class_body).class_def_blocks.RemoveAt(0);
			
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-3].stn;
        }
        break;
      case 311: // ot_visibility_specifier -> tkInternal
{ CurrentSemanticValue.stn = new access_modifer_node(access_modifer.internal_modifer, CurrentLocationSpan); }
        break;
      case 312: // ot_visibility_specifier -> tkPublic
{ CurrentSemanticValue.stn = new access_modifer_node(access_modifer.public_modifer, CurrentLocationSpan); }
        break;
      case 313: // ot_visibility_specifier -> tkProtected
{ CurrentSemanticValue.stn = new access_modifer_node(access_modifer.protected_modifer, CurrentLocationSpan); }
        break;
      case 314: // ot_visibility_specifier -> tkPrivate
{ CurrentSemanticValue.stn = new access_modifer_node(access_modifer.private_modifer, CurrentLocationSpan); }
        break;
      case 315: // member_list -> /* empty */
{ CurrentSemanticValue.stn = new class_members(); }
        break;
      case 316: // member_list -> field_or_const_definition_list, optional_semicolon
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 317: // member_list -> method_decl_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 318: // member_list -> field_or_const_definition_list, tkSemiColon, method_decl_list
{  
			(ValueStack[ValueStack.Depth-3].stn as class_members).members.AddRange((ValueStack[ValueStack.Depth-1].stn as class_members).members);
			(ValueStack[ValueStack.Depth-3].stn as class_members).source_context = CurrentLocationSpan;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-3].stn;
        }
        break;
      case 319: // ident_list -> identifier
{ 
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 320: // ident_list -> ident_list, tkComma, identifier
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 321: // optional_semicolon -> /* empty */
{ CurrentSemanticValue.ob = null; }
        break;
      case 322: // optional_semicolon -> tkSemiColon
{ CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 323: // field_or_const_definition_list -> field_or_const_definition
{ 
			CurrentSemanticValue.stn = new class_members(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 324: // field_or_const_definition_list -> field_or_const_definition_list, tkSemiColon, 
                //                                   field_or_const_definition
{   
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as class_members).Add(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 325: // field_or_const_definition -> attribute_declarations, 
                //                              simple_field_or_const_definition
{  
		    (ValueStack[ValueStack.Depth-1].stn as declaration).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
        }
        break;
      case 326: // method_decl_list -> method_or_property_decl
{ 
			CurrentSemanticValue.stn = new class_members(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 327: // method_decl_list -> method_decl_list, method_or_property_decl
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as class_members).Add(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 328: // method_or_property_decl -> method_decl_withattr
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 329: // method_or_property_decl -> property_definition
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 330: // simple_field_or_const_definition -> tkConst, only_const_decl
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 331: // simple_field_or_const_definition -> field_definition
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 332: // simple_field_or_const_definition -> tkClass, field_definition
{ 
			(ValueStack[ValueStack.Depth-1].stn as var_def_statement).var_attr = definition_attribute.Static;
			(ValueStack[ValueStack.Depth-1].stn as var_def_statement).source_context = CurrentLocationSpan;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
        }
        break;
      case 333: // field_definition -> var_decl_part
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 334: // field_definition -> tkEvent, ident_list, tkColon, type_ref
{ 
			CurrentSemanticValue.stn = new var_def_statement(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, null, definition_attribute.None, true, CurrentLocationSpan); 
        }
        break;
      case 335: // method_decl_withattr -> attribute_declarations, method_header
{  
			(ValueStack[ValueStack.Depth-1].td as declaration).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].td;
        }
        break;
      case 336: // method_decl_withattr -> attribute_declarations, method_decl
{  
			(ValueStack[ValueStack.Depth-1].stn as declaration).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
     }
        break;
      case 337: // method_decl -> inclass_proc_func_decl
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 338: // method_decl -> inclass_constr_destr_decl
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 339: // method_header -> tkClass, method_procfunc_header
{ 
			(ValueStack[ValueStack.Depth-1].td as procedure_header).class_keyword = true;
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
		}
        break;
      case 340: // method_header -> method_procfunc_header
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 341: // method_header -> constr_destr_header
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 342: // method_procfunc_header -> proc_func_header
{ 
			CurrentSemanticValue.td = NewProcfuncHeading(ValueStack[ValueStack.Depth-1].td as procedure_header);
		}
        break;
      case 343: // proc_func_header -> proc_header
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 344: // proc_func_header -> func_header
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 345: // constr_destr_header -> tkConstructor, optional_proc_name, fp_list, 
                //                        optional_method_modificators
{ 
			CurrentSemanticValue.td = new constructor(null,ValueStack[ValueStack.Depth-2].stn as formal_parameters,ValueStack[ValueStack.Depth-1].stn as procedure_attributes_list,ValueStack[ValueStack.Depth-3].stn as method_name,false,false,null,null,CurrentLocationSpan);
        }
        break;
      case 346: // constr_destr_header -> tkClass, tkConstructor, optional_proc_name, fp_list, 
                //                        optional_method_modificators
{ 
			CurrentSemanticValue.td = new constructor(null,ValueStack[ValueStack.Depth-2].stn as formal_parameters,ValueStack[ValueStack.Depth-1].stn as procedure_attributes_list,ValueStack[ValueStack.Depth-3].stn as method_name,false,true,null,null,CurrentLocationSpan);
        }
        break;
      case 347: // constr_destr_header -> tkDestructor, optional_proc_name, fp_list, 
                //                        optional_method_modificators
{ 
			CurrentSemanticValue.td = new destructor(null,ValueStack[ValueStack.Depth-2].stn as formal_parameters,ValueStack[ValueStack.Depth-1].stn as procedure_attributes_list,ValueStack[ValueStack.Depth-3].stn as method_name, false,false,null,null,CurrentLocationSpan);
        }
        break;
      case 348: // optional_proc_name -> proc_name
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 349: // optional_proc_name -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 350: // qualified_identifier -> identifier
{ CurrentSemanticValue.stn = new method_name(null,null,ValueStack[ValueStack.Depth-1].id,null,CurrentLocationSpan); }
        break;
      case 351: // qualified_identifier -> visibility_specifier
{ CurrentSemanticValue.stn = new method_name(null,null,ValueStack[ValueStack.Depth-1].id,null,CurrentLocationSpan); }
        break;
      case 352: // qualified_identifier -> qualified_identifier, tkPoint, identifier
{
			CurrentSemanticValue.stn = NewQualifiedIdentifier(ValueStack[ValueStack.Depth-3].stn as method_name, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
        }
        break;
      case 353: // qualified_identifier -> qualified_identifier, tkPoint, visibility_specifier
{
			CurrentSemanticValue.stn = NewQualifiedIdentifier(ValueStack[ValueStack.Depth-3].stn as method_name, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
        }
        break;
      case 354: // property_definition -> attribute_declarations, simple_prim_property_definition
{  
			CurrentSemanticValue.stn = NewPropertyDefinition(ValueStack[ValueStack.Depth-2].stn as attribute_list, ValueStack[ValueStack.Depth-1].stn as declaration, LocationStack[LocationStack.Depth-1]);
        }
        break;
      case 355: // simple_prim_property_definition -> simple_property_definition
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 356: // simple_prim_property_definition -> tkClass, simple_property_definition
{ 
			CurrentSemanticValue.stn = NewSimplePrimPropertyDefinition(ValueStack[ValueStack.Depth-1].stn as simple_property, CurrentLocationSpan);
        }
        break;
      case 357: // simple_property_definition -> tkProperty, qualified_identifier, 
                //                               property_interface, property_specifiers, 
                //                               tkSemiColon, array_defaultproperty
{ 
			CurrentSemanticValue.stn = NewSimplePropertyDefinition(ValueStack[ValueStack.Depth-5].stn as method_name, ValueStack[ValueStack.Depth-4].stn as property_interface, ValueStack[ValueStack.Depth-3].stn as property_accessors, ValueStack[ValueStack.Depth-1].stn as property_array_default, CurrentLocationSpan);
        }
        break;
      case 358: // array_defaultproperty -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 359: // array_defaultproperty -> tkDefault, tkSemiColon
{ 
			CurrentSemanticValue.stn = new property_array_default();  
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 360: // property_interface -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 361: // property_interface -> property_parameter_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new property_interface(ValueStack[ValueStack.Depth-3].stn as property_parameter_list, ValueStack[ValueStack.Depth-1].td, null, CurrentLocationSpan);
        }
        break;
      case 362: // property_parameter_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 363: // property_parameter_list -> tkSquareOpen, parameter_decl_list, tkSquareClose
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 364: // parameter_decl_list -> parameter_decl
{ 
			CurrentSemanticValue.stn = new property_parameter_list(ValueStack[ValueStack.Depth-1].stn as property_parameter, CurrentLocationSpan);
		}
        break;
      case 365: // parameter_decl_list -> parameter_decl_list, tkSemiColon, parameter_decl
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as property_parameter_list).Add(ValueStack[ValueStack.Depth-1].stn as property_parameter, CurrentLocationSpan);
		}
        break;
      case 366: // parameter_decl -> ident_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new property_parameter(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
		}
        break;
      case 367: // optional_identifier -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 368: // optional_identifier -> /* empty */
{ CurrentSemanticValue.id = null; }
        break;
      case 370: // property_specifiers -> tkRead, optional_identifier, property_specifiers
{ 
			CurrentSemanticValue.stn = NewPropertySpecifiersRead(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-2].id, ValueStack[ValueStack.Depth-1].stn as property_accessors, CurrentLocationSpan);
        }
        break;
      case 371: // property_specifiers -> tkWrite, optional_identifier, property_specifiers
{ 
			CurrentSemanticValue.stn = NewPropertySpecifiersWrite(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-2].id, ValueStack[ValueStack.Depth-1].stn as property_accessors, CurrentLocationSpan);
        }
        break;
      case 372: // var_decl -> var_decl_part, tkSemiColon
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 375: // var_decl_part -> ident_list, tkColon, type_ref
{ 
			CurrentSemanticValue.stn = new var_def_statement(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, null, definition_attribute.None, false, CurrentLocationSpan);
		}
        break;
      case 376: // var_decl_part -> ident_list, tkAssign, expr
{ 
			CurrentSemanticValue.stn = new var_def_statement(ValueStack[ValueStack.Depth-3].stn as ident_list, null, ValueStack[ValueStack.Depth-1].ex, definition_attribute.None, false, CurrentLocationSpan);		
		}
        break;
      case 377: // var_decl_part -> ident_list, tkColon, type_ref, tkAssignOrEqual, 
                //                  typed_const_or_new
{ 
			CurrentSemanticValue.stn = new var_def_statement(ValueStack[ValueStack.Depth-5].stn as ident_list, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].ex, definition_attribute.None, false, CurrentLocationSpan); 
		}
        break;
      case 378: // var_decl_part -> ident_list, tkColon, type_ref, tkAssignOrEqual, 
                //                  expl_func_decl_lambda
{
			CurrentSemanticValue.stn = new var_def_statement(ValueStack[ValueStack.Depth-5].stn as ident_list, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].ex, definition_attribute.None, false, CurrentLocationSpan);
		}
        break;
      case 379: // typed_const_or_new -> typed_const
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 380: // typed_const_or_new -> new_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 381: // typed_const_or_new -> default_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 382: // constr_destr_decl -> constr_destr_header, block
{ 
			CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, ValueStack[ValueStack.Depth-1].stn as block, CurrentLocationSpan);
        }
        break;
      case 383: // inclass_constr_destr_decl -> constr_destr_header, inclass_block
{ 
			CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, ValueStack[ValueStack.Depth-1].stn as block, CurrentLocationSpan);
        }
        break;
      case 384: // proc_func_decl -> proc_func_decl_noclass
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 385: // proc_func_decl -> tkClass, proc_func_decl_noclass
{ 
			(ValueStack[ValueStack.Depth-1].stn as procedure_definition).proc_header.class_keyword = true;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 386: // proc_func_decl_noclass -> proc_func_header, proc_func_external_block
{
            CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, ValueStack[ValueStack.Depth-1].stn as proc_block, CurrentLocationSpan);
        }
        break;
      case 387: // proc_func_decl_noclass -> tkFunction, func_name, fp_list, tkColon, fptype, 
                //                           optional_method_modificators1, tkAssign, relop_expr, 
                //                           tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortFuncDefinition(ValueStack[ValueStack.Depth-7].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-8].stn as method_name, ValueStack[ValueStack.Depth-5].td as type_definition, ValueStack[ValueStack.Depth-2].ex, LocationStack[LocationStack.Depth-9].Merge(LocationStack[LocationStack.Depth-5]));
		}
        break;
      case 388: // proc_func_decl_noclass -> tkFunction, func_name, fp_list, 
                //                           optional_method_modificators1, tkAssign, relop_expr, 
                //                           tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortFuncDefinition(ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-6].stn as method_name, null, ValueStack[ValueStack.Depth-2].ex, LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-5]));
		}
        break;
      case 389: // proc_func_decl_noclass -> tkProcedure, proc_name, fp_list, 
                //                           optional_method_modificators1, tkAssign, 
                //                           unlabelled_stmt, tkSemiColon
{
			if (ValueStack[ValueStack.Depth-2].stn is empty_statement)
				parsertools.AddErrorFromResource("EMPTY_STATEMENT_IN_SHORT_PROC_DEFINITION",LocationStack[LocationStack.Depth-2]);
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortProcDefinition(ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-6].stn as method_name, ValueStack[ValueStack.Depth-2].stn as statement, LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-5]));
		}
        break;
      case 390: // proc_func_decl_noclass -> proc_func_header, tkForward, tkSemiColon
{
			CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-3].td as procedure_header, null, CurrentLocationSpan);
            (CurrentSemanticValue.stn as procedure_definition).proc_header.proc_attributes.Add((procedure_attribute)ValueStack[ValueStack.Depth-2].id, ValueStack[ValueStack.Depth-2].id.source_context);
		}
        break;
      case 391: // inclass_proc_func_decl -> inclass_proc_func_decl_noclass
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 392: // inclass_proc_func_decl -> tkClass, inclass_proc_func_decl_noclass
{ 
		    if ((ValueStack[ValueStack.Depth-1].stn as procedure_definition).proc_header != null)
				(ValueStack[ValueStack.Depth-1].stn as procedure_definition).proc_header.class_keyword = true;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 393: // inclass_proc_func_decl_noclass -> proc_func_header, inclass_block
{
            CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, ValueStack[ValueStack.Depth-1].stn as proc_block, CurrentLocationSpan);
		}
        break;
      case 394: // inclass_proc_func_decl_noclass -> tkFunction, func_name, fp_list, tkColon, 
                //                                   fptype, optional_method_modificators1, 
                //                                   tkAssign, relop_expr, tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortFuncDefinition(ValueStack[ValueStack.Depth-7].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-8].stn as method_name, ValueStack[ValueStack.Depth-5].td as type_definition, ValueStack[ValueStack.Depth-2].ex, LocationStack[LocationStack.Depth-9].Merge(LocationStack[LocationStack.Depth-4]));
			if (parsertools.build_tree_for_formatter)
				CurrentSemanticValue.stn = new short_func_definition(CurrentSemanticValue.stn as procedure_definition);
		}
        break;
      case 395: // inclass_proc_func_decl_noclass -> tkFunction, func_name, fp_list, 
                //                                   optional_method_modificators1, tkAssign, 
                //                                   relop_expr, tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortFuncDefinition(ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-6].stn as method_name, null, ValueStack[ValueStack.Depth-2].ex, LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-4]));
			if (parsertools.build_tree_for_formatter)
				CurrentSemanticValue.stn = new short_func_definition(CurrentSemanticValue.stn as procedure_definition);
		}
        break;
      case 396: // inclass_proc_func_decl_noclass -> tkProcedure, proc_name, fp_list, 
                //                                   optional_method_modificators1, tkAssign, 
                //                                   unlabelled_stmt, tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortProcDefinition(ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-6].stn as method_name, ValueStack[ValueStack.Depth-2].stn as statement, LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-4]));
			if (parsertools.build_tree_for_formatter)
				CurrentSemanticValue.stn = new short_func_definition(CurrentSemanticValue.stn as procedure_definition);
		}
        break;
      case 397: // proc_func_external_block -> block
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 398: // proc_func_external_block -> external_block
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 399: // proc_name -> func_name
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 400: // func_name -> func_meth_name_ident
{ 
			CurrentSemanticValue.stn = new method_name(null,null, ValueStack[ValueStack.Depth-1].id, null, CurrentLocationSpan); 
		}
        break;
      case 401: // func_name -> func_class_name_ident_list, tkPoint, func_meth_name_ident
{ 
        	var ln = ValueStack[ValueStack.Depth-3].ob as List<ident>;
        	var cnt = (ValueStack[ValueStack.Depth-3].ob as List<ident>).Count;
        	if (cnt == 1)
				CurrentSemanticValue.stn = new method_name(null, ln[cnt-1], ValueStack[ValueStack.Depth-1].id, null, CurrentLocationSpan);
			else 	
				CurrentSemanticValue.stn = new method_name(ln, ln[cnt-1], ValueStack[ValueStack.Depth-1].id, null, CurrentLocationSpan);
		}
        break;
      case 402: // func_class_name_ident -> func_name_with_template_args
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 403: // func_class_name_ident_list -> func_class_name_ident
{ 
			CurrentSemanticValue.ob = new List<ident>(); 
			(CurrentSemanticValue.ob as List<ident>).Add(ValueStack[ValueStack.Depth-1].id);
		}
        break;
      case 404: // func_class_name_ident_list -> func_class_name_ident_list, tkPoint, 
                //                               func_class_name_ident
{ 
			(ValueStack[ValueStack.Depth-3].ob as List<ident>).Add(ValueStack[ValueStack.Depth-1].id);
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-3].ob; 
		}
        break;
      case 405: // func_meth_name_ident -> func_name_with_template_args
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 406: // func_meth_name_ident -> operator_name_ident
{ CurrentSemanticValue.id = (ident)ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 407: // func_meth_name_ident -> operator_name_ident, template_arguments
{ CurrentSemanticValue.id = new template_operator_name(null, ValueStack[ValueStack.Depth-1].stn as ident_list, ValueStack[ValueStack.Depth-2].ex as operator_name_ident, CurrentLocationSpan); }
        break;
      case 408: // func_name_with_template_args -> func_name_ident
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 409: // func_name_with_template_args -> func_name_ident, template_arguments
{ 
			CurrentSemanticValue.id = new template_type_name(ValueStack[ValueStack.Depth-2].id.name, ValueStack[ValueStack.Depth-1].stn as ident_list, CurrentLocationSpan); 
        }
        break;
      case 410: // func_name_ident -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 411: // proc_header -> tkProcedure, proc_name, fp_list, optional_method_modificators, 
                //                optional_where_section
{ 
        	CurrentSemanticValue.td = new procedure_header(ValueStack[ValueStack.Depth-3].stn as formal_parameters, ValueStack[ValueStack.Depth-2].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-4].stn as method_name, ValueStack[ValueStack.Depth-1].stn as where_definition_list, CurrentLocationSpan); 
        }
        break;
      case 412: // func_header -> tkFunction, func_name, fp_list, optional_method_modificators, 
                //                optional_where_section
{
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-3].stn as formal_parameters, ValueStack[ValueStack.Depth-2].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-4].stn as method_name, ValueStack[ValueStack.Depth-1].stn as where_definition_list, null, CurrentLocationSpan); 
		}
        break;
      case 413: // func_header -> tkFunction, func_name, fp_list, tkColon, fptype, 
                //                optional_method_modificators, optional_where_section
{ 
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-2].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-6].stn as method_name, ValueStack[ValueStack.Depth-1].stn as where_definition_list, ValueStack[ValueStack.Depth-3].td as type_definition, CurrentLocationSpan); 
        }
        break;
      case 414: // external_block -> tkExternal, external_directive_ident, tkName, 
                //                   external_directive_ident, tkSemiColon
{ 
			CurrentSemanticValue.stn = new external_directive(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan); 
		}
        break;
      case 415: // external_block -> tkExternal, external_directive_ident, tkSemiColon
{ 
			CurrentSemanticValue.stn = new external_directive(ValueStack[ValueStack.Depth-2].ex, null, CurrentLocationSpan); 
		}
        break;
      case 416: // external_block -> tkExternal, tkSemiColon
{ 
			CurrentSemanticValue.stn = new external_directive(null, null, CurrentLocationSpan); 
		}
        break;
      case 417: // external_directive_ident -> identifier
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 418: // external_directive_ident -> literal
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 419: // block -> decl_sect_list, compound_stmt, tkSemiColon
{ 
			CurrentSemanticValue.stn = new block(ValueStack[ValueStack.Depth-3].stn as declarations, ValueStack[ValueStack.Depth-2].stn as statement_list, CurrentLocationSpan); 
		}
        break;
      case 420: // inclass_block -> inclass_decl_sect_list, compound_stmt, tkSemiColon
{ 
			CurrentSemanticValue.stn = new block(ValueStack[ValueStack.Depth-3].stn as declarations, ValueStack[ValueStack.Depth-2].stn as statement_list, CurrentLocationSpan); 
		}
        break;
      case 421: // fp_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 422: // fp_list -> tkRoundOpen, tkRoundClose
{ 
			CurrentSemanticValue.stn = null;
		}
        break;
      case 423: // fp_list -> tkRoundOpen, fp_sect_list, tkRoundClose
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			if (CurrentSemanticValue.stn != null)
				CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 424: // fp_sect_list -> fp_sect
{ 
			CurrentSemanticValue.stn = new formal_parameters(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
        }
        break;
      case 425: // fp_sect_list -> fp_sect_list, tkSemiColon, fp_sect
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as formal_parameters).Add(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);   
        }
        break;
      case 426: // fp_sect -> attribute_declarations, simple_fp_sect
{  
			(ValueStack[ValueStack.Depth-1].stn as declaration).attributes = ValueStack[ValueStack.Depth-2].stn as  attribute_list;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
        }
        break;
      case 427: // simple_fp_sect -> param_name_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.none, null, CurrentLocationSpan); 
		}
        break;
      case 428: // simple_fp_sect -> tkVar, param_name_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.var_parametr, null, CurrentLocationSpan);  
		}
        break;
      case 429: // simple_fp_sect -> tkConst, param_name_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.const_parametr, null, CurrentLocationSpan);  
		}
        break;
      case 430: // simple_fp_sect -> tkParams, param_name_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td,parametr_kind.params_parametr,null, CurrentLocationSpan);  
		}
        break;
      case 431: // simple_fp_sect -> param_name_list, tkColon, fptype, tkAssign, const_expr
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-5].stn as ident_list, ValueStack[ValueStack.Depth-3].td, parametr_kind.none, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 432: // simple_fp_sect -> tkVar, param_name_list, tkColon, fptype, tkAssign, const_expr
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-5].stn as ident_list, ValueStack[ValueStack.Depth-3].td, parametr_kind.var_parametr, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);  
		}
        break;
      case 433: // simple_fp_sect -> tkConst, param_name_list, tkColon, fptype, tkAssign, 
                //                   const_expr
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-5].stn as ident_list, ValueStack[ValueStack.Depth-3].td, parametr_kind.const_parametr, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);  
		}
        break;
      case 434: // param_name_list -> param_name
{ 
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 435: // param_name_list -> param_name_list, tkComma, param_name
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);  
		}
        break;
      case 436: // param_name -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 437: // fptype -> type_ref
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 438: // fptype_noproctype -> simple_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 439: // fptype_noproctype -> string_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 440: // fptype_noproctype -> pointer_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 441: // fptype_noproctype -> structured_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 442: // fptype_noproctype -> template_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 443: // stmt -> unlabelled_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 444: // stmt -> label_name, tkColon, stmt
{ 
			CurrentSemanticValue.stn = new labeled_statement(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);  
		}
        break;
      case 445: // unlabelled_stmt -> /* empty */
{ 
			CurrentSemanticValue.stn = new empty_statement(); 
			CurrentSemanticValue.stn.source_context = null;
		}
        break;
      case 446: // unlabelled_stmt -> assignment
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 447: // unlabelled_stmt -> proc_call
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 448: // unlabelled_stmt -> goto_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 449: // unlabelled_stmt -> compound_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 450: // unlabelled_stmt -> if_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 451: // unlabelled_stmt -> case_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 452: // unlabelled_stmt -> repeat_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 453: // unlabelled_stmt -> while_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 454: // unlabelled_stmt -> for_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 455: // unlabelled_stmt -> with_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 456: // unlabelled_stmt -> inherited_message
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 457: // unlabelled_stmt -> try_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 458: // unlabelled_stmt -> raise_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 459: // unlabelled_stmt -> foreach_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 460: // unlabelled_stmt -> var_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 461: // unlabelled_stmt -> expr_as_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 462: // unlabelled_stmt -> lock_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 463: // unlabelled_stmt -> yield_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 464: // unlabelled_stmt -> yield_sequence_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 465: // yield_stmt -> tkYield, expr_l1
{
			CurrentSemanticValue.stn = new yield_node(ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);
		}
        break;
      case 466: // yield_sequence_stmt -> tkYield, tkSequence, expr_l1
{
			CurrentSemanticValue.stn = new yield_sequence_node(ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);
		}
        break;
      case 467: // var_stmt -> tkVar, var_decl_part
{ 
			CurrentSemanticValue.stn = new var_statement(ValueStack[ValueStack.Depth-1].stn as var_def_statement, CurrentLocationSpan);
		}
        break;
      case 468: // assignment -> var_reference, assign_operator, expr_with_func_decl_lambda
{      
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
        }
        break;
      case 469: // assignment -> tkRoundOpen, variable, tkComma, variable_list, tkRoundClose, 
                //               assign_operator, expr
{
			if (ValueStack[ValueStack.Depth-2].op.type != Operators.Assignment)
			    parsertools.AddErrorFromResource("ONLY_BASE_ASSIGNMENT_FOR_TUPLE",LocationStack[LocationStack.Depth-2]);
			(ValueStack[ValueStack.Depth-4].ob as addressed_value_list).variables.Insert(0,ValueStack[ValueStack.Depth-6].ex as addressed_value);
			(ValueStack[ValueStack.Depth-4].ob as addressed_value_list).source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5],LocationStack[LocationStack.Depth-4],LocationStack[LocationStack.Depth-3]);
			CurrentSemanticValue.stn = new assign_tuple(ValueStack[ValueStack.Depth-4].ob as addressed_value_list, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 470: // assignment -> tkRoundOpen, tkVar, variable, tkComma, var_variable_list, 
                //               tkRoundClose, assign_operator, expr
{
			if (ValueStack[ValueStack.Depth-2].op.type != Operators.Assignment)
			    parsertools.AddErrorFromResource("ONLY_BASE_ASSIGNMENT_FOR_TUPLE",LocationStack[LocationStack.Depth-3]);
			(ValueStack[ValueStack.Depth-4].ob as addressed_value_list).variables.Insert(0,ValueStack[ValueStack.Depth-6].ex as addressed_value);
			(ValueStack[ValueStack.Depth-4].ob as addressed_value_list).source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-8],LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5],LocationStack[LocationStack.Depth-4],LocationStack[LocationStack.Depth-3]);
			CurrentSemanticValue.stn = new assign_var_tuple(ValueStack[ValueStack.Depth-4].ob as addressed_value_list, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 471: // variable_list -> variable
{
		CurrentSemanticValue.ob = new addressed_value_list(ValueStack[ValueStack.Depth-1].ex as addressed_value,LocationStack[LocationStack.Depth-1]);
	}
        break;
      case 472: // variable_list -> variable_list, tkComma, variable
{
		(ValueStack[ValueStack.Depth-3].ob as addressed_value_list).Add(ValueStack[ValueStack.Depth-1].ex as addressed_value);
		(ValueStack[ValueStack.Depth-3].ob as addressed_value_list).source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-3],LocationStack[LocationStack.Depth-2],LocationStack[LocationStack.Depth-1]);
		CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-3].ob;
	}
        break;
      case 473: // var_variable_list -> tkVar, variable
{
		CurrentSemanticValue.ob = new addressed_value_list(ValueStack[ValueStack.Depth-1].ex as addressed_value,CurrentLocationSpan);
	}
        break;
      case 474: // var_variable_list -> var_variable_list, tkComma, tkVar, variable
{
		(ValueStack[ValueStack.Depth-4].ob as addressed_value_list).Add(ValueStack[ValueStack.Depth-1].ex as addressed_value);
		(ValueStack[ValueStack.Depth-4].ob as addressed_value_list).source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-4],LocationStack[LocationStack.Depth-3],LocationStack[LocationStack.Depth-2],LocationStack[LocationStack.Depth-1]);
		CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-4].ob;
	}
        break;
      case 475: // proc_call -> var_reference
{ 
			CurrentSemanticValue.stn = new procedure_call(ValueStack[ValueStack.Depth-1].ex as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 476: // goto_stmt -> tkGoto, label_name
{ 
			CurrentSemanticValue.stn = new goto_statement(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 477: // compound_stmt -> tkBegin, stmt_list, tkEnd
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			(CurrentSemanticValue.stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-3].ti;
			(CurrentSemanticValue.stn as statement_list).right_logical_bracket = ValueStack[ValueStack.Depth-1].ti;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
        }
        break;
      case 478: // stmt_list -> stmt
{ 
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, LocationStack[LocationStack.Depth-1]);
        }
        break;
      case 479: // stmt_list -> stmt_list, tkSemiColon, stmt
{  
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as statement_list).Add(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
        }
        break;
      case 480: // if_stmt -> tkIf, expr_l1, tkThen, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, null, CurrentLocationSpan); 
        }
        break;
      case 481: // if_stmt -> tkIf, expr_l1, tkThen, unlabelled_stmt, tkElse, unlabelled_stmt
{
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); 
        }
        break;
      case 482: // case_stmt -> tkCase, expr_l1, tkOf, case_list, else_case, tkEnd
{ 
			CurrentSemanticValue.stn = new case_node(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].stn as case_variants, ValueStack[ValueStack.Depth-2].stn as statement, CurrentLocationSpan); 
		}
        break;
      case 483: // case_list -> case_item
{
			if (ValueStack[ValueStack.Depth-1].stn is empty_statement) 
				CurrentSemanticValue.stn = NewCaseItem(ValueStack[ValueStack.Depth-1].stn, null);
			else CurrentSemanticValue.stn = NewCaseItem(ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan);
		}
        break;
      case 484: // case_list -> case_list, tkSemiColon, case_item
{ 
			CurrentSemanticValue.stn = AddCaseItem(ValueStack[ValueStack.Depth-3].stn as case_variants, ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan);
		}
        break;
      case 485: // case_item -> /* empty */
{ 
			CurrentSemanticValue.stn = new empty_statement(); 
		}
        break;
      case 486: // case_item -> case_label_list, tkColon, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new case_variant(ValueStack[ValueStack.Depth-3].stn as expression_list, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); 
		}
        break;
      case 487: // case_label_list -> case_label
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 488: // case_label_list -> case_label_list, tkComma, case_label
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 489: // case_label -> const_elem
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 490: // else_case -> /* empty */
{ CurrentSemanticValue.stn = null;}
        break;
      case 491: // else_case -> tkElse, stmt_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 492: // repeat_stmt -> tkRepeat, stmt_list, tkUntil, expr
{ 
		    CurrentSemanticValue.stn = new repeat_node(ValueStack[ValueStack.Depth-3].stn as statement_list, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
			(ValueStack[ValueStack.Depth-3].stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-4].ti;
			(ValueStack[ValueStack.Depth-3].stn as statement_list).right_logical_bracket = ValueStack[ValueStack.Depth-2].ti;
			ValueStack[ValueStack.Depth-3].stn.source_context = LocationStack[LocationStack.Depth-4].Merge(LocationStack[LocationStack.Depth-2]);
        }
        break;
      case 493: // while_stmt -> tkWhile, expr_l1, optional_tk_do, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = NewWhileStmt(ValueStack[ValueStack.Depth-4].ti, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-2].ti, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);    
        }
        break;
      case 494: // optional_tk_do -> tkDo
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 495: // optional_tk_do -> /* empty */
{ CurrentSemanticValue.ti = null; }
        break;
      case 496: // lock_stmt -> tkLock, expr_l1, tkDo, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new lock_stmt(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); 
        }
        break;
      case 497: // foreach_stmt -> tkForeach, identifier, foreach_stmt_ident_dype_opt, tkIn, 
                //                 expr_l1, tkDo, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new foreach_stmt(ValueStack[ValueStack.Depth-6].id, ValueStack[ValueStack.Depth-5].td, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
            if (ValueStack[ValueStack.Depth-5].td == null)
                parsertools.AddWarningFromResource("USING_UNLOCAL_FOREACH_VARIABLE", ValueStack[ValueStack.Depth-6].id.source_context);
        }
        break;
      case 498: // foreach_stmt -> tkForeach, tkVar, identifier, tkColon, type_ref, tkIn, expr_l1, 
                //                 tkDo, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new foreach_stmt(ValueStack[ValueStack.Depth-7].id, ValueStack[ValueStack.Depth-5].td, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); 
        }
        break;
      case 499: // foreach_stmt -> tkForeach, tkVar, identifier, tkIn, expr_l1, tkDo, 
                //                 unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new foreach_stmt(ValueStack[ValueStack.Depth-5].id, new no_type_foreach(), ValueStack[ValueStack.Depth-3].ex, (statement)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
        }
        break;
      case 500: // foreach_stmt_ident_dype_opt -> tkColon, type_ref
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 502: // for_stmt -> tkFor, optional_var, identifier, for_stmt_decl_or_assign, expr_l1, 
                //             for_cycle_type, expr_l1, optional_tk_do, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = NewForStmt((bool)ValueStack[ValueStack.Depth-8].ob, ValueStack[ValueStack.Depth-7].id, ValueStack[ValueStack.Depth-6].td, ValueStack[ValueStack.Depth-5].ex, (for_cycle_type)ValueStack[ValueStack.Depth-4].ob, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-2].ti, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
        }
        break;
      case 503: // optional_var -> tkVar
{ CurrentSemanticValue.ob = true; }
        break;
      case 504: // optional_var -> /* empty */
{ CurrentSemanticValue.ob = false; }
        break;
      case 506: // for_stmt_decl_or_assign -> tkColon, simple_type_identifier, tkAssign
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-2].td; }
        break;
      case 507: // for_cycle_type -> tkTo
{ CurrentSemanticValue.ob = for_cycle_type.to; }
        break;
      case 508: // for_cycle_type -> tkDownto
{ CurrentSemanticValue.ob = for_cycle_type.downto; }
        break;
      case 509: // with_stmt -> tkWith, expr_list, tkDo, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new with_statement(ValueStack[ValueStack.Depth-1].stn as statement, ValueStack[ValueStack.Depth-3].stn as expression_list, CurrentLocationSpan); 
		}
        break;
      case 510: // inherited_message -> tkInherited
{ 
			CurrentSemanticValue.stn = new inherited_message();  
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 511: // try_stmt -> tkTry, stmt_list, try_handler
{ 
			CurrentSemanticValue.stn = new try_stmt(ValueStack[ValueStack.Depth-2].stn as statement_list, ValueStack[ValueStack.Depth-1].stn as try_handler, CurrentLocationSpan); 
			(ValueStack[ValueStack.Depth-2].stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-3].ti;
			ValueStack[ValueStack.Depth-2].stn.source_context = LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-2]);
        }
        break;
      case 512: // try_handler -> tkFinally, stmt_list, tkEnd
{ 
			CurrentSemanticValue.stn = new try_handler_finally(ValueStack[ValueStack.Depth-2].stn as statement_list, CurrentLocationSpan);
			(ValueStack[ValueStack.Depth-2].stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-3].ti;
			(ValueStack[ValueStack.Depth-2].stn as statement_list).right_logical_bracket = ValueStack[ValueStack.Depth-1].ti;
		}
        break;
      case 513: // try_handler -> tkExcept, exception_block, tkEnd
{ 
			CurrentSemanticValue.stn = new try_handler_except((exception_block)ValueStack[ValueStack.Depth-2].stn, CurrentLocationSpan);  
			if ((ValueStack[ValueStack.Depth-2].stn as exception_block).stmt_list != null)
			{
				(ValueStack[ValueStack.Depth-2].stn as exception_block).stmt_list.source_context = CurrentLocationSpan;
				(ValueStack[ValueStack.Depth-2].stn as exception_block).source_context = CurrentLocationSpan;
			}
		}
        break;
      case 514: // exception_block -> exception_handler_list, exception_block_else_branch
{ 
			CurrentSemanticValue.stn = new exception_block(null, (exception_handler_list)ValueStack[ValueStack.Depth-2].stn, (statement_list)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
		}
        break;
      case 515: // exception_block -> exception_handler_list, tkSemiColon, 
                //                    exception_block_else_branch
{ 
			CurrentSemanticValue.stn = new exception_block(null, (exception_handler_list)ValueStack[ValueStack.Depth-3].stn, (statement_list)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
		}
        break;
      case 516: // exception_block -> stmt_list
{ 
			CurrentSemanticValue.stn = new exception_block(ValueStack[ValueStack.Depth-1].stn as statement_list, null, null, LocationStack[LocationStack.Depth-1]);
		}
        break;
      case 517: // exception_handler_list -> exception_handler
{ 
			CurrentSemanticValue.stn = new exception_handler_list(ValueStack[ValueStack.Depth-1].stn as exception_handler, CurrentLocationSpan); 
		}
        break;
      case 518: // exception_handler_list -> exception_handler_list, tkSemiColon, 
                //                           exception_handler
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as exception_handler_list).Add(ValueStack[ValueStack.Depth-1].stn as exception_handler, CurrentLocationSpan); 
		}
        break;
      case 519: // exception_block_else_branch -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 520: // exception_block_else_branch -> tkElse, stmt_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 521: // exception_handler -> tkOn, exception_identifier, tkDo, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new exception_handler((ValueStack[ValueStack.Depth-3].stn as exception_ident).variable, (ValueStack[ValueStack.Depth-3].stn as exception_ident).type_name, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 522: // exception_identifier -> exception_class_type_identifier
{ 
			CurrentSemanticValue.stn = new exception_ident(null, (named_type_reference)ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
		}
        break;
      case 523: // exception_identifier -> exception_variable, tkColon, 
                //                         exception_class_type_identifier
{ 
			CurrentSemanticValue.stn = new exception_ident(ValueStack[ValueStack.Depth-3].id, (named_type_reference)ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
		}
        break;
      case 524: // exception_class_type_identifier -> simple_type_identifier
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 525: // exception_variable -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 526: // raise_stmt -> tkRaise
{ 
			CurrentSemanticValue.stn = new raise_stmt(); 
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 527: // raise_stmt -> tkRaise, expr
{ 
			CurrentSemanticValue.stn = new raise_stmt(ValueStack[ValueStack.Depth-1].ex, null, CurrentLocationSpan);  
		}
        break;
      case 528: // expr_list -> expr_with_func_decl_lambda
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 529: // expr_list -> expr_list, tkComma, expr_with_func_decl_lambda
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 530: // expr_as_stmt -> allowable_expr_as_stmt
{ 
			CurrentSemanticValue.stn = new expression_as_statement(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);  
		}
        break;
      case 531: // allowable_expr_as_stmt -> new_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 532: // expr_with_func_decl_lambda -> expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 533: // expr_with_func_decl_lambda -> func_decl_lambda
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 534: // expr -> expr_l1
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 535: // expr -> format_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 536: // expr_l1 -> relop_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 537: // expr_l1 -> question_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 538: // sizeof_expr -> tkSizeOf, tkRoundOpen, simple_or_template_type_reference, 
                //                tkRoundClose
{ 
			CurrentSemanticValue.ex = new sizeof_operator((named_type_reference)ValueStack[ValueStack.Depth-2].td, null, CurrentLocationSpan);  
		}
        break;
      case 539: // typeof_expr -> tkTypeOf, tkRoundOpen, simple_or_template_type_reference, 
                //                tkRoundClose
{ 
			CurrentSemanticValue.ex = new typeof_operator((named_type_reference)ValueStack[ValueStack.Depth-2].td, CurrentLocationSpan);  
		}
        break;
      case 540: // question_expr -> expr_l1, tkQuestion, expr_l1, tkColon, expr_l1
{ 
			CurrentSemanticValue.ex = new question_colon_expression(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);  
		}
        break;
      case 541: // simple_or_template_type_reference -> simple_type_identifier
{ 
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
		}
        break;
      case 542: // simple_or_template_type_reference -> simple_type_identifier, 
                //                                      template_type_params
{ 
			CurrentSemanticValue.td = new template_type_reference((named_type_reference)ValueStack[ValueStack.Depth-2].td, (template_param_list)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
        }
        break;
      case 543: // simple_or_template_type_reference -> simple_type_identifier, tkAmpersend, 
                //                                      template_type_params
{ 
			CurrentSemanticValue.td = new template_type_reference((named_type_reference)ValueStack[ValueStack.Depth-3].td, (template_param_list)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
        }
        break;
      case 544: // optional_array_initializer -> tkRoundOpen, typed_const_list, tkRoundClose
{ 
			CurrentSemanticValue.stn = new array_const((expression_list)ValueStack[ValueStack.Depth-2].stn, CurrentLocationSpan); 
		}
        break;
      case 546: // new_expr -> tkNew, simple_or_template_type_reference, 
                //             optional_expr_list_with_bracket
{
			CurrentSemanticValue.ex = new new_expr(ValueStack[ValueStack.Depth-2].td, ValueStack[ValueStack.Depth-1].stn as expression_list, false, null, CurrentLocationSpan);
        }
        break;
      case 547: // new_expr -> tkNew, array_name_for_new_expr, tkSquareOpen, optional_expr_list, 
                //             tkSquareClose, optional_array_initializer
{
        	var el = ValueStack[ValueStack.Depth-3].stn as expression_list;
        	if (el == null)
        	{
        		var cnt = 0;
        		var ac = ValueStack[ValueStack.Depth-1].stn as array_const;
        		if (ac != null && ac.elements != null)
	        	    cnt = ac.elements.expressions.Count;
	        	else parsertools.AddErrorFromResource("WITHOUT_INIT_AND_SIZE",LocationStack[LocationStack.Depth-2]);
        		el = new expression_list(new int32_const(cnt),LocationStack[LocationStack.Depth-6]);
        	}	
			CurrentSemanticValue.ex = new new_expr(ValueStack[ValueStack.Depth-5].td, el, true, ValueStack[ValueStack.Depth-1].stn as array_const, CurrentLocationSpan);
        }
        break;
      case 548: // new_expr -> tkNew, tkClass, tkRoundOpen, list_fields_in_unnamed_object, 
                //             tkRoundClose
{
        // sugared node	
        	var l = ValueStack[ValueStack.Depth-2].ob as name_assign_expr_list;
        	var exprs = l.name_expr.Select(x=>x.expr).ToList();
        	var typename = "AnonymousType#"+Guid();
        	var type = new named_type_reference(typename,LocationStack[LocationStack.Depth-5]);
        	
			// node new_expr - for code generation
			var ne = new new_expr(type, new expression_list(exprs), CurrentLocationSpan);
			// node unnamed_type_object - for formatting
			CurrentSemanticValue.ex = new unnamed_type_object(l, true, ne, CurrentLocationSpan);
        }
        break;
      case 549: // field_in_unnamed_object -> identifier, tkAssign, relop_expr
{
			CurrentSemanticValue.ob = new name_assign_expr(ValueStack[ValueStack.Depth-3].id,ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);
		}
        break;
      case 550: // field_in_unnamed_object -> relop_expr
{
			ident name = null;
			var id = ValueStack[ValueStack.Depth-1].ex as ident;
			dot_node dot;
			if (id != null)
				name = id;
			else 
            {
            	dot = ValueStack[ValueStack.Depth-1].ex as dot_node;
            	if (dot != null)
            	{
            		name = dot.right as ident;
            	}            	
            } 
			if (name == null)
				parsertools.errors.Add(new bad_anon_type(parsertools.CurrentFileName, LocationStack[LocationStack.Depth-1], null));	
			CurrentSemanticValue.ob = new name_assign_expr(name,ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);
		}
        break;
      case 551: // list_fields_in_unnamed_object -> field_in_unnamed_object
{
			var l = new name_assign_expr_list();
			CurrentSemanticValue.ob = l.Add(ValueStack[ValueStack.Depth-1].ob as name_assign_expr);
		}
        break;
      case 552: // list_fields_in_unnamed_object -> list_fields_in_unnamed_object, tkComma, 
                //                                  field_in_unnamed_object
{
			var nel = ValueStack[ValueStack.Depth-3].ob as name_assign_expr_list;
			var ss = nel.name_expr.Select(ne=>ne.name.name).FirstOrDefault(x=>string.Compare(x,(ValueStack[ValueStack.Depth-1].ob as name_assign_expr).name.name,true)==0);
            if (ss != null)
            	parsertools.errors.Add(new anon_type_duplicate_name(parsertools.CurrentFileName, LocationStack[LocationStack.Depth-1], null));
			nel.Add(ValueStack[ValueStack.Depth-1].ob as name_assign_expr);
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-3].ob;
		}
        break;
      case 553: // array_name_for_new_expr -> simple_type_identifier
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 554: // array_name_for_new_expr -> unsized_array_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 555: // optional_expr_list_with_bracket -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 556: // optional_expr_list_with_bracket -> tkRoundOpen, optional_expr_list, 
                //                                    tkRoundClose
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 557: // relop_expr -> simple_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 558: // relop_expr -> relop_expr, relop, simple_expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 559: // relop_expr -> relop_expr, tkMatching, simple_expr
{
			CurrentSemanticValue.ex = new matching_expression(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 560: // simple_expr_or_nothing -> simple_expr
{
		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
	}
        break;
      case 561: // simple_expr_or_nothing -> /* empty */
{
		CurrentSemanticValue.ex = new int32_const(int.MaxValue);
	}
        break;
      case 562: // format_expr -> simple_expr, tkColon, simple_expr_or_nothing
{ 
			CurrentSemanticValue.ex = new format_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, null, CurrentLocationSpan); 
		}
        break;
      case 563: // format_expr -> tkColon, simple_expr_or_nothing
{ 
			CurrentSemanticValue.ex = new format_expr(new int32_const(int.MaxValue), ValueStack[ValueStack.Depth-1].ex, null, CurrentLocationSpan); 
		}
        break;
      case 564: // format_expr -> simple_expr, tkColon, simple_expr_or_nothing, tkColon, 
                //                simple_expr
{ 
			CurrentSemanticValue.ex = new format_expr(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 565: // format_expr -> tkColon, simple_expr_or_nothing, tkColon, simple_expr
{ 
			CurrentSemanticValue.ex = new format_expr(new int32_const(int.MaxValue), ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 566: // relop -> tkEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 567: // relop -> tkNotEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 568: // relop -> tkLower
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 569: // relop -> tkGreater
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 570: // relop -> tkLowerEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 571: // relop -> tkGreaterEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 572: // relop -> tkIn
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 573: // simple_expr -> term
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 574: // simple_expr -> simple_expr, addop, term
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 575: // addop -> tkPlus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 576: // addop -> tkMinus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 577: // addop -> tkOr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 578: // addop -> tkXor
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 579: // addop -> tkCSharpStyleOr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 580: // typecast_op -> tkAs
{ 
			CurrentSemanticValue.ob = op_typecast.as_op; 
		}
        break;
      case 581: // typecast_op -> tkIs
{ 
			CurrentSemanticValue.ob = op_typecast.is_op; 
		}
        break;
      case 582: // as_is_expr -> term, typecast_op, simple_or_template_type_reference
{ 
			CurrentSemanticValue.ex = NewAsIsExpr(ValueStack[ValueStack.Depth-3].ex, (op_typecast)ValueStack[ValueStack.Depth-2].ob, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
        }
        break;
      case 583: // term -> factor
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 584: // term -> new_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 585: // term -> term, mulop, factor
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,(ValueStack[ValueStack.Depth-2].op).type, CurrentLocationSpan); }
        break;
      case 586: // term -> as_is_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 587: // mulop -> tkStar
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 588: // mulop -> tkSlash
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 589: // mulop -> tkDiv
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 590: // mulop -> tkMod
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 591: // mulop -> tkShl
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 592: // mulop -> tkShr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 593: // mulop -> tkAnd
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 594: // default_expr -> tkDefault, tkRoundOpen, simple_or_template_type_reference, 
                //                 tkRoundClose
{ 
			CurrentSemanticValue.ex = new default_operator(ValueStack[ValueStack.Depth-2].td as named_type_reference, CurrentLocationSpan);  
		}
        break;
      case 595: // factor -> tkNil
{ 
			CurrentSemanticValue.ex = new nil_const();  
			CurrentSemanticValue.ex.source_context = CurrentLocationSpan;
		}
        break;
      case 596: // factor -> literal_or_number
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 597: // factor -> default_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 598: // factor -> tkSquareOpen, elem_list, tkSquareClose
{ 
			CurrentSemanticValue.ex = new pascal_set_constant(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);  
		}
        break;
      case 599: // factor -> tkNot, factor
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 600: // factor -> sign, factor
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 601: // factor -> tkDeref, factor
{ 
			CurrentSemanticValue.ex = new roof_dereference(ValueStack[ValueStack.Depth-1].ex as addressed_value, CurrentLocationSpan);
		}
        break;
      case 602: // factor -> var_reference
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 603: // factor -> tkRoundOpen, expr_l1, tkComma, expr_l1_list, lambda_type_ref, 
                //           optional_full_lambda_fp_list, tkRoundClose
{
			(ValueStack[ValueStack.Depth-4].stn as expression_list).expressions.Insert(0,ValueStack[ValueStack.Depth-6].ex);
			if ((ValueStack[ValueStack.Depth-4].stn as expression_list).expressions.Count>7) 
				parsertools.AddErrorFromResource("TUPLE_ELEMENTS_COUNT_MUST_BE_LESSEQUAL_7",LocationStack[LocationStack.Depth-3]);
			
			if (parsertools.build_tree_for_formatter)
				CurrentSemanticValue.ex = new tuple_node_for_formatter(ValueStack[ValueStack.Depth-4].stn as expression_list,CurrentLocationSpan);
			else	
			{
			    var dn = new dot_node(new dot_node(new ident("?System"),new ident("Tuple")),new ident("Create",CurrentLocationSpan));
				CurrentSemanticValue.ex = new method_call(dn,ValueStack[ValueStack.Depth-4].stn as expression_list,CurrentLocationSpan);
			}
		}
        break;
      case 604: // literal_or_number -> literal
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 605: // literal_or_number -> unsigned_number
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 606: // var_reference -> var_address, variable
{
			CurrentSemanticValue.ex = NewVarReference(ValueStack[ValueStack.Depth-2].stn as get_address, ValueStack[ValueStack.Depth-1].ex as addressed_value, CurrentLocationSpan);
		}
        break;
      case 607: // var_reference -> variable
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 608: // var_address -> tkAddressOf
{ 
			CurrentSemanticValue.stn = NewVarAddress(CurrentLocationSpan);
		}
        break;
      case 609: // var_address -> var_address, tkAddressOf
{ 
			CurrentSemanticValue.stn = NewVarAddress(ValueStack[ValueStack.Depth-2].stn as get_address, CurrentLocationSpan);
		}
        break;
      case 610: // attribute_variable -> simple_type_identifier, optional_expr_list_with_bracket
{ 
			CurrentSemanticValue.stn = new attribute(null, ValueStack[ValueStack.Depth-2].td as named_type_reference, ValueStack[ValueStack.Depth-1].stn as expression_list, CurrentLocationSpan);
		}
        break;
      case 611: // dotted_identifier -> identifier
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 612: // dotted_identifier -> dotted_identifier, tkPoint, identifier_or_keyword
{
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan);
		}
        break;
      case 613: // variable_as_type -> dotted_identifier
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;}
        break;
      case 614: // variable_as_type -> dotted_identifier, template_type_params
{ CurrentSemanticValue.ex = new ident_with_templateparams(ValueStack[ValueStack.Depth-2].ex as addressed_value, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan);   }
        break;
      case 615: // variable -> identifier
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 616: // variable -> operator_name_ident
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 617: // variable -> tkInherited, identifier
{ 
			CurrentSemanticValue.ex = new inherited_ident(ValueStack[ValueStack.Depth-1].id.name, CurrentLocationSpan);
		}
        break;
      case 618: // variable -> tkRoundOpen, expr, tkRoundClose
{
		    if (!parsertools.build_tree_for_formatter) 
            {
                ValueStack[ValueStack.Depth-2].ex.source_context = CurrentLocationSpan;
                CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex;
            } 
			else CurrentSemanticValue.ex = new bracket_expr(ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan);
        }
        break;
      case 619: // variable -> sizeof_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 620: // variable -> typeof_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 621: // variable -> literal_or_number, tkPoint, identifier_or_keyword
{ 
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 622: // variable -> variable, tkSquareOpen, expr_list, tkSquareClose
{
        	var el = ValueStack[ValueStack.Depth-2].stn as expression_list; // SSM 10/03/16
        	if (el.expressions.Count==1 && el.expressions[0] is format_expr) 
        	{
        		var fe = el.expressions[0] as format_expr;
        		CurrentSemanticValue.ex = new slice_expr(ValueStack[ValueStack.Depth-4].ex as addressed_value,fe.expr,fe.format1,fe.format2,fe.source_context);
			}   
			else CurrentSemanticValue.ex = new indexer(ValueStack[ValueStack.Depth-4].ex as addressed_value,el, CurrentLocationSpan);
        }
        break;
      case 623: // variable -> variable, tkRoundOpen, optional_expr_list, tkRoundClose
{
			CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-4].ex as addressed_value,ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
        }
        break;
      case 624: // variable -> variable, tkPoint, identifier_keyword_operatorname
{
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan);
        }
        break;
      case 625: // variable -> variable, tkDeref
{
			CurrentSemanticValue.ex = new roof_dereference(ValueStack[ValueStack.Depth-2].ex as addressed_value,CurrentLocationSpan);
        }
        break;
      case 626: // variable -> variable, tkAmpersend, template_type_params
{
			CurrentSemanticValue.ex = new ident_with_templateparams(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan);
        }
        break;
      case 627: // optional_expr_list -> expr_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 628: // optional_expr_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 629: // elem_list -> elem_list1
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 630: // elem_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 631: // elem_list1 -> elem
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 632: // elem_list1 -> elem_list1, tkComma, elem
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 633: // elem -> expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 634: // elem -> expr, tkDotDot, expr
{ CurrentSemanticValue.ex = new diapason_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); }
        break;
      case 635: // one_literal -> tkStringLiteral
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].stn as literal; }
        break;
      case 636: // one_literal -> tkAsciiChar
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].stn as literal; }
        break;
      case 637: // literal -> literal_list
{ 
			CurrentSemanticValue.ex = NewLiteral(ValueStack[ValueStack.Depth-1].stn as literal_const_line);
        }
        break;
      case 638: // literal_list -> one_literal
{ 
			CurrentSemanticValue.stn = new literal_const_line(ValueStack[ValueStack.Depth-1].ex as literal, CurrentLocationSpan);
        }
        break;
      case 639: // literal_list -> literal_list, one_literal
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as literal_const_line).Add(ValueStack[ValueStack.Depth-1].ex as literal, CurrentLocationSpan);
        }
        break;
      case 640: // operator_name_ident -> tkOperator, overload_operator
{ 
			CurrentSemanticValue.ex = new operator_name_ident((ValueStack[ValueStack.Depth-1].op as op_type_node).text, (ValueStack[ValueStack.Depth-1].op as op_type_node).type, CurrentLocationSpan);
		}
        break;
      case 641: // optional_method_modificators -> tkSemiColon
{ 
			CurrentSemanticValue.stn = new procedure_attributes_list(new List<procedure_attribute>(),CurrentLocationSpan); 
		}
        break;
      case 642: // optional_method_modificators -> tkSemiColon, meth_modificators, tkSemiColon
{ 
			//parsertools.AddModifier((procedure_attributes_list)$2, proc_attribute.attr_overload); 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; 
		}
        break;
      case 643: // optional_method_modificators1 -> /* empty */
{ 
			CurrentSemanticValue.stn = new procedure_attributes_list(new List<procedure_attribute>(),CurrentLocationSpan); 
		}
        break;
      case 644: // optional_method_modificators1 -> tkSemiColon, meth_modificators
{ 
			//parsertools.AddModifier((procedure_attributes_list)$2, proc_attribute.attr_overload); 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 645: // meth_modificators -> meth_modificator
{ 
			CurrentSemanticValue.stn = new procedure_attributes_list(ValueStack[ValueStack.Depth-1].id as procedure_attribute, CurrentLocationSpan); 
		}
        break;
      case 646: // meth_modificators -> meth_modificators, tkSemiColon, meth_modificator
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as procedure_attributes_list).Add(ValueStack[ValueStack.Depth-1].id as procedure_attribute, CurrentLocationSpan);  
		}
        break;
      case 647: // identifier -> tkIdentifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 648: // identifier -> property_specifier_directives
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 649: // identifier -> non_reserved
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 650: // identifier_or_keyword -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 651: // identifier_or_keyword -> keyword
{ CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); }
        break;
      case 652: // identifier_or_keyword -> reserved_keyword
{ CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); }
        break;
      case 653: // identifier_keyword_operatorname -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 654: // identifier_keyword_operatorname -> keyword
{ CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); }
        break;
      case 655: // identifier_keyword_operatorname -> operator_name_ident
{ CurrentSemanticValue.id = (ident)ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 656: // meth_modificator -> tkAbstract
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 657: // meth_modificator -> tkOverload
{ 
            CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id;
            parsertools.AddWarningFromResource("OVERLOAD_IS_NOT_USED", ValueStack[ValueStack.Depth-1].id.source_context);
        }
        break;
      case 658: // meth_modificator -> tkReintroduce
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 659: // meth_modificator -> tkOverride
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 660: // meth_modificator -> tkExtensionMethod
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 661: // meth_modificator -> tkVirtual
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 662: // property_specifier_directives -> tkRead
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 663: // property_specifier_directives -> tkWrite
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 664: // non_reserved -> tkName
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 665: // non_reserved -> tkNew
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 666: // visibility_specifier -> tkInternal
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 667: // visibility_specifier -> tkPublic
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 668: // visibility_specifier -> tkProtected
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 669: // visibility_specifier -> tkPrivate
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 670: // keyword -> visibility_specifier
{ 
			CurrentSemanticValue.ti = new token_info(ValueStack[ValueStack.Depth-1].id.name, CurrentLocationSpan);  
		}
        break;
      case 671: // keyword -> tkSealed
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 672: // keyword -> tkTemplate
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 673: // keyword -> tkOr
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 674: // keyword -> tkTypeOf
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 675: // keyword -> tkSizeOf
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 676: // keyword -> tkDefault
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 677: // keyword -> tkWhere
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 678: // keyword -> tkXor
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 679: // keyword -> tkAnd
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 680: // keyword -> tkDiv
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 681: // keyword -> tkMod
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 682: // keyword -> tkShl
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 683: // keyword -> tkShr
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 684: // keyword -> tkNot
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 685: // keyword -> tkAs
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 686: // keyword -> tkIn
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 687: // keyword -> tkIs
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 688: // keyword -> tkArray
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 689: // keyword -> tkSequence
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 690: // keyword -> tkBegin
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 691: // keyword -> tkCase
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 692: // keyword -> tkClass
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 693: // keyword -> tkConst
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 694: // keyword -> tkConstructor
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 695: // keyword -> tkDestructor
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 696: // keyword -> tkDownto
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 697: // keyword -> tkDo
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 698: // keyword -> tkElse
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 699: // keyword -> tkExcept
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 700: // keyword -> tkFile
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 701: // keyword -> tkAuto
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 702: // keyword -> tkFinalization
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 703: // keyword -> tkFinally
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 704: // keyword -> tkFor
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 705: // keyword -> tkForeach
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 706: // keyword -> tkFunction
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 707: // keyword -> tkIf
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 708: // keyword -> tkImplementation
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 709: // keyword -> tkInherited
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 710: // keyword -> tkInitialization
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 711: // keyword -> tkInterface
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 712: // keyword -> tkProcedure
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 713: // keyword -> tkProperty
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 714: // keyword -> tkRaise
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 715: // keyword -> tkRecord
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 716: // keyword -> tkRepeat
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 717: // keyword -> tkSet
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 718: // keyword -> tkTry
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 719: // keyword -> tkType
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 720: // keyword -> tkThen
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 721: // keyword -> tkTo
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 722: // keyword -> tkUntil
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 723: // keyword -> tkUses
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 724: // keyword -> tkVar
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 725: // keyword -> tkWhile
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 726: // keyword -> tkWith
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 727: // keyword -> tkNil
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 728: // keyword -> tkGoto
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 729: // keyword -> tkOf
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 730: // keyword -> tkLabel
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 731: // keyword -> tkProgram
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 732: // keyword -> tkUnit
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 733: // keyword -> tkLibrary
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 734: // keyword -> tkExternal
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 735: // keyword -> tkParams
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 736: // keyword -> tkEvent
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 737: // keyword -> tkYield
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 738: // reserved_keyword -> tkOperator
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 739: // reserved_keyword -> tkEnd
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 740: // overload_operator -> tkMinus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 741: // overload_operator -> tkPlus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 742: // overload_operator -> tkSlash
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 743: // overload_operator -> tkStar
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 744: // overload_operator -> tkEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 745: // overload_operator -> tkGreater
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 746: // overload_operator -> tkGreaterEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 747: // overload_operator -> tkLower
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 748: // overload_operator -> tkLowerEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 749: // overload_operator -> tkNotEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 750: // overload_operator -> tkOr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 751: // overload_operator -> tkXor
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 752: // overload_operator -> tkAnd
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 753: // overload_operator -> tkDiv
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 754: // overload_operator -> tkMod
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 755: // overload_operator -> tkShl
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 756: // overload_operator -> tkShr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 757: // overload_operator -> tkNot
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 758: // overload_operator -> tkIn
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 759: // overload_operator -> tkImplicit
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 760: // overload_operator -> tkExplicit
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 761: // overload_operator -> assign_operator
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 762: // assign_operator -> tkAssign
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 763: // assign_operator -> tkPlusEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 764: // assign_operator -> tkMinusEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 765: // assign_operator -> tkMultEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 766: // assign_operator -> tkDivEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 767: // func_decl_lambda -> identifier, tkArrow, lambda_function_body
{
			var idList = new ident_list(ValueStack[ValueStack.Depth-3].id, LocationStack[LocationStack.Depth-3]); 
			var formalPars = new formal_parameters(new typed_parameters(idList, new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null), parametr_kind.none, null, LocationStack[LocationStack.Depth-3]), LocationStack[LocationStack.Depth-3]);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null), ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 768: // func_decl_lambda -> tkRoundOpen, tkRoundClose, lambda_type_ref_noproctype, 
                //                     tkArrow, lambda_function_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 769: // func_decl_lambda -> tkRoundOpen, identifier, tkColon, fptype, tkRoundClose, 
                //                     lambda_type_ref_noproctype, tkArrow, lambda_function_body
{
			var idList = new ident_list(ValueStack[ValueStack.Depth-7].id, LocationStack[LocationStack.Depth-7]); 
            var loc = LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5]);
			var formalPars = new formal_parameters(new typed_parameters(idList, ValueStack[ValueStack.Depth-5].td, parametr_kind.none, null, loc), loc);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 770: // func_decl_lambda -> tkRoundOpen, identifier, tkSemiColon, full_lambda_fp_list, 
                //                     tkRoundClose, lambda_type_ref_noproctype, tkArrow, 
                //                     lambda_function_body
{
			var idList = new ident_list(ValueStack[ValueStack.Depth-7].id, LocationStack[LocationStack.Depth-7]);
			var formalPars = new formal_parameters(new typed_parameters(idList, new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null), parametr_kind.none, null, LocationStack[LocationStack.Depth-7]), LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5]));
			for (int i = 0; i < (ValueStack[ValueStack.Depth-5].stn as formal_parameters).params_list.Count; i++)
				formalPars.Add((ValueStack[ValueStack.Depth-5].stn as formal_parameters).params_list[i]);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 771: // func_decl_lambda -> tkRoundOpen, identifier, tkColon, fptype, tkSemiColon, 
                //                     full_lambda_fp_list, tkRoundClose, 
                //                     lambda_type_ref_noproctype, tkArrow, lambda_function_body
{
			var idList = new ident_list(ValueStack[ValueStack.Depth-9].id, LocationStack[LocationStack.Depth-9]);
            var loc = LexLocation.MergeAll(LocationStack[LocationStack.Depth-9],LocationStack[LocationStack.Depth-8],LocationStack[LocationStack.Depth-7]);
			var formalPars = new formal_parameters(new typed_parameters(idList, ValueStack[ValueStack.Depth-7].td, parametr_kind.none, null, loc), LexLocation.MergeAll(LocationStack[LocationStack.Depth-9],LocationStack[LocationStack.Depth-8],LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5]));
			for (int i = 0; i < (ValueStack[ValueStack.Depth-5].stn as formal_parameters).params_list.Count; i++)
				formalPars.Add((ValueStack[ValueStack.Depth-5].stn as formal_parameters).params_list[i]);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 772: // func_decl_lambda -> tkRoundOpen, expr_l1, tkComma, expr_l1_list, 
                //                     lambda_type_ref, optional_full_lambda_fp_list, 
                //                     tkRoundClose, rem_lambda
{ 
			if (ValueStack[ValueStack.Depth-1].ob==null) // It is a tuple - check for nothing except expr_list is in parentheses
			{
				if (!(ValueStack[ValueStack.Depth-4].td is lambda_inferred_type))
					parsertools.AddErrorFromResource("BAD_TUPLE",LocationStack[LocationStack.Depth-4]);
				if (ValueStack[ValueStack.Depth-3].stn != null)
					parsertools.AddErrorFromResource("BAD_TUPLE",LocationStack[LocationStack.Depth-4]);
				(ValueStack[ValueStack.Depth-5].stn as expression_list).expressions.Insert(0,ValueStack[ValueStack.Depth-7].ex);
				if ((ValueStack[ValueStack.Depth-5].stn as expression_list).expressions.Count>7) 
					parsertools.AddErrorFromResource("TUPLE_ELEMENTS_COUNT_MUST_BE_LESSEQUAL_7",LocationStack[LocationStack.Depth-4]);
				
				if (parsertools.build_tree_for_formatter)
					CurrentSemanticValue.ex = new tuple_node_for_formatter(ValueStack[ValueStack.Depth-5].stn as expression_list,CurrentLocationSpan);
				else	
				{
				    var dn = new dot_node(new dot_node(new ident("?System"),new ident("Tuple")),new ident("Create",CurrentLocationSpan));
					CurrentSemanticValue.ex = new method_call(dn,ValueStack[ValueStack.Depth-5].stn as expression_list,CurrentLocationSpan);
				}
			}
			else  // It is a lambda-expression. Expressions in parameters must be identifiers. 
			{
				var pair = ValueStack[ValueStack.Depth-1].ob as pair_type_stlist;
				
				if (ValueStack[ValueStack.Depth-4].td is lambda_inferred_type)
				{
					var formal_pars = new formal_parameters();
					var idd = ValueStack[ValueStack.Depth-7].ex as ident;
					if (idd==null)
						parsertools.AddErrorFromResource("ONE_TKIDENTIFIER",LocationStack[LocationStack.Depth-7]);
					var lambda_inf_type = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
					var new_typed_pars = new typed_parameters(new ident_list(idd, idd.source_context), lambda_inf_type, parametr_kind.none, null, idd.source_context);
					formal_pars.Add(new_typed_pars);
					foreach (var id in (ValueStack[ValueStack.Depth-5].stn as expression_list).expressions)
					{
						var idd1 = id as ident;
						if (idd1==null)
							parsertools.AddErrorFromResource("ONE_TKIDENTIFIER",id.source_context);
						
						lambda_inf_type = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
						new_typed_pars = new typed_parameters(new ident_list(idd1, idd1.source_context), lambda_inf_type, parametr_kind.none, null, idd1.source_context);
						formal_pars.Add(new_typed_pars);
					}
					
					if (ValueStack[ValueStack.Depth-3].stn != null)
						for (int i = 0; i < (ValueStack[ValueStack.Depth-3].stn as formal_parameters).params_list.Count; i++)
							formal_pars.Add((ValueStack[ValueStack.Depth-3].stn as formal_parameters).params_list[i]);		
						
					formal_pars.source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5],LocationStack[LocationStack.Depth-4]);
					CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formal_pars, pair.tn, pair.exprs, CurrentLocationSpan);
				}
				else
				{			
					var loc = LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5]);
					var idd = ValueStack[ValueStack.Depth-7].ex as ident;
					if (idd==null)
						parsertools.AddErrorFromResource("ONE_TKIDENTIFIER",LocationStack[LocationStack.Depth-7]);
					
					var idList = new ident_list(idd, loc);
					
					var iddlist = (ValueStack[ValueStack.Depth-5].stn as expression_list).expressions;
					
					for (int j = 0; j < iddlist.Count; j++)
					{
						var idd2 = iddlist[j] as ident;
						if (idd2==null)
							parsertools.AddErrorFromResource("ONE_TKIDENTIFIER",idd2.source_context);
						idList.idents.Add(idd2);
					}	
					var parsType = ValueStack[ValueStack.Depth-4].td;
					var formalPars = new formal_parameters(new typed_parameters(idList, parsType, parametr_kind.none, null, loc), LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5],LocationStack[LocationStack.Depth-4],LocationStack[LocationStack.Depth-3]));
					
					if (ValueStack[ValueStack.Depth-3].stn != null)
						for (int i = 0; i < (ValueStack[ValueStack.Depth-3].stn as formal_parameters).params_list.Count; i++)
							formalPars.Add((ValueStack[ValueStack.Depth-3].stn as formal_parameters).params_list[i]);
						
					CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, pair.tn, pair.exprs, CurrentLocationSpan);
				}
			}			
		}
        break;
      case 773: // func_decl_lambda -> expl_func_decl_lambda
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 774: // optional_full_lambda_fp_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 775: // optional_full_lambda_fp_list -> tkSemiColon, full_lambda_fp_list
{
		CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
	}
        break;
      case 776: // rem_lambda -> lambda_type_ref_noproctype, tkArrow, lambda_function_body
{ 
		    CurrentSemanticValue.ob = new pair_type_stlist(ValueStack[ValueStack.Depth-3].td,ValueStack[ValueStack.Depth-1].stn as statement_list);
		}
        break;
      case 777: // expl_func_decl_lambda -> tkFunction, lambda_type_ref, tkArrow, 
                //                          lambda_function_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, 1, CurrentLocationSpan);
		}
        break;
      case 778: // expl_func_decl_lambda -> tkFunction, tkRoundOpen, tkRoundClose, lambda_type_ref, 
                //                          tkArrow, lambda_function_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, 1, CurrentLocationSpan);
		}
        break;
      case 779: // expl_func_decl_lambda -> tkFunction, tkRoundOpen, full_lambda_fp_list, 
                //                          tkRoundClose, lambda_type_ref, tkArrow, 
                //                          lambda_function_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, 1, CurrentLocationSpan);
		}
        break;
      case 780: // expl_func_decl_lambda -> tkProcedure, tkArrow, lambda_procedure_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, null, ValueStack[ValueStack.Depth-1].stn as statement_list, 2, CurrentLocationSpan);
		}
        break;
      case 781: // expl_func_decl_lambda -> tkProcedure, tkRoundOpen, tkRoundClose, tkArrow, 
                //                          lambda_procedure_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, null, ValueStack[ValueStack.Depth-1].stn as statement_list, 2, CurrentLocationSpan);
		}
        break;
      case 782: // expl_func_decl_lambda -> tkProcedure, tkRoundOpen, full_lambda_fp_list, 
                //                          tkRoundClose, tkArrow, lambda_procedure_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), ValueStack[ValueStack.Depth-4].stn as formal_parameters, null, ValueStack[ValueStack.Depth-1].stn as statement_list, 2, CurrentLocationSpan);
		}
        break;
      case 783: // full_lambda_fp_list -> lambda_simple_fp_sect
{
			var typed_pars = ValueStack[ValueStack.Depth-1].stn as typed_parameters;
			if (typed_pars.vars_type is lambda_inferred_type)
			{
				CurrentSemanticValue.stn = new formal_parameters();
				foreach (var id in typed_pars.idents.idents)
				{
					var lambda_inf_type = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
					var new_typed_pars = new typed_parameters(new ident_list(id, id.source_context), lambda_inf_type, parametr_kind.none, null, id.source_context);
					(CurrentSemanticValue.stn as formal_parameters).Add(new_typed_pars);
				}
				CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
			}
			else
			{
				CurrentSemanticValue.stn = new formal_parameters(typed_pars, CurrentLocationSpan);
			}
		}
        break;
      case 784: // full_lambda_fp_list -> full_lambda_fp_list, tkSemiColon, lambda_simple_fp_sect
{
			CurrentSemanticValue.stn =(ValueStack[ValueStack.Depth-3].stn as formal_parameters).Add(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
		}
        break;
      case 785: // lambda_simple_fp_sect -> ident_list, lambda_type_ref
{
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-2].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.none, null, CurrentLocationSpan);
		}
        break;
      case 786: // lambda_type_ref -> /* empty */
{
			CurrentSemanticValue.td = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
		}
        break;
      case 787: // lambda_type_ref -> tkColon, fptype
{
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
		}
        break;
      case 788: // lambda_type_ref_noproctype -> /* empty */
{
			CurrentSemanticValue.td = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
		}
        break;
      case 789: // lambda_type_ref_noproctype -> tkColon, fptype_noproctype
{
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
		}
        break;
      case 790: // lambda_function_body -> expr_l1
{
			CurrentSemanticValue.stn = NewLambdaBody(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 791: // lambda_function_body -> compound_stmt
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 792: // lambda_function_body -> if_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 793: // lambda_function_body -> while_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 794: // lambda_function_body -> repeat_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 795: // lambda_function_body -> for_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 796: // lambda_function_body -> foreach_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 797: // lambda_function_body -> case_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 798: // lambda_function_body -> try_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 799: // lambda_function_body -> lock_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 800: // lambda_function_body -> yield_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 801: // lambda_procedure_body -> proc_call
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 802: // lambda_procedure_body -> compound_stmt
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 803: // lambda_procedure_body -> if_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 804: // lambda_procedure_body -> while_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 805: // lambda_procedure_body -> repeat_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 806: // lambda_procedure_body -> for_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 807: // lambda_procedure_body -> foreach_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 808: // lambda_procedure_body -> case_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 809: // lambda_procedure_body -> try_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 810: // lambda_procedure_body -> lock_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 811: // lambda_procedure_body -> yield_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 812: // lambda_procedure_body -> assignment
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
