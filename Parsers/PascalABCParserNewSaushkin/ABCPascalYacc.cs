// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  SSM
// DateTime: 14.06.2015 0:11:33
// UserName: ?????????
// Input file <D:\PascalABC.NET\!PABC_Git\Parsers\PascalABCParserNewSaushkin\ABCPascal.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using PascalABCCompiler.SyntaxTree;
using PascalABCSavParser;
using PascalABCCompiler.ParserTools;
using PascalABCCompiler.Errors;
using System.Linq;

namespace GPPGParserScanner
{
public enum Tokens {
    error=1,EOF=2,tkDirectiveName=3,tkAmpersend=4,tkColon=5,tkDotDot=6,
    tkPoint=7,tkRoundOpen=8,tkRoundClose=9,tkSemiColon=10,tkSquareOpen=11,tkSquareClose=12,
    tkQuestion=13,tkMatching=14,tkSizeOf=15,tkTypeOf=16,tkWhere=17,tkArray=18,
    tkCase=19,tkClass=20,tkAuto=21,tkConst=22,tkConstructor=23,tkDestructor=24,
    tkElse=25,tkExcept=26,tkFile=27,tkFor=28,tkForeach=29,tkFunction=30,
    tkIf=31,tkImplementation=32,tkInherited=33,tkInterface=34,tkProcedure=35,tkOperator=36,
    tkProperty=37,tkRaise=38,tkRecord=39,tkSet=40,tkType=41,tkThen=42,
    tkUses=43,tkVar=44,tkWhile=45,tkWith=46,tkNil=47,tkGoto=48,
    tkOf=49,tkLabel=50,tkLock=51,tkProgram=52,tkEvent=53,tkDefault=54,
    tkTemplate=55,tkPacked=56,tkExports=57,tkResourceString=58,tkThreadvar=59,tkSealed=60,
    tkPartial=61,tkTo=62,tkDownto=63,tkCycle=64,tkSequence=65,tkYield=66,
    tkNew=67,tkOn=68,tkName=69,tkPrivate=70,tkProtected=71,tkPublic=72,
    tkInternal=73,tkRead=74,tkWrite=75,tkParseModeExpression=76,tkParseModeStatement=77,tkParseModeType=78,
    tkBegin=79,tkEnd=80,tkAsmBody=81,tkILCode=82,tkError=83,INVISIBLE=84,
    tkRepeat=85,tkUntil=86,tkDo=87,tkComma=88,tkFinally=89,tkTry=90,
    tkInitialization=91,tkFinalization=92,tkUnit=93,tkLibrary=94,tkExternal=95,tkParams=96,
    tkAssign=97,tkPlusEqual=98,tkMinusEqual=99,tkMultEqual=100,tkDivEqual=101,tkMinus=102,
    tkPlus=103,tkSlash=104,tkStar=105,tkEqual=106,tkGreater=107,tkGreaterEqual=108,
    tkLower=109,tkLowerEqual=110,tkNotEqual=111,tkCSharpStyleOr=112,tkArrow=113,tkOr=114,
    tkXor=115,tkAnd=116,tkDiv=117,tkMod=118,tkShl=119,tkShr=120,
    tkNot=121,tkAs=122,tkIn=123,tkIs=124,tkImplicit=125,tkExplicit=126,
    tkAddressOf=127,tkDeref=128,tkIdentifier=129,tkStringLiteral=130,tkAsciiChar=131,tkAbstract=132,
    tkForward=133,tkOverload=134,tkReintroduce=135,tkOverride=136,tkVirtual=137,tkInteger=138,
    tkFloat=139,tkHex=140};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<PascalABCSavParser.Union,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public partial class GPPGParser: ShiftReduceParser<PascalABCSavParser.Union, LexLocation>
{
  // Verbatim content from D:\PascalABC.NET\!PABC_Git\Parsers\PascalABCParserNewSaushkin\ABCPascal.y
// ��� ���������� ����������� � ����� GPPGParser, �������������� ����� ������, ������������ �������� gppg
    public syntax_tree_node root; // �������� ���� ��������������� ������ 

    public List<Error> errors;
    public string current_file_name;
    public int max_errors = 10;
    public PT parsertools;
    public List<compiler_directive> CompilerDirectives;
	public ParserLambdaHelper lambdaHelper = new ParserLambdaHelper();
	
    public GPPGParser(AbstractScanner<PascalABCSavParser.Union, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from D:\PascalABC.NET\!PABC_Git\Parsers\PascalABCParserNewSaushkin\ABCPascal.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[768];
  private static State[] states = new State[1236];
  private static string[] nonTerms = new string[] {
      "parse_goal", "unit_key_word", "assignment", "optional_array_initializer", 
      "attribute_declarations", "ot_visibility_specifier", "one_attribute", "attribute_variable", 
      "const_factor", "const_variable_2", "const_term", "const_variable", "var_specifiers", 
      "literal_or_number", "unsigned_number", "program_block", "optional_var", 
      "class_attribute", "class_attributes", "class_attributes1", "member_list_section", 
      "optional_component_list_seq_end", "const_decl", "only_const_decl", "const_decl_sect", 
      "object_type", "record_type", "member_list", "method_decl_list", "field_or_const_definition_list", 
      "case_stmt", "case_list", "program_decl_sect_list", "int_decl_sect_list1", 
      "inclass_decl_sect_list1", "interface_decl_sect_list", "decl_sect_list", 
      "decl_sect_list1", "inclass_decl_sect_list", "field_or_const_definition", 
      "abc_decl_sect", "decl_sect", "int_decl_sect", "type_decl", "simple_type_decl", 
      "simple_field_or_const_definition", "res_str_decl_sect", "method_decl_withattr", 
      "method_or_property_decl", "property_definition", "fp_sect", "default_expr", 
      "expr_as_stmt", "exception_block", "external_block", "exception_handler", 
      "exception_handler_list", "exception_identifier", "typed_const_list1", 
      "typed_const_list", "optional_expr_list", "elem_list", "optional_expr_list_with_bracket", 
      "expr_list", "const_elem_list1", "const_func_expr_list", "case_label_list", 
      "const_elem_list", "optional_const_func_expr_list", "elem_list1", "enumeration_id", 
      "enumeration_id_list", "const_simple_expr", "term", "typed_const", "typed_const_or_new", 
      "expr", "const_expr", "elem", "range_expr", "const_elem", "array_const", 
      "factor", "relop_expr", "expr_l1", "simple_expr", "range_term", "range_factor", 
      "external_directive_ident", "init_const_expr", "case_label", "variable", 
      "var_reference", "for_cycle_type", "format_expr", "foreach_stmt", "for_stmt", 
      "yield_stmt", "fp_list", "fp_sect_list", "file_type", "sequence_type", 
      "var_address", "goto_stmt", "my_stmt", "func_name_ident", "param_name", 
      "const_field_name", "func_name_with_template_args", "identifier_or_keyword", 
      "unit_name", "exception_variable", "const_name", "func_meth_name_ident", 
      "label_name", "type_decl_identifier", "template_identifier_with_equal", 
      "program_param", "identifier", "identifier_keyword_operatorname", "func_class_name_ident", 
      "optional_identifier", "visibility_specifier", "property_specifier_directives", 
      "non_reserved", "if_stmt", "initialization_part", "template_arguments", 
      "label_list", "ident_or_keyword_pointseparator_list", "ident_list", "param_name_list", 
      "inherited_message", "implementation_part", "interface_part", "abc_interface_part", 
      "simple_type_list", "literal", "one_literal", "literal_list", "label_decl_sect", 
      "lock_stmt", "func_name", "proc_name", "optional_proc_name", "qualified_identifier", 
      "new_expr", "allowable_expr_as_stmt", "parts", "inclass_block", "block", 
      "proc_func_external_block", "exception_class_type_identifier", "simple_type_identifier", 
      "base_class_name", "base_classes_names_list", "optional_base_classes", 
      "one_compiler_directive", "optional_head_compiler_directives", "head_compiler_directives", 
      "program_heading_2", "optional_tk_point", "program_param_list", "optional_semicolon", 
      "operator_name_ident", "const_relop", "const_addop", "assign_operator", 
      "const_mulop", "relop", "addop", "mulop", "sign", "overload_operator", 
      "typecast_op", "property_specifiers", "array_defaultproperty", "meth_modificators", 
      "optional_method_modificators", "optional_method_modificators1", "meth_modificator", 
      "proc_call", "proc_func_constr_destr_decl", "proc_func_decl", "inclass_proc_func_decl", 
      "inclass_proc_func_decl_noclass", "constr_destr_decl", "inclass_constr_destr_decl", 
      "method_decl", "proc_func_constr_destr_decl_with_attr", "proc_func_decl_noclass", 
      "method_header", "proc_type_decl", "procedural_type_kind", "proc_header", 
      "procedural_type", "constr_destr_header", "proc_func_header", "func_header", 
      "method_procfunc_header", "int_func_header", "int_proc_header", "property_interface", 
      "program_file", "program_header", "parameter_decl", "parameter_decl_list", 
      "property_parameter_list", "const_set", "question_expr", "question_constexpr", 
      "record_const", "const_field_list_1", "const_field_list", "const_field", 
      "repeat_stmt", "raise_stmt", "pointer_type", "attribute_declaration", "one_or_some_attribute", 
      "stmt_list", "else_case", "exception_block_else_branch", "compound_stmt", 
      "string_type", "sizeof_expr", "simple_prim_property_definition", "simple_property_definition", 
      "stmt_or_expression", "unlabelled_stmt", "stmt", "case_item", "set_type", 
      "as_is_expr", "as_is_constexpr", "unsized_array_type", "simple_type_or_", 
      "simple_type", "array_name_for_new_expr", "foreach_stmt_ident_dype_opt", 
      "fptype", "type_ref", "array_type", "template_param", "structured_type", 
      "unpacked_structured_type", "simple_or_template_type_reference", "type_ref_or_secific", 
      "for_stmt_decl_or_assign", "type_decl_type", "type_ref_and_secific_list", 
      "type_decl_sect", "try_handler", "class_or_interface_keyword", "optional_tk_do", 
      "keyword", "reserved_keyword", "typeof_expr", "simple_fp_sect", "template_param_list", 
      "template_type_params", "template_type", "try_stmt", "uses_clause", "used_units_list", 
      "unit_file", "used_unit_name", "unit_header", "var_decl_sect", "var_decl", 
      "var_decl_part", "field_definition", "var_stmt", "where_part", "where_part_list", 
      "optional_where_section", "while_stmt", "with_stmt", "variable_as_type", 
      "dotted_identifier", "func_decl_lambda", "expl_func_decl_lambda", "lambda_type_ref", 
      "full_lambda_fp_list", "lambda_simple_fp_sect", "lambda_function_body", 
      "lambda_procedure_body", "field_in_unnamed_object", "list_fields_in_unnamed_object", 
      "func_class_name_ident_list", "tkAssignOrEqual", "$accept", };

  static GPPGParser() {
    states[0] = new State(new int[]{52,1150,11,600,76,1221,78,1223,77,1230,3,-24,43,-24,79,-24,50,-24,22,-24,58,-24,41,-24,44,-24,53,-24,35,-24,30,-24,20,-24,23,-24,24,-24,93,-193,94,-193},new int[]{-1,1,-204,3,-205,4,-266,1162,-5,1163,-219,612,-149,1220});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{3,1146,43,-11,79,-11,50,-11,22,-11,58,-11,41,-11,44,-11,53,-11,11,-11,35,-11,30,-11,20,-11,23,-11,24,-11},new int[]{-159,5,-160,1144,-158,1149});
    states[5] = new State(new int[]{43,1132,79,-35,50,-35,22,-35,58,-35,41,-35,44,-35,53,-35,11,-35,35,-35,30,-35,20,-35,23,-35,24,-35},new int[]{-264,6});
    states[6] = new State(-58,new int[]{-16,7,-33,14,-37,1079,-38,1080});
    states[7] = new State(new int[]{7,9,10,10,5,11,88,12,6,13,2,-23},new int[]{-162,8});
    states[8] = new State(-17);
    states[9] = new State(-18);
    states[10] = new State(-19);
    states[11] = new State(-20);
    states[12] = new State(-21);
    states[13] = new State(-22);
    states[14] = new State(new int[]{79,16},new int[]{-224,15});
    states[15] = new State(-31);
    states[16] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,80,-437,10,-437},new int[]{-221,17,-231,783,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[17] = new State(new int[]{80,18,10,19});
    states[18] = new State(-463);
    states[19] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,80,-437,10,-437,86,-437,89,-437,26,-437,92,-437},new int[]{-231,20,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[20] = new State(-465);
    states[21] = new State(-435);
    states[22] = new State(-438);
    states[23] = new State(new int[]{97,248,98,249,99,250,100,251,101,252,80,-461,10,-461,86,-461,89,-461,26,-461,92,-461,25,-461},new int[]{-168,24});
    states[24] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,25,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[25] = new State(-460);
    states[26] = new State(new int[]{13,27,80,-518,10,-518,86,-518,89,-518,26,-518,92,-518,25,-518,2,-518,6,-518,88,-518,12,-518,9,-518,87,-518,73,-518,72,-518,71,-518,70,-518,42,-518,49,-518,127,-518,129,-518,74,-518,75,-518,69,-518,67,-518,36,-518,33,-518,8,-518,15,-518,16,-518,130,-518,131,-518,138,-518,140,-518,139,-518,48,-518,79,-518,31,-518,19,-518,85,-518,45,-518,28,-518,46,-518,90,-518,38,-518,29,-518,44,-518,51,-518,64,-518,66,-518,62,-518,63,-518});
    states[27] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269},new int[]{-85,28,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275});
    states[28] = new State(new int[]{5,29,13,27});
    states[29] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269},new int[]{-85,30,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275});
    states[30] = new State(new int[]{13,27,80,-525,10,-525,86,-525,89,-525,26,-525,92,-525,25,-525,2,-525,5,-525,6,-525,88,-525,12,-525,9,-525,87,-525,73,-525,72,-525,71,-525,70,-525,42,-525,49,-525,127,-525,129,-525,74,-525,75,-525,69,-525,67,-525,36,-525,33,-525,8,-525,15,-525,16,-525,130,-525,131,-525,138,-525,140,-525,139,-525,48,-525,79,-525,31,-525,19,-525,85,-525,45,-525,28,-525,46,-525,90,-525,38,-525,29,-525,44,-525,51,-525,64,-525,66,-525,62,-525,63,-525});
    states[31] = new State(new int[]{14,911,106,913,111,914,109,915,107,916,110,917,108,918,123,919,13,-521,80,-521,10,-521,86,-521,89,-521,26,-521,92,-521,25,-521,2,-521,5,-521,6,-521,88,-521,12,-521,9,-521,87,-521,73,-521,72,-521,71,-521,70,-521,42,-521,49,-521,127,-521,129,-521,74,-521,75,-521,69,-521,67,-521,36,-521,33,-521,8,-521,15,-521,16,-521,130,-521,131,-521,138,-521,140,-521,139,-521,48,-521,79,-521,31,-521,19,-521,85,-521,45,-521,28,-521,46,-521,90,-521,38,-521,29,-521,44,-521,51,-521,64,-521,66,-521,62,-521,63,-521},new int[]{-170,32});
    states[32] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269},new int[]{-86,33,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274});
    states[33] = new State(new int[]{103,169,102,170,114,171,115,172,112,173,14,-543,106,-543,111,-543,109,-543,107,-543,110,-543,108,-543,123,-543,13,-543,80,-543,10,-543,86,-543,89,-543,26,-543,92,-543,25,-543,2,-543,5,-543,6,-543,88,-543,12,-543,9,-543,87,-543,73,-543,72,-543,71,-543,70,-543,42,-543,49,-543,127,-543,129,-543,74,-543,75,-543,69,-543,67,-543,36,-543,33,-543,8,-543,15,-543,16,-543,130,-543,131,-543,138,-543,140,-543,139,-543,48,-543,79,-543,31,-543,19,-543,85,-543,45,-543,28,-543,46,-543,90,-543,38,-543,29,-543,44,-543,51,-543,64,-543,66,-543,62,-543,63,-543},new int[]{-171,34});
    states[34] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269},new int[]{-74,35,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274});
    states[35] = new State(new int[]{105,177,104,178,117,179,118,180,119,181,120,182,116,183,122,184,124,185,5,-555,103,-555,102,-555,114,-555,115,-555,112,-555,14,-555,106,-555,111,-555,109,-555,107,-555,110,-555,108,-555,123,-555,13,-555,80,-555,10,-555,86,-555,89,-555,26,-555,92,-555,25,-555,2,-555,6,-555,88,-555,12,-555,9,-555,87,-555,73,-555,72,-555,71,-555,70,-555,42,-555,49,-555,127,-555,129,-555,74,-555,75,-555,69,-555,67,-555,36,-555,33,-555,8,-555,15,-555,16,-555,130,-555,131,-555,138,-555,140,-555,139,-555,48,-555,79,-555,31,-555,19,-555,85,-555,45,-555,28,-555,46,-555,90,-555,38,-555,29,-555,44,-555,51,-555,64,-555,66,-555,62,-555,63,-555},new int[]{-172,36,-175,175});
    states[36] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,49,36,224,33,253,8,262,15,264,16,269},new int[]{-83,37,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268});
    states[37] = new State(-566);
    states[38] = new State(-576);
    states[39] = new State(new int[]{7,40,105,-577,104,-577,117,-577,118,-577,119,-577,120,-577,116,-577,122,-577,124,-577,5,-577,103,-577,102,-577,114,-577,115,-577,112,-577,14,-577,106,-577,111,-577,109,-577,107,-577,110,-577,108,-577,123,-577,13,-577,80,-577,10,-577,86,-577,89,-577,26,-577,92,-577,25,-577,2,-577,6,-577,88,-577,12,-577,9,-577,87,-577,73,-577,72,-577,71,-577,70,-577,42,-577,49,-577,127,-577,129,-577,74,-577,75,-577,69,-577,67,-577,36,-577,33,-577,8,-577,15,-577,16,-577,130,-577,131,-577,138,-577,140,-577,139,-577,48,-577,79,-577,31,-577,19,-577,85,-577,45,-577,28,-577,46,-577,90,-577,38,-577,29,-577,44,-577,51,-577,64,-577,66,-577,62,-577,63,-577});
    states[40] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,73,52,72,53,71,54,70,55,60,56,55,57,114,58,16,59,15,60,54,61,17,62,115,63,116,64,117,65,118,66,119,67,120,68,121,69,122,70,123,71,124,72,18,73,65,74,79,75,19,76,20,77,22,78,23,79,24,80,63,81,87,82,25,83,26,84,27,85,21,86,92,87,89,88,28,89,29,90,30,91,31,92,32,93,33,94,91,95,34,96,35,97,37,98,38,99,39,100,85,101,40,102,90,103,41,104,42,105,62,106,86,107,43,108,44,109,45,110,46,111,47,112,48,113,49,114,50,115,52,116,93,117,94,118,95,119,96,120,36,122,80,123},new int[]{-110,41,-119,42,-124,44,-125,47,-256,50,-123,51,-257,121});
    states[41] = new State(-601);
    states[42] = new State(-631);
    states[43] = new State(-628);
    states[44] = new State(-629);
    states[45] = new State(-642);
    states[46] = new State(-643);
    states[47] = new State(-630);
    states[48] = new State(-644);
    states[49] = new State(-645);
    states[50] = new State(-632);
    states[51] = new State(-650);
    states[52] = new State(-646);
    states[53] = new State(-647);
    states[54] = new State(-648);
    states[55] = new State(-649);
    states[56] = new State(-651);
    states[57] = new State(-652);
    states[58] = new State(-653);
    states[59] = new State(-654);
    states[60] = new State(-655);
    states[61] = new State(-656);
    states[62] = new State(-657);
    states[63] = new State(-658);
    states[64] = new State(-659);
    states[65] = new State(-660);
    states[66] = new State(-661);
    states[67] = new State(-662);
    states[68] = new State(-663);
    states[69] = new State(-664);
    states[70] = new State(-665);
    states[71] = new State(-666);
    states[72] = new State(-667);
    states[73] = new State(-668);
    states[74] = new State(-669);
    states[75] = new State(-670);
    states[76] = new State(-671);
    states[77] = new State(-672);
    states[78] = new State(-673);
    states[79] = new State(-674);
    states[80] = new State(-675);
    states[81] = new State(-676);
    states[82] = new State(-677);
    states[83] = new State(-678);
    states[84] = new State(-679);
    states[85] = new State(-680);
    states[86] = new State(-681);
    states[87] = new State(-682);
    states[88] = new State(-683);
    states[89] = new State(-684);
    states[90] = new State(-685);
    states[91] = new State(-686);
    states[92] = new State(-687);
    states[93] = new State(-688);
    states[94] = new State(-689);
    states[95] = new State(-690);
    states[96] = new State(-691);
    states[97] = new State(-692);
    states[98] = new State(-693);
    states[99] = new State(-694);
    states[100] = new State(-695);
    states[101] = new State(-696);
    states[102] = new State(-697);
    states[103] = new State(-698);
    states[104] = new State(-699);
    states[105] = new State(-700);
    states[106] = new State(-701);
    states[107] = new State(-702);
    states[108] = new State(-703);
    states[109] = new State(-704);
    states[110] = new State(-705);
    states[111] = new State(-706);
    states[112] = new State(-707);
    states[113] = new State(-708);
    states[114] = new State(-709);
    states[115] = new State(-710);
    states[116] = new State(-711);
    states[117] = new State(-712);
    states[118] = new State(-713);
    states[119] = new State(-714);
    states[120] = new State(-715);
    states[121] = new State(-633);
    states[122] = new State(-716);
    states[123] = new State(-717);
    states[124] = new State(-584);
    states[125] = new State(new int[]{130,127,131,128,7,-618,105,-618,104,-618,117,-618,118,-618,119,-618,120,-618,116,-618,122,-618,124,-618,5,-618,103,-618,102,-618,114,-618,115,-618,112,-618,14,-618,106,-618,111,-618,109,-618,107,-618,110,-618,108,-618,123,-618,13,-618,80,-618,10,-618,86,-618,89,-618,26,-618,92,-618,25,-618,2,-618,6,-618,88,-618,12,-618,9,-618,87,-618,73,-618,72,-618,71,-618,70,-618,42,-618,49,-618,127,-618,129,-618,74,-618,75,-618,69,-618,67,-618,36,-618,33,-618,8,-618,15,-618,16,-618,138,-618,140,-618,139,-618,48,-618,79,-618,31,-618,19,-618,85,-618,45,-618,28,-618,46,-618,90,-618,38,-618,29,-618,44,-618,51,-618,64,-618,66,-618,62,-618,63,-618,113,-618,97,-618,11,-618},new int[]{-139,126});
    states[126] = new State(-620);
    states[127] = new State(-616);
    states[128] = new State(-617);
    states[129] = new State(-619);
    states[130] = new State(-585);
    states[131] = new State(-170);
    states[132] = new State(-171);
    states[133] = new State(-172);
    states[134] = new State(-578);
    states[135] = new State(new int[]{8,136});
    states[136] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-247,137,-154,139,-119,152,-124,44,-125,47});
    states[137] = new State(new int[]{9,138});
    states[138] = new State(-575);
    states[139] = new State(new int[]{7,140,4,143,109,145,9,-526,105,-526,104,-526,117,-526,118,-526,119,-526,120,-526,116,-526,122,-526,124,-526,5,-526,103,-526,102,-526,114,-526,115,-526,112,-526,14,-526,106,-526,111,-526,107,-526,110,-526,108,-526,123,-526,13,-526,80,-526,10,-526,86,-526,89,-526,26,-526,92,-526,25,-526,2,-526,6,-526,88,-526,12,-526,87,-526,73,-526,72,-526,71,-526,70,-526,42,-526,49,-526,127,-526,129,-526,74,-526,75,-526,69,-526,67,-526,36,-526,33,-526,8,-526,15,-526,16,-526,130,-526,131,-526,138,-526,140,-526,139,-526,48,-526,79,-526,31,-526,19,-526,85,-526,45,-526,28,-526,46,-526,90,-526,38,-526,29,-526,44,-526,51,-526,64,-526,66,-526,62,-526,63,-526},new int[]{-261,142});
    states[140] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,73,52,72,53,71,54,70,55,60,56,55,57,114,58,16,59,15,60,54,61,17,62,115,63,116,64,117,65,118,66,119,67,120,68,121,69,122,70,123,71,124,72,18,73,65,74,79,75,19,76,20,77,22,78,23,79,24,80,63,81,87,82,25,83,26,84,27,85,21,86,92,87,89,88,28,89,29,90,30,91,31,92,32,93,33,94,91,95,34,96,35,97,37,98,38,99,39,100,85,101,40,102,90,103,41,104,42,105,62,106,86,107,43,108,44,109,45,110,46,111,47,112,48,113,49,114,50,115,52,116,93,117,94,118,95,119,96,120,36,122,80,123},new int[]{-110,141,-119,42,-124,44,-125,47,-256,50,-123,51,-257,121});
    states[141] = new State(-233);
    states[142] = new State(-527);
    states[143] = new State(new int[]{109,145},new int[]{-261,144});
    states[144] = new State(-528);
    states[145] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-260,146,-244,154,-154,150,-119,152,-124,44,-125,47,-262,153});
    states[146] = new State(new int[]{107,147,88,148});
    states[147] = new State(-214);
    states[148] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-244,149,-154,150,-119,152,-124,44,-125,47,-262,153});
    states[149] = new State(-216);
    states[150] = new State(new int[]{7,140,109,145,107,-217,88,-217,113,-217,9,-217,10,-217,97,-217,106,-217,80,-217,73,-217,72,-217,71,-217,70,-217,86,-217,89,-217,26,-217,92,-217,25,-217,2,-217,123,-217,74,-217,75,-217,12,-217,11,-217},new int[]{-261,151});
    states[151] = new State(-213);
    states[152] = new State(-232);
    states[153] = new State(-218);
    states[154] = new State(-215);
    states[155] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453,12,-611},new int[]{-62,156,-70,158,-79,1078,-77,161,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[156] = new State(new int[]{12,157});
    states[157] = new State(-579);
    states[158] = new State(new int[]{88,159,12,-610});
    states[159] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-79,160,-77,161,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[160] = new State(-613);
    states[161] = new State(new int[]{6,162,88,-614,12,-614});
    states[162] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,163,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[163] = new State(-615);
    states[164] = new State(new int[]{5,165,103,169,102,170,114,171,115,172,112,173,14,-542,106,-542,111,-542,109,-542,107,-542,110,-542,108,-542,123,-542,13,-542,80,-542,10,-542,86,-542,89,-542,26,-542,92,-542,25,-542,2,-542,6,-542,88,-542,12,-542,9,-542,87,-542,73,-542,72,-542,71,-542,70,-542,42,-542,49,-542,127,-542,129,-542,74,-542,75,-542,69,-542,67,-542,36,-542,33,-542,8,-542,15,-542,16,-542,130,-542,131,-542,138,-542,140,-542,139,-542,48,-542,79,-542,31,-542,19,-542,85,-542,45,-542,28,-542,46,-542,90,-542,38,-542,29,-542,44,-542,51,-542,64,-542,66,-542,62,-542,63,-542},new int[]{-171,34});
    states[165] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269},new int[]{-86,166,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274});
    states[166] = new State(new int[]{5,167,103,169,102,170,114,171,115,172,112,173,80,-545,10,-545,86,-545,89,-545,26,-545,92,-545,25,-545,2,-545,6,-545,88,-545,12,-545,9,-545,87,-545,73,-545,72,-545,71,-545,70,-545,42,-545,49,-545,127,-545,129,-545,74,-545,75,-545,69,-545,67,-545,36,-545,33,-545,8,-545,15,-545,16,-545,130,-545,131,-545,138,-545,140,-545,139,-545,48,-545,79,-545,31,-545,19,-545,85,-545,45,-545,28,-545,46,-545,90,-545,38,-545,29,-545,44,-545,51,-545,64,-545,66,-545,62,-545,63,-545},new int[]{-171,34});
    states[167] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269},new int[]{-86,168,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274});
    states[168] = new State(new int[]{103,169,102,170,114,171,115,172,112,173,80,-546,10,-546,86,-546,89,-546,26,-546,92,-546,25,-546,2,-546,6,-546,88,-546,12,-546,9,-546,87,-546,73,-546,72,-546,71,-546,70,-546,42,-546,49,-546,127,-546,129,-546,74,-546,75,-546,69,-546,67,-546,36,-546,33,-546,8,-546,15,-546,16,-546,130,-546,131,-546,138,-546,140,-546,139,-546,48,-546,79,-546,31,-546,19,-546,85,-546,45,-546,28,-546,46,-546,90,-546,38,-546,29,-546,44,-546,51,-546,64,-546,66,-546,62,-546,63,-546},new int[]{-171,34});
    states[169] = new State(-556);
    states[170] = new State(-557);
    states[171] = new State(-558);
    states[172] = new State(-559);
    states[173] = new State(-560);
    states[174] = new State(new int[]{105,177,104,178,117,179,118,180,119,181,120,182,116,183,122,184,124,185,5,-554,103,-554,102,-554,114,-554,115,-554,112,-554,14,-554,106,-554,111,-554,109,-554,107,-554,110,-554,108,-554,123,-554,13,-554,80,-554,10,-554,86,-554,89,-554,26,-554,92,-554,25,-554,2,-554,6,-554,88,-554,12,-554,9,-554,87,-554,73,-554,72,-554,71,-554,70,-554,42,-554,49,-554,127,-554,129,-554,74,-554,75,-554,69,-554,67,-554,36,-554,33,-554,8,-554,15,-554,16,-554,130,-554,131,-554,138,-554,140,-554,139,-554,48,-554,79,-554,31,-554,19,-554,85,-554,45,-554,28,-554,46,-554,90,-554,38,-554,29,-554,44,-554,51,-554,64,-554,66,-554,62,-554,63,-554},new int[]{-172,36,-175,175});
    states[175] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-247,176,-154,139,-119,152,-124,44,-125,47});
    states[176] = new State(-563);
    states[177] = new State(-568);
    states[178] = new State(-569);
    states[179] = new State(-570);
    states[180] = new State(-571);
    states[181] = new State(-572);
    states[182] = new State(-573);
    states[183] = new State(-574);
    states[184] = new State(-561);
    states[185] = new State(-562);
    states[186] = new State(-564);
    states[187] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,49,36,224,33,253,8,262,15,264,16,269},new int[]{-83,188,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268});
    states[188] = new State(-580);
    states[189] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,49,36,224,33,253,8,262,15,264,16,269},new int[]{-83,190,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268});
    states[190] = new State(-581);
    states[191] = new State(-150);
    states[192] = new State(-151);
    states[193] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,49,36,224,33,253,8,262,15,264,16,269},new int[]{-83,194,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268});
    states[194] = new State(-582);
    states[195] = new State(-583);
    states[196] = new State(new int[]{127,1077,129,43,74,45,75,46,69,48,67,49,36,224,33,253,8,262,15,264,16,269,130,127,131,128,138,131,140,132,139,133},new int[]{-92,197,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130});
    states[197] = new State(new int[]{11,199,8,206,7,1069,128,1074,4,1075,97,-586,98,-586,99,-586,100,-586,101,-586,80,-586,10,-586,86,-586,89,-586,26,-586,92,-586,105,-586,104,-586,117,-586,118,-586,119,-586,120,-586,116,-586,122,-586,124,-586,5,-586,103,-586,102,-586,114,-586,115,-586,112,-586,14,-586,106,-586,111,-586,109,-586,107,-586,110,-586,108,-586,123,-586,13,-586,25,-586,2,-586,6,-586,88,-586,12,-586,9,-586,87,-586,73,-586,72,-586,71,-586,70,-586,42,-586,49,-586,127,-586,129,-586,74,-586,75,-586,69,-586,67,-586,36,-586,33,-586,15,-586,16,-586,130,-586,131,-586,138,-586,140,-586,139,-586,48,-586,79,-586,31,-586,19,-586,85,-586,45,-586,28,-586,46,-586,90,-586,38,-586,29,-586,44,-586,51,-586,64,-586,66,-586,62,-586,63,-586},new int[]{-13,198});
    states[198] = new State(-602);
    states[199] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-64,200,-77,210,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[200] = new State(new int[]{12,201,88,202});
    states[201] = new State(-603);
    states[202] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,203,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[203] = new State(-515);
    states[204] = new State(-588);
    states[205] = new State(new int[]{11,199,8,206,7,1069,128,1074,4,1075,97,-587,98,-587,99,-587,100,-587,101,-587,80,-587,10,-587,86,-587,89,-587,26,-587,92,-587,105,-587,104,-587,117,-587,118,-587,119,-587,120,-587,116,-587,122,-587,124,-587,5,-587,103,-587,102,-587,114,-587,115,-587,112,-587,14,-587,106,-587,111,-587,109,-587,107,-587,110,-587,108,-587,123,-587,13,-587,25,-587,2,-587,6,-587,88,-587,12,-587,9,-587,87,-587,73,-587,72,-587,71,-587,70,-587,42,-587,49,-587,127,-587,129,-587,74,-587,75,-587,69,-587,67,-587,36,-587,33,-587,15,-587,16,-587,130,-587,131,-587,138,-587,140,-587,139,-587,48,-587,79,-587,31,-587,19,-587,85,-587,45,-587,28,-587,46,-587,90,-587,38,-587,29,-587,44,-587,51,-587,64,-587,66,-587,62,-587,63,-587},new int[]{-13,198});
    states[206] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453,9,-609},new int[]{-61,207,-64,209,-77,210,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[207] = new State(new int[]{9,208});
    states[208] = new State(-604);
    states[209] = new State(new int[]{88,202,9,-608,12,-608});
    states[210] = new State(-514);
    states[211] = new State(new int[]{113,212,11,-595,8,-595,7,-595,128,-595,4,-595,105,-595,104,-595,117,-595,118,-595,119,-595,120,-595,116,-595,122,-595,124,-595,5,-595,103,-595,102,-595,114,-595,115,-595,112,-595,14,-595,106,-595,111,-595,109,-595,107,-595,110,-595,108,-595,123,-595,13,-595,80,-595,10,-595,86,-595,89,-595,26,-595,92,-595,25,-595,2,-595,6,-595,88,-595,12,-595,9,-595,87,-595,73,-595,72,-595,71,-595,70,-595,42,-595,49,-595,127,-595,129,-595,74,-595,75,-595,69,-595,67,-595,36,-595,33,-595,15,-595,16,-595,130,-595,131,-595,138,-595,140,-595,139,-595,48,-595,79,-595,31,-595,19,-595,85,-595,45,-595,28,-595,46,-595,90,-595,38,-595,29,-595,44,-595,51,-595,64,-595,66,-595,62,-595,63,-595,97,-595,98,-595,99,-595,100,-595,101,-595});
    states[212] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269,79,16},new int[]{-286,213,-85,214,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-224,283});
    states[213] = new State(-745);
    states[214] = new State(new int[]{13,27,80,-764,10,-764,86,-764,89,-764,26,-764,92,-764,25,-764,2,-764,6,-764,88,-764,12,-764,9,-764,87,-764,73,-764,72,-764,71,-764,70,-764,42,-764,49,-764,127,-764,129,-764,74,-764,75,-764,69,-764,67,-764,36,-764,33,-764,8,-764,15,-764,16,-764,130,-764,131,-764,138,-764,140,-764,139,-764,48,-764,79,-764,31,-764,19,-764,85,-764,45,-764,28,-764,46,-764,90,-764,38,-764,29,-764,44,-764,51,-764,64,-764,66,-764,62,-764,63,-764,5,-764});
    states[215] = new State(new int[]{103,169,102,170,114,171,115,172,112,173,14,-542,106,-542,111,-542,109,-542,107,-542,110,-542,108,-542,123,-542,5,-542,13,-542,80,-542,10,-542,86,-542,89,-542,26,-542,92,-542,25,-542,2,-542,6,-542,88,-542,12,-542,9,-542,87,-542,73,-542,72,-542,71,-542,70,-542,42,-542,49,-542,127,-542,129,-542,74,-542,75,-542,69,-542,67,-542,36,-542,33,-542,8,-542,15,-542,16,-542,130,-542,131,-542,138,-542,140,-542,139,-542,48,-542,79,-542,31,-542,19,-542,85,-542,45,-542,28,-542,46,-542,90,-542,38,-542,29,-542,44,-542,51,-542,64,-542,66,-542,62,-542,63,-542},new int[]{-171,34});
    states[216] = new State(-595);
    states[217] = new State(new int[]{20,1055,129,43,74,45,75,46,69,48,67,49,18,1068,11,-645,8,-645,7,-645,128,-645,4,-645,97,-645,98,-645,99,-645,100,-645,101,-645,80,-645,10,-645,5,-645,86,-645,89,-645,26,-645,92,-645,113,-645,105,-645,104,-645,117,-645,118,-645,119,-645,120,-645,116,-645,122,-645,124,-645,103,-645,102,-645,114,-645,115,-645,112,-645,14,-645,106,-645,111,-645,109,-645,107,-645,110,-645,108,-645,123,-645,13,-645,25,-645,2,-645,6,-645,88,-645,12,-645,9,-645,87,-645,73,-645,72,-645,71,-645,70,-645,42,-645,49,-645,127,-645,36,-645,33,-645,15,-645,16,-645,130,-645,131,-645,138,-645,140,-645,139,-645,48,-645,79,-645,31,-645,19,-645,85,-645,45,-645,28,-645,46,-645,90,-645,38,-645,29,-645,44,-645,51,-645,64,-645,66,-645,62,-645,63,-645},new int[]{-247,218,-239,1047,-154,1066,-119,152,-124,44,-125,47,-236,1067});
    states[218] = new State(new int[]{8,220,80,-540,10,-540,86,-540,89,-540,26,-540,92,-540,105,-540,104,-540,117,-540,118,-540,119,-540,120,-540,116,-540,122,-540,124,-540,5,-540,103,-540,102,-540,114,-540,115,-540,112,-540,14,-540,106,-540,111,-540,109,-540,107,-540,110,-540,108,-540,123,-540,13,-540,25,-540,2,-540,6,-540,88,-540,12,-540,9,-540,87,-540,73,-540,72,-540,71,-540,70,-540,42,-540,49,-540,127,-540,129,-540,74,-540,75,-540,69,-540,67,-540,36,-540,33,-540,15,-540,16,-540,130,-540,131,-540,138,-540,140,-540,139,-540,48,-540,79,-540,31,-540,19,-540,85,-540,45,-540,28,-540,46,-540,90,-540,38,-540,29,-540,44,-540,51,-540,64,-540,66,-540,62,-540,63,-540},new int[]{-63,219});
    states[219] = new State(-531);
    states[220] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453,9,-609},new int[]{-61,221,-64,209,-77,210,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[221] = new State(new int[]{9,222});
    states[222] = new State(-541);
    states[223] = new State(-596);
    states[224] = new State(new int[]{102,226,103,227,104,228,105,229,106,230,107,231,108,232,109,233,110,234,111,235,114,236,115,237,116,238,117,239,118,240,119,241,120,242,121,243,123,244,125,245,126,246,97,248,98,249,99,250,100,251,101,252},new int[]{-174,225,-168,247});
    states[225] = new State(-621);
    states[226] = new State(-718);
    states[227] = new State(-719);
    states[228] = new State(-720);
    states[229] = new State(-721);
    states[230] = new State(-722);
    states[231] = new State(-723);
    states[232] = new State(-724);
    states[233] = new State(-725);
    states[234] = new State(-726);
    states[235] = new State(-727);
    states[236] = new State(-728);
    states[237] = new State(-729);
    states[238] = new State(-730);
    states[239] = new State(-731);
    states[240] = new State(-732);
    states[241] = new State(-733);
    states[242] = new State(-734);
    states[243] = new State(-735);
    states[244] = new State(-736);
    states[245] = new State(-737);
    states[246] = new State(-738);
    states[247] = new State(-739);
    states[248] = new State(-740);
    states[249] = new State(-741);
    states[250] = new State(-742);
    states[251] = new State(-743);
    states[252] = new State(-744);
    states[253] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-119,254,-124,44,-125,47});
    states[254] = new State(-597);
    states[255] = new State(new int[]{9,258,47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,256,-119,1016,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[256] = new State(new int[]{9,257});
    states[257] = new State(-598);
    states[258] = new State(new int[]{5,289,113,-762},new int[]{-283,259});
    states[259] = new State(new int[]{113,260});
    states[260] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269,79,16},new int[]{-286,261,-85,214,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-224,283});
    states[261] = new State(-746);
    states[262] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,256,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[263] = new State(-599);
    states[264] = new State(new int[]{8,265});
    states[265] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-247,266,-154,139,-119,152,-124,44,-125,47});
    states[266] = new State(new int[]{9,267});
    states[267] = new State(-523);
    states[268] = new State(-600);
    states[269] = new State(new int[]{8,270});
    states[270] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-247,271,-154,139,-119,152,-124,44,-125,47});
    states[271] = new State(new int[]{9,272});
    states[272] = new State(-524);
    states[273] = new State(-565);
    states[274] = new State(-567);
    states[275] = new State(-522);
    states[276] = new State(-519);
    states[277] = new State(-520);
    states[278] = new State(-752);
    states[279] = new State(new int[]{8,284,5,289,113,-762},new int[]{-283,280});
    states[280] = new State(new int[]{113,281});
    states[281] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269,79,16},new int[]{-286,282,-85,214,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-224,283});
    states[282] = new State(-753);
    states[283] = new State(-765);
    states[284] = new State(new int[]{9,285,129,43,74,45,75,46,69,48,67,49},new int[]{-284,1011,-285,475,-131,470,-119,474,-124,44,-125,47});
    states[285] = new State(new int[]{5,289,113,-762},new int[]{-283,286});
    states[286] = new State(new int[]{113,287});
    states[287] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269,79,16},new int[]{-286,288,-85,214,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-224,283});
    states[288] = new State(-754);
    states[289] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-241,290,-242,291,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[290] = new State(-763);
    states[291] = new State(-434);
    states[292] = new State(-207);
    states[293] = new State(new int[]{7,140,113,294,109,145,9,-219,10,-219,97,-219,106,-219,80,-219,73,-219,72,-219,71,-219,70,-219,86,-219,89,-219,26,-219,92,-219,25,-219,2,-219,88,-219,123,-219,74,-219,75,-219,12,-219,11,-219,8,-226,105,-226,104,-226,117,-226,118,-226,119,-226,120,-226,116,-226,6,-226,103,-226,102,-226,114,-226,115,-226},new int[]{-261,151});
    states[294] = new State(new int[]{8,296,129,43,74,45,75,46,69,48,67,49},new int[]{-244,295,-154,150,-119,152,-124,44,-125,47,-262,153});
    states[295] = new State(-263);
    states[296] = new State(new int[]{9,297});
    states[297] = new State(-267);
    states[298] = new State(new int[]{11,299,7,-628,113,-628,109,-628,9,-628,10,-628,8,-628,105,-628,104,-628,117,-628,118,-628,119,-628,120,-628,116,-628,6,-628,103,-628,102,-628,114,-628,115,-628,97,-628,106,-628,80,-628,73,-628,72,-628,71,-628,70,-628,86,-628,89,-628,26,-628,92,-628,25,-628,2,-628,88,-628,123,-628,74,-628,75,-628,12,-628});
    states[299] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381},new int[]{-78,300,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[300] = new State(new int[]{12,301,13,302});
    states[301] = new State(-257);
    states[302] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381},new int[]{-78,303,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[303] = new State(new int[]{5,304,13,302});
    states[304] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381},new int[]{-78,305,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[305] = new State(new int[]{13,302,12,-114,5,-114,88,-114,9,-114,6,-114,10,-114,80,-114,73,-114,72,-114,71,-114,70,-114,86,-114,89,-114,26,-114,92,-114,25,-114,2,-114});
    states[306] = new State(new int[]{103,410,102,411,114,412,115,413,106,414,111,415,109,416,107,417,110,418,108,419,123,420,12,-108,13,-108,5,-108,88,-108,9,-108,6,-108,10,-108,80,-108,73,-108,72,-108,71,-108,70,-108,86,-108,89,-108,26,-108,92,-108,25,-108,2,-108},new int[]{-167,307,-166,408});
    states[307] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,354,121,377,103,191,102,192,128,381},new int[]{-11,308,-9,332,-12,313,-119,353,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383});
    states[308] = new State(new int[]{122,184,124,185,105,325,104,326,117,327,118,328,119,329,120,330,116,331,103,-123,102,-123,114,-123,115,-123,106,-123,111,-123,109,-123,107,-123,110,-123,108,-123,123,-123,12,-123,13,-123,5,-123,88,-123,9,-123,6,-123,10,-123,80,-123,73,-123,72,-123,71,-123,70,-123,86,-123,89,-123,26,-123,92,-123,25,-123,2,-123},new int[]{-175,309,-169,311});
    states[309] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-247,310,-154,139,-119,152,-124,44,-125,47});
    states[310] = new State(-128);
    states[311] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,354,121,377,103,191,102,192,128,381},new int[]{-9,312,-12,313,-119,353,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379});
    states[312] = new State(-131);
    states[313] = new State(new int[]{7,315,128,317,8,318,11,405,122,-139,124,-139,105,-139,104,-139,117,-139,118,-139,119,-139,120,-139,116,-139,103,-139,102,-139,114,-139,115,-139,106,-139,111,-139,109,-139,107,-139,110,-139,108,-139,123,-139,12,-139,13,-139,5,-139,88,-139,9,-139,6,-139,10,-139,80,-139,73,-139,72,-139,71,-139,70,-139,86,-139,89,-139,26,-139,92,-139,25,-139,2,-139},new int[]{-10,314});
    states[314] = new State(-155);
    states[315] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,73,52,72,53,71,54,70,55,60,56,55,57,114,58,16,59,15,60,54,61,17,62,115,63,116,64,117,65,118,66,119,67,120,68,121,69,122,70,123,71,124,72,18,73,65,74,79,75,19,76,20,77,22,78,23,79,24,80,63,81,87,82,25,83,26,84,27,85,21,86,92,87,89,88,28,89,29,90,30,91,31,92,32,93,33,94,91,95,34,96,35,97,37,98,38,99,39,100,85,101,40,102,90,103,41,104,42,105,62,106,86,107,43,108,44,109,45,110,46,111,47,112,48,113,49,114,50,115,52,116,93,117,94,118,95,119,96,120,36,122,80,123},new int[]{-110,316,-119,42,-124,44,-125,47,-256,50,-123,51,-257,121});
    states[316] = new State(-156);
    states[317] = new State(-157);
    states[318] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381,9,-161},new int[]{-69,319,-66,321,-78,404,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[319] = new State(new int[]{9,320});
    states[320] = new State(-158);
    states[321] = new State(new int[]{88,322,9,-160});
    states[322] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381},new int[]{-78,323,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[323] = new State(new int[]{13,302,88,-163,9,-163});
    states[324] = new State(new int[]{122,184,124,185,105,325,104,326,117,327,118,328,119,329,120,330,116,331,103,-122,102,-122,114,-122,115,-122,106,-122,111,-122,109,-122,107,-122,110,-122,108,-122,123,-122,12,-122,13,-122,5,-122,88,-122,9,-122,6,-122,10,-122,80,-122,73,-122,72,-122,71,-122,70,-122,86,-122,89,-122,26,-122,92,-122,25,-122,2,-122},new int[]{-175,309,-169,311});
    states[325] = new State(-132);
    states[326] = new State(-133);
    states[327] = new State(-134);
    states[328] = new State(-135);
    states[329] = new State(-136);
    states[330] = new State(-137);
    states[331] = new State(-138);
    states[332] = new State(-129);
    states[333] = new State(new int[]{113,334,7,-152,128,-152,8,-152,11,-152,122,-152,124,-152,105,-152,104,-152,117,-152,118,-152,119,-152,120,-152,116,-152,103,-152,102,-152,114,-152,115,-152,106,-152,111,-152,109,-152,107,-152,110,-152,108,-152,123,-152,12,-152,13,-152,5,-152,88,-152,9,-152,6,-152,10,-152,80,-152,73,-152,72,-152,71,-152,70,-152,86,-152,89,-152,26,-152,92,-152,25,-152,2,-152});
    states[334] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269,79,16},new int[]{-286,335,-85,214,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-224,283});
    states[335] = new State(-109);
    states[336] = new State(-153);
    states[337] = new State(-154);
    states[338] = new State(-140);
    states[339] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381,12,-165},new int[]{-68,340,-65,342,-81,403,-78,345,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[340] = new State(new int[]{12,341});
    states[341] = new State(-149);
    states[342] = new State(new int[]{88,343,12,-164,9,-164});
    states[343] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381},new int[]{-81,344,-78,345,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[344] = new State(-167);
    states[345] = new State(new int[]{13,302,6,346,88,-168,12,-168,9,-168,5,-168});
    states[346] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381},new int[]{-78,347,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[347] = new State(new int[]{13,302,88,-169,12,-169,9,-169,5,-169});
    states[348] = new State(-141);
    states[349] = new State(-142);
    states[350] = new State(-143);
    states[351] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,354,121,377,103,191,102,192,128,381},new int[]{-9,352,-12,313,-119,353,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379});
    states[352] = new State(-144);
    states[353] = new State(-152);
    states[354] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381},new int[]{-78,355,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[355] = new State(new int[]{9,356,13,302});
    states[356] = new State(-145);
    states[357] = new State(new int[]{9,359,129,43,74,45,75,46,69,48,67,217,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,367,121,377,103,191,102,192,128,381,54,135},new int[]{-78,358,-60,363,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384,-59,385,-76,394,-75,388,-82,390,-212,391,-147,392,-52,393});
    states[358] = new State(new int[]{9,356,13,302,88,-173});
    states[359] = new State(new int[]{5,289,113,-762},new int[]{-283,360});
    states[360] = new State(new int[]{113,361});
    states[361] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269,79,16},new int[]{-286,362,-85,214,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-224,283});
    states[362] = new State(-110);
    states[363] = new State(new int[]{9,364});
    states[364] = new State(new int[]{113,365});
    states[365] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269,79,16},new int[]{-286,366,-85,214,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-224,283});
    states[366] = new State(-111);
    states[367] = new State(new int[]{9,359,129,43,74,45,75,46,69,48,67,217,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,367,121,377,103,191,102,192,128,381,54,135},new int[]{-78,358,-60,368,-212,370,-82,372,-214,374,-73,306,-11,324,-9,332,-12,313,-119,376,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384,-59,385,-76,394,-75,388,-147,392,-52,393,-213,395,-215,402,-108,398});
    states[368] = new State(new int[]{9,369});
    states[369] = new State(new int[]{113,365,88,-176,9,-176,10,-176,80,-176,73,-176,72,-176,71,-176,70,-176,86,-176,89,-176,26,-176,92,-176,25,-176,2,-176});
    states[370] = new State(new int[]{9,371,88,-175});
    states[371] = new State(-177);
    states[372] = new State(new int[]{9,373,88,-174});
    states[373] = new State(-178);
    states[374] = new State(new int[]{9,375});
    states[375] = new State(-183);
    states[376] = new State(new int[]{113,334,7,-152,128,-152,8,-152,11,-152,122,-152,124,-152,105,-152,104,-152,117,-152,118,-152,119,-152,120,-152,116,-152,103,-152,102,-152,114,-152,115,-152,106,-152,111,-152,109,-152,107,-152,110,-152,108,-152,123,-152,9,-152,13,-152,88,-152,5,-189});
    states[377] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,354,121,377,103,191,102,192,128,381},new int[]{-9,378,-12,313,-119,353,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379});
    states[378] = new State(-146);
    states[379] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,354,121,377,103,191,102,192,128,381},new int[]{-9,380,-12,313,-119,353,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379});
    states[380] = new State(-147);
    states[381] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,354,121,377,103,191,102,192,128,381},new int[]{-9,382,-12,313,-119,353,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379});
    states[382] = new State(-148);
    states[383] = new State(-130);
    states[384] = new State(-113);
    states[385] = new State(new int[]{88,386,9,-180});
    states[386] = new State(new int[]{129,43,74,45,75,46,69,48,67,217,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,367,121,377,103,191,102,192,128,381,54,135},new int[]{-76,387,-75,388,-78,389,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384,-82,390,-212,391,-147,392,-52,393});
    states[387] = new State(-182);
    states[388] = new State(-377);
    states[389] = new State(new int[]{13,302,88,-173,9,-173,10,-173,80,-173,73,-173,72,-173,71,-173,70,-173,86,-173,89,-173,26,-173,92,-173,25,-173,2,-173});
    states[390] = new State(-174);
    states[391] = new State(-175);
    states[392] = new State(-378);
    states[393] = new State(-379);
    states[394] = new State(-181);
    states[395] = new State(new int[]{10,396,9,-184});
    states[396] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,9,-185},new int[]{-215,397,-108,398,-119,401,-124,44,-125,47});
    states[397] = new State(-187);
    states[398] = new State(new int[]{5,399});
    states[399] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,367,121,377,103,191,102,192,128,381},new int[]{-75,400,-78,389,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384,-82,390,-212,391});
    states[400] = new State(-188);
    states[401] = new State(-189);
    states[402] = new State(-186);
    states[403] = new State(-166);
    states[404] = new State(new int[]{13,302,88,-162,9,-162});
    states[405] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381,12,-165},new int[]{-68,406,-65,342,-81,403,-78,345,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[406] = new State(new int[]{12,407});
    states[407] = new State(-159);
    states[408] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,354,121,377,103,191,102,192,128,381},new int[]{-73,409,-11,324,-9,332,-12,313,-119,353,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383});
    states[409] = new State(new int[]{103,410,102,411,114,412,115,413,12,-112,13,-112,5,-112,88,-112,9,-112,6,-112,10,-112,80,-112,73,-112,72,-112,71,-112,70,-112,86,-112,89,-112,26,-112,92,-112,25,-112,2,-112},new int[]{-167,307});
    states[410] = new State(-124);
    states[411] = new State(-125);
    states[412] = new State(-126);
    states[413] = new State(-127);
    states[414] = new State(-115);
    states[415] = new State(-116);
    states[416] = new State(-117);
    states[417] = new State(-118);
    states[418] = new State(-119);
    states[419] = new State(-120);
    states[420] = new State(-121);
    states[421] = new State(new int[]{6,422,103,410,102,411,114,412,115,413},new int[]{-167,424});
    states[422] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,436},new int[]{-80,423,-87,440,-88,439,-154,431,-119,152,-124,44,-125,47,-15,432,-173,433,-138,435,-140,125,-139,129});
    states[423] = new State(new int[]{103,410,102,411,114,412,115,413,113,-220,9,-220,10,-220,97,-220,106,-220,80,-220,73,-220,72,-220,71,-220,70,-220,86,-220,89,-220,26,-220,92,-220,25,-220,2,-220,88,-220,123,-220,74,-220,75,-220,12,-220,11,-220},new int[]{-167,424});
    states[424] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,436},new int[]{-87,425,-88,439,-154,431,-119,152,-124,44,-125,47,-15,432,-173,433,-138,435,-140,125,-139,129});
    states[425] = new State(new int[]{105,325,104,326,117,327,118,328,119,329,120,330,116,331,6,-223,103,-223,102,-223,114,-223,115,-223,113,-223,9,-223,10,-223,97,-223,106,-223,80,-223,73,-223,72,-223,71,-223,70,-223,86,-223,89,-223,26,-223,92,-223,25,-223,2,-223,88,-223,123,-223,74,-223,75,-223,12,-223,11,-223},new int[]{-169,426});
    states[426] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,436},new int[]{-88,427,-154,431,-119,152,-124,44,-125,47,-15,432,-173,433,-138,435,-140,125,-139,129});
    states[427] = new State(new int[]{8,428,105,-225,104,-225,117,-225,118,-225,119,-225,120,-225,116,-225,6,-225,103,-225,102,-225,114,-225,115,-225,113,-225,9,-225,10,-225,97,-225,106,-225,80,-225,73,-225,72,-225,71,-225,70,-225,86,-225,89,-225,26,-225,92,-225,25,-225,2,-225,88,-225,123,-225,74,-225,75,-225,12,-225,11,-225});
    states[428] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381,9,-165},new int[]{-68,429,-65,342,-81,403,-78,345,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[429] = new State(new int[]{9,430});
    states[430] = new State(-230);
    states[431] = new State(new int[]{7,140,8,-226,105,-226,104,-226,117,-226,118,-226,119,-226,120,-226,116,-226,103,-226,102,-226,114,-226,115,-226,113,-226,9,-226,10,-226,97,-226,106,-226,80,-226,73,-226,72,-226,71,-226,70,-226,86,-226,89,-226,26,-226,92,-226,25,-226,2,-226,88,-226,123,-226,74,-226,75,-226,12,-226,11,-226,6,-226});
    states[432] = new State(-227);
    states[433] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,436},new int[]{-88,434,-154,431,-119,152,-124,44,-125,47,-15,432,-173,433,-138,435,-140,125,-139,129});
    states[434] = new State(new int[]{8,428,105,-228,104,-228,117,-228,118,-228,119,-228,120,-228,116,-228,6,-228,103,-228,102,-228,114,-228,115,-228,113,-228,9,-228,10,-228,97,-228,106,-228,80,-228,73,-228,72,-228,71,-228,70,-228,86,-228,89,-228,26,-228,92,-228,25,-228,2,-228,88,-228,123,-228,74,-228,75,-228,12,-228,11,-228});
    states[435] = new State(-229);
    states[436] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381},new int[]{-78,437,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[437] = new State(new int[]{9,438,13,302});
    states[438] = new State(-231);
    states[439] = new State(new int[]{8,428,105,-224,104,-224,117,-224,118,-224,119,-224,120,-224,116,-224,6,-224,103,-224,102,-224,114,-224,115,-224,113,-224,9,-224,10,-224,97,-224,106,-224,80,-224,73,-224,72,-224,71,-224,70,-224,86,-224,89,-224,26,-224,92,-224,25,-224,2,-224,88,-224,123,-224,74,-224,75,-224,12,-224,11,-224});
    states[440] = new State(new int[]{105,325,104,326,117,327,118,328,119,329,120,330,116,331,6,-222,103,-222,102,-222,114,-222,115,-222,113,-222,9,-222,10,-222,97,-222,106,-222,80,-222,73,-222,72,-222,71,-222,70,-222,86,-222,89,-222,26,-222,92,-222,25,-222,2,-222,88,-222,123,-222,74,-222,75,-222,12,-222,11,-222},new int[]{-169,426});
    states[441] = new State(new int[]{9,476,129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381},new int[]{-78,437,-72,442,-73,306,-11,324,-9,332,-12,313,-119,481,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384,-71,482});
    states[442] = new State(new int[]{9,443,88,448});
    states[443] = new State(new int[]{113,444,9,-221,10,-221,97,-221,106,-221,80,-221,73,-221,72,-221,71,-221,70,-221,86,-221,89,-221,26,-221,92,-221,25,-221,2,-221,88,-221,123,-221,74,-221,75,-221,12,-221,11,-221});
    states[444] = new State(new int[]{8,446,129,43,74,45,75,46,69,48,67,49},new int[]{-244,445,-154,150,-119,152,-124,44,-125,47,-262,153});
    states[445] = new State(-266);
    states[446] = new State(new int[]{9,447});
    states[447] = new State(-270);
    states[448] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-71,449,-119,450,-124,44,-125,47});
    states[449] = new State(-235);
    states[450] = new State(new int[]{106,451,9,-236,88,-236});
    states[451] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,452,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[452] = new State(-237);
    states[453] = new State(new int[]{113,454,8,460});
    states[454] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,49,36,224,33,253,8,262,15,264,16,269,130,127,131,128,138,131,140,132,139,133,79,16},new int[]{-287,455,-182,456,-93,457,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-224,459});
    states[455] = new State(-756);
    states[456] = new State(-766);
    states[457] = new State(-461);
    states[458] = new State(new int[]{7,40});
    states[459] = new State(-767);
    states[460] = new State(new int[]{9,461,129,43,74,45,75,46,69,48,67,49},new int[]{-284,464,-285,475,-131,470,-119,474,-124,44,-125,47});
    states[461] = new State(new int[]{113,462});
    states[462] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,49,36,224,33,253,8,262,15,264,16,269,130,127,131,128,138,131,140,132,139,133,79,16},new int[]{-287,463,-182,456,-93,457,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-224,459});
    states[463] = new State(-757);
    states[464] = new State(new int[]{9,465,10,468});
    states[465] = new State(new int[]{113,466});
    states[466] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,49,36,224,33,253,8,262,15,264,16,269,130,127,131,128,138,131,140,132,139,133,79,16},new int[]{-287,467,-182,456,-93,457,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-224,459});
    states[467] = new State(-758);
    states[468] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-285,469,-131,470,-119,474,-124,44,-125,47});
    states[469] = new State(-760);
    states[470] = new State(new int[]{88,472,5,289,9,-762,10,-762},new int[]{-283,471});
    states[471] = new State(-761);
    states[472] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-119,473,-124,44,-125,47});
    states[473] = new State(-318);
    states[474] = new State(-317);
    states[475] = new State(-759);
    states[476] = new State(new int[]{113,477});
    states[477] = new State(new int[]{8,479,129,43,74,45,75,46,69,48,67,49},new int[]{-244,478,-154,150,-119,152,-124,44,-125,47,-262,153});
    states[478] = new State(-265);
    states[479] = new State(new int[]{9,480});
    states[480] = new State(-269);
    states[481] = new State(new int[]{113,334,106,451,7,-152,128,-152,8,-152,11,-152,122,-152,124,-152,105,-152,104,-152,117,-152,118,-152,119,-152,120,-152,116,-152,103,-152,102,-152,114,-152,115,-152,111,-152,109,-152,107,-152,110,-152,108,-152,123,-152,9,-152,13,-152,88,-236});
    states[482] = new State(new int[]{88,483});
    states[483] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-71,484,-119,450,-124,44,-125,47});
    states[484] = new State(-234);
    states[485] = new State(-208);
    states[486] = new State(-209);
    states[487] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-241,488,-242,291,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[488] = new State(-238);
    states[489] = new State(-210);
    states[490] = new State(-239);
    states[491] = new State(-241);
    states[492] = new State(new int[]{11,493,49,1009});
    states[493] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,553,12,-253,88,-253},new int[]{-137,494,-237,1008,-238,1007,-154,552,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129});
    states[494] = new State(new int[]{12,495,88,1005});
    states[495] = new State(new int[]{49,496});
    states[496] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-242,497,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[497] = new State(-247);
    states[498] = new State(-248);
    states[499] = new State(-242);
    states[500] = new State(new int[]{8,734,17,-289,11,-289,80,-289,73,-289,72,-289,71,-289,70,-289,22,-289,129,-289,74,-289,75,-289,69,-289,67,-289,53,-289,20,-289,35,-289,30,-289,23,-289,24,-289,37,-289},new int[]{-157,501});
    states[501] = new State(new int[]{17,725,11,-296,80,-296,73,-296,72,-296,71,-296,70,-296,22,-296,129,-296,74,-296,75,-296,69,-296,67,-296,53,-296,20,-296,35,-296,30,-296,23,-296,24,-296,37,-296},new int[]{-276,502,-275,723,-274,745});
    states[502] = new State(new int[]{11,600,80,-313,73,-313,72,-313,71,-313,70,-313,22,-193,129,-193,74,-193,75,-193,69,-193,67,-193,53,-193,20,-193,35,-193,30,-193,23,-193,24,-193,37,-193},new int[]{-21,503,-28,693,-30,507,-40,694,-5,695,-219,612,-29,971,-49,973,-48,513,-50,972});
    states[503] = new State(new int[]{80,504,73,689,72,690,71,691,70,692},new int[]{-6,505});
    states[504] = new State(-272);
    states[505] = new State(new int[]{11,600,80,-313,73,-313,72,-313,71,-313,70,-313,22,-193,129,-193,74,-193,75,-193,69,-193,67,-193,53,-193,20,-193,35,-193,30,-193,23,-193,24,-193,37,-193},new int[]{-28,506,-30,507,-40,694,-5,695,-219,612,-29,971,-49,973,-48,513,-50,972});
    states[506] = new State(-308);
    states[507] = new State(new int[]{10,509,80,-319,73,-319,72,-319,71,-319,70,-319},new int[]{-164,508});
    states[508] = new State(-314);
    states[509] = new State(new int[]{11,600,80,-320,73,-320,72,-320,71,-320,70,-320,22,-193,129,-193,74,-193,75,-193,69,-193,67,-193,53,-193,20,-193,35,-193,30,-193,23,-193,24,-193,37,-193},new int[]{-40,510,-29,511,-5,695,-219,612,-49,973,-48,513,-50,972});
    states[510] = new State(-322);
    states[511] = new State(new int[]{11,600,80,-316,73,-316,72,-316,71,-316,70,-316,20,-193,35,-193,30,-193,23,-193,24,-193,37,-193},new int[]{-49,512,-48,513,-5,514,-219,612,-50,972});
    states[512] = new State(-325);
    states[513] = new State(-326);
    states[514] = new State(new int[]{20,519,35,718,30,898,23,959,24,963,11,600,37,924},new int[]{-192,515,-219,516,-189,517,-227,518,-200,956,-198,632,-195,717,-199,897,-197,957,-185,967,-186,968,-188,969,-228,970});
    states[515] = new State(-333);
    states[516] = new State(-192);
    states[517] = new State(-334);
    states[518] = new State(-352);
    states[519] = new State(new int[]{23,521,35,718,30,898,37,924},new int[]{-200,520,-186,630,-228,631,-198,632,-195,717,-199,897});
    states[520] = new State(-337);
    states[521] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,36,224,8,-347,10,-347},new int[]{-145,522,-144,614,-143,615,-114,616,-109,617,-106,618,-119,623,-124,44,-125,47,-165,624,-290,625,-121,629});
    states[522] = new State(new int[]{8,535,10,-418},new int[]{-99,523});
    states[523] = new State(new int[]{10,525},new int[]{-179,524});
    states[524] = new State(-344);
    states[525] = new State(new int[]{132,529,134,530,135,531,136,532,137,533,79,-622,50,-622,22,-622,58,-622,41,-622,44,-622,53,-622,11,-622,20,-622,35,-622,30,-622,23,-622,24,-622,37,-622,80,-622,73,-622,72,-622,71,-622,70,-622,17,-622,133,-622,95,-622,32,-622},new int[]{-178,526,-181,534});
    states[526] = new State(new int[]{10,527});
    states[527] = new State(new int[]{132,529,134,530,135,531,136,532,137,533,79,-623,50,-623,22,-623,58,-623,41,-623,44,-623,53,-623,11,-623,20,-623,35,-623,30,-623,23,-623,24,-623,37,-623,80,-623,73,-623,72,-623,71,-623,70,-623,17,-623,133,-623,95,-623,32,-623},new int[]{-181,528});
    states[528] = new State(-627);
    states[529] = new State(-637);
    states[530] = new State(-638);
    states[531] = new State(-639);
    states[532] = new State(-640);
    states[533] = new State(-641);
    states[534] = new State(-626);
    states[535] = new State(new int[]{9,536,11,600,129,-193,74,-193,75,-193,69,-193,67,-193,44,-193,22,-193,96,-193},new int[]{-100,537,-51,613,-5,541,-219,612});
    states[536] = new State(-419);
    states[537] = new State(new int[]{9,538,10,539});
    states[538] = new State(-420);
    states[539] = new State(new int[]{11,600,129,-193,74,-193,75,-193,69,-193,67,-193,44,-193,22,-193,96,-193},new int[]{-51,540,-5,541,-219,612});
    states[540] = new State(-422);
    states[541] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,44,584,22,590,96,596,11,600},new int[]{-259,542,-219,516,-132,543,-107,583,-119,582,-124,44,-125,47});
    states[542] = new State(-423);
    states[543] = new State(new int[]{5,544,88,580});
    states[544] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-241,545,-242,291,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[545] = new State(new int[]{97,546,9,-424,10,-424});
    states[546] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381},new int[]{-78,547,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[547] = new State(new int[]{13,302,9,-428,10,-428});
    states[548] = new State(-243);
    states[549] = new State(new int[]{49,550});
    states[550] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,553},new int[]{-238,551,-154,552,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129});
    states[551] = new State(-254);
    states[552] = new State(new int[]{7,140,12,-219,88,-219,113,-219,9,-219,10,-219,97,-219,106,-219,80,-219,73,-219,72,-219,71,-219,70,-219,86,-219,89,-219,26,-219,92,-219,25,-219,2,-219,123,-219,74,-219,75,-219,11,-219,8,-226,105,-226,104,-226,117,-226,118,-226,119,-226,120,-226,116,-226,6,-226,103,-226,102,-226,114,-226,115,-226});
    states[553] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381},new int[]{-78,437,-72,554,-73,306,-11,324,-9,332,-12,313,-119,481,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384,-71,482});
    states[554] = new State(new int[]{9,555,88,448});
    states[555] = new State(-221);
    states[556] = new State(-244);
    states[557] = new State(new int[]{49,558,113,-256,9,-256,10,-256,97,-256,106,-256,80,-256,73,-256,72,-256,71,-256,70,-256,86,-256,89,-256,26,-256,92,-256,25,-256,2,-256,88,-256,123,-256,74,-256,75,-256,12,-256,11,-256});
    states[558] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-242,559,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[559] = new State(-255);
    states[560] = new State(-245);
    states[561] = new State(new int[]{49,562});
    states[562] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-244,563,-154,150,-119,152,-124,44,-125,47,-262,153});
    states[563] = new State(-246);
    states[564] = new State(new int[]{18,492,39,500,40,549,27,557,65,561},new int[]{-246,565,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560});
    states[565] = new State(-240);
    states[566] = new State(-211);
    states[567] = new State(-258);
    states[568] = new State(-259);
    states[569] = new State(new int[]{8,535,113,-418,9,-418,10,-418,97,-418,106,-418,80,-418,73,-418,72,-418,71,-418,70,-418,86,-418,89,-418,26,-418,92,-418,25,-418,2,-418,88,-418,123,-418,74,-418,75,-418,12,-418,11,-418},new int[]{-99,570});
    states[570] = new State(-260);
    states[571] = new State(new int[]{8,535,5,-418,113,-418,9,-418,10,-418,97,-418,106,-418,80,-418,73,-418,72,-418,71,-418,70,-418,86,-418,89,-418,26,-418,92,-418,25,-418,2,-418,88,-418,123,-418,74,-418,75,-418,12,-418,11,-418},new int[]{-99,572});
    states[572] = new State(new int[]{5,573,113,-261,9,-261,10,-261,97,-261,106,-261,80,-261,73,-261,72,-261,71,-261,70,-261,86,-261,89,-261,26,-261,92,-261,25,-261,2,-261,88,-261,123,-261,74,-261,75,-261,12,-261,11,-261});
    states[573] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-241,574,-242,291,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[574] = new State(-262);
    states[575] = new State(new int[]{113,576,9,-212,10,-212,97,-212,106,-212,80,-212,73,-212,72,-212,71,-212,70,-212,86,-212,89,-212,26,-212,92,-212,25,-212,2,-212,88,-212,123,-212,74,-212,75,-212,12,-212,11,-212});
    states[576] = new State(new int[]{8,578,129,43,74,45,75,46,69,48,67,49},new int[]{-244,577,-154,150,-119,152,-124,44,-125,47,-262,153});
    states[577] = new State(-264);
    states[578] = new State(new int[]{9,579});
    states[579] = new State(-268);
    states[580] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-107,581,-119,582,-124,44,-125,47});
    states[581] = new State(-432);
    states[582] = new State(-433);
    states[583] = new State(-431);
    states[584] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-132,585,-107,583,-119,582,-124,44,-125,47});
    states[585] = new State(new int[]{5,586,88,580});
    states[586] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-241,587,-242,291,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[587] = new State(new int[]{97,588,9,-425,10,-425});
    states[588] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381},new int[]{-78,589,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[589] = new State(new int[]{13,302,9,-429,10,-429});
    states[590] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-132,591,-107,583,-119,582,-124,44,-125,47});
    states[591] = new State(new int[]{5,592,88,580});
    states[592] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-241,593,-242,291,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[593] = new State(new int[]{97,594,9,-426,10,-426});
    states[594] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381},new int[]{-78,595,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[595] = new State(new int[]{13,302,9,-430,10,-430});
    states[596] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-132,597,-107,583,-119,582,-124,44,-125,47});
    states[597] = new State(new int[]{5,598,88,580});
    states[598] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-241,599,-242,291,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[599] = new State(-427);
    states[600] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-220,601,-7,611,-8,605,-154,606,-119,608,-124,44,-125,47});
    states[601] = new State(new int[]{12,602,88,603});
    states[602] = new State(-194);
    states[603] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-7,604,-8,605,-154,606,-119,608,-124,44,-125,47});
    states[604] = new State(-196);
    states[605] = new State(-197);
    states[606] = new State(new int[]{7,140,8,220,12,-540,88,-540},new int[]{-63,607});
    states[607] = new State(-590);
    states[608] = new State(new int[]{5,609,7,-232,8,-232,12,-232,88,-232});
    states[609] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-8,610,-154,606,-119,152,-124,44,-125,47});
    states[610] = new State(-198);
    states[611] = new State(-195);
    states[612] = new State(-191);
    states[613] = new State(-421);
    states[614] = new State(-346);
    states[615] = new State(-397);
    states[616] = new State(-398);
    states[617] = new State(new int[]{8,-403,10,-403,97,-403,5,-403,7,-400});
    states[618] = new State(new int[]{109,620,8,-405,10,-405,7,-405,97,-405,5,-405},new int[]{-128,619});
    states[619] = new State(-406);
    states[620] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-131,621,-119,474,-124,44,-125,47});
    states[621] = new State(new int[]{107,622,88,472});
    states[622] = new State(-295);
    states[623] = new State(-407);
    states[624] = new State(-404);
    states[625] = new State(new int[]{7,626});
    states[626] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,36,224},new int[]{-114,627,-121,628,-109,617,-106,618,-119,623,-124,44,-125,47,-165,624});
    states[627] = new State(-399);
    states[628] = new State(-402);
    states[629] = new State(-401);
    states[630] = new State(-390);
    states[631] = new State(-354);
    states[632] = new State(new int[]{11,-340,20,-340,35,-340,30,-340,23,-340,24,-340,37,-340,80,-340,73,-340,72,-340,71,-340,70,-340,50,-61,22,-61,58,-61,41,-61,44,-61,53,-61,79,-61},new int[]{-150,633,-39,634,-35,637});
    states[633] = new State(-391);
    states[634] = new State(new int[]{79,16},new int[]{-224,635});
    states[635] = new State(new int[]{10,636});
    states[636] = new State(-417);
    states[637] = new State(new int[]{50,640,22,664,58,668,41,995,44,1001,53,1003,79,-60},new int[]{-41,638,-141,639,-25,649,-47,666,-252,670,-269,997});
    states[638] = new State(-62);
    states[639] = new State(-78);
    states[640] = new State(new int[]{138,645,139,646,129,43,74,45,75,46,69,48,67,49},new int[]{-129,641,-115,648,-119,647,-124,44,-125,47});
    states[641] = new State(new int[]{10,642,88,643});
    states[642] = new State(-87);
    states[643] = new State(new int[]{138,645,139,646,129,43,74,45,75,46,69,48,67,49},new int[]{-115,644,-119,647,-124,44,-125,47});
    states[644] = new State(-89);
    states[645] = new State(-90);
    states[646] = new State(-91);
    states[647] = new State(-92);
    states[648] = new State(-88);
    states[649] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,50,-79,22,-79,58,-79,41,-79,44,-79,53,-79,79,-79},new int[]{-23,650,-24,651,-113,653,-119,663,-124,44,-125,47});
    states[650] = new State(-94);
    states[651] = new State(new int[]{10,652});
    states[652] = new State(-102);
    states[653] = new State(new int[]{106,654,5,659});
    states[654] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,657,121,377,103,191,102,192,128,381},new int[]{-90,655,-78,656,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384,-82,658});
    states[655] = new State(-103);
    states[656] = new State(new int[]{13,302,10,-105,80,-105,73,-105,72,-105,71,-105,70,-105});
    states[657] = new State(new int[]{9,359,129,43,74,45,75,46,69,48,67,217,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,367,121,377,103,191,102,192,128,381,54,135},new int[]{-78,358,-60,368,-212,370,-82,372,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384,-59,385,-76,394,-75,388,-147,392,-52,393});
    states[658] = new State(-106);
    states[659] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-242,660,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[660] = new State(new int[]{106,661});
    states[661] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,367,121,377,103,191,102,192,128,381},new int[]{-75,662,-78,389,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384,-82,390,-212,391});
    states[662] = new State(-104);
    states[663] = new State(-107);
    states[664] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-23,665,-24,651,-113,653,-119,663,-124,44,-125,47});
    states[665] = new State(-93);
    states[666] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,50,-80,22,-80,58,-80,41,-80,44,-80,53,-80,79,-80},new int[]{-23,667,-24,651,-113,653,-119,663,-124,44,-125,47});
    states[667] = new State(-96);
    states[668] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-23,669,-24,651,-113,653,-119,663,-124,44,-125,47});
    states[669] = new State(-95);
    states[670] = new State(new int[]{11,600,50,-81,22,-81,58,-81,41,-81,44,-81,53,-81,79,-81,129,-193,74,-193,75,-193,69,-193,67,-193},new int[]{-44,671,-5,672,-219,612});
    states[671] = new State(-98);
    states[672] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,11,600},new int[]{-45,673,-219,516,-116,674,-119,987,-124,44,-125,47,-117,992});
    states[673] = new State(-190);
    states[674] = new State(new int[]{106,675});
    states[675] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571,41,679,60,982,61,983,132,984,21,985,20,-277,34,-277,55,-277},new int[]{-250,676,-242,678,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575,-26,681,-19,682,-20,980,-18,986});
    states[676] = new State(new int[]{10,677});
    states[677] = new State(-199);
    states[678] = new State(-204);
    states[679] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-242,680,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[680] = new State(-205);
    states[681] = new State(-206);
    states[682] = new State(new int[]{20,974,34,975,55,976},new int[]{-254,683});
    states[683] = new State(new int[]{8,734,17,-289,11,-289,80,-289,73,-289,72,-289,71,-289,70,-289,22,-289,129,-289,74,-289,75,-289,69,-289,67,-289,53,-289,20,-289,35,-289,30,-289,23,-289,24,-289,37,-289,10,-289},new int[]{-157,684});
    states[684] = new State(new int[]{17,725,11,-296,80,-296,73,-296,72,-296,71,-296,70,-296,22,-296,129,-296,74,-296,75,-296,69,-296,67,-296,53,-296,20,-296,35,-296,30,-296,23,-296,24,-296,37,-296,10,-296},new int[]{-276,685,-275,723,-274,745});
    states[685] = new State(new int[]{11,600,10,-287,80,-313,73,-313,72,-313,71,-313,70,-313,22,-193,129,-193,74,-193,75,-193,69,-193,67,-193,53,-193,20,-193,35,-193,30,-193,23,-193,24,-193,37,-193},new int[]{-22,686,-21,687,-28,693,-30,507,-40,694,-5,695,-219,612,-29,971,-49,973,-48,513,-50,972});
    states[686] = new State(-271);
    states[687] = new State(new int[]{80,688,73,689,72,690,71,691,70,692},new int[]{-6,505});
    states[688] = new State(-288);
    states[689] = new State(-309);
    states[690] = new State(-310);
    states[691] = new State(-311);
    states[692] = new State(-312);
    states[693] = new State(-307);
    states[694] = new State(-321);
    states[695] = new State(new int[]{22,697,129,43,74,45,75,46,69,48,67,49,53,711,20,715,11,600,35,718,30,898,23,959,24,963,37,924},new int[]{-46,696,-219,516,-192,515,-189,517,-227,518,-272,699,-271,700,-131,701,-119,474,-124,44,-125,47,-200,956,-198,632,-195,717,-199,897,-197,957,-185,967,-186,968,-188,969,-228,970});
    states[696] = new State(-323);
    states[697] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-24,698,-113,653,-119,663,-124,44,-125,47});
    states[698] = new State(-328);
    states[699] = new State(-329);
    states[700] = new State(-331);
    states[701] = new State(new int[]{5,702,88,472,97,709});
    states[702] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-242,703,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[703] = new State(new int[]{97,707,106,708,10,-373,80,-373,73,-373,72,-373,71,-373,70,-373,86,-373,89,-373,26,-373,92,-373,25,-373,2,-373},new int[]{-291,704});
    states[704] = new State(new int[]{129,43,74,45,75,46,69,48,67,217,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,367,121,377,103,191,102,192,128,381,54,135,30,279,35,453},new int[]{-76,705,-282,706,-75,388,-78,389,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384,-82,390,-212,391,-147,392,-52,393});
    states[705] = new State(-375);
    states[706] = new State(-376);
    states[707] = new State(-371);
    states[708] = new State(-372);
    states[709] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,710,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[710] = new State(-374);
    states[711] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-131,712,-119,474,-124,44,-125,47});
    states[712] = new State(new int[]{5,713,88,472});
    states[713] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-242,714,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[714] = new State(-332);
    states[715] = new State(new int[]{23,521,129,43,74,45,75,46,69,48,67,49,53,711,35,718,30,898,37,924},new int[]{-272,716,-200,520,-186,630,-228,631,-271,700,-131,701,-119,474,-124,44,-125,47,-198,632,-195,717,-199,897});
    states[716] = new State(-330);
    states[717] = new State(-341);
    states[718] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,36,224},new int[]{-144,719,-143,615,-114,616,-109,617,-106,618,-119,623,-124,44,-125,47,-165,624,-290,625,-121,629});
    states[719] = new State(new int[]{8,535,10,-418,97,-418},new int[]{-99,720});
    states[720] = new State(new int[]{10,895,97,-624},new int[]{-179,721,-180,746});
    states[721] = new State(new int[]{17,725,79,-296,50,-296,22,-296,58,-296,41,-296,44,-296,53,-296,11,-296,20,-296,35,-296,30,-296,23,-296,24,-296,37,-296,80,-296,73,-296,72,-296,71,-296,70,-296,133,-296,95,-296,32,-296},new int[]{-276,722,-275,723,-274,745});
    states[722] = new State(-408);
    states[723] = new State(new int[]{17,725,11,-297,80,-297,73,-297,72,-297,71,-297,70,-297,22,-297,129,-297,74,-297,75,-297,69,-297,67,-297,53,-297,20,-297,35,-297,30,-297,23,-297,24,-297,37,-297,10,-297,79,-297,50,-297,58,-297,41,-297,44,-297,133,-297,95,-297,32,-297},new int[]{-274,724});
    states[724] = new State(-299);
    states[725] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-131,726,-119,474,-124,44,-125,47});
    states[726] = new State(new int[]{5,727,88,472});
    states[727] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,733,40,549,27,557,65,561,56,564,35,569,30,571,20,742,23,743},new int[]{-251,728,-248,744,-242,732,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[728] = new State(new int[]{10,729,88,730});
    states[729] = new State(-300);
    states[730] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,733,40,549,27,557,65,561,56,564,35,569,30,571,20,742,23,743},new int[]{-248,731,-242,732,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[731] = new State(-302);
    states[732] = new State(-303);
    states[733] = new State(new int[]{8,734,10,-305,88,-305,17,-289,11,-289,80,-289,73,-289,72,-289,71,-289,70,-289,22,-289,129,-289,74,-289,75,-289,69,-289,67,-289,53,-289,20,-289,35,-289,30,-289,23,-289,24,-289,37,-289},new int[]{-157,501});
    states[734] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-156,735,-155,741,-154,739,-119,152,-124,44,-125,47,-262,740});
    states[735] = new State(new int[]{9,736,88,737});
    states[736] = new State(-290);
    states[737] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-155,738,-154,739,-119,152,-124,44,-125,47,-262,740});
    states[738] = new State(-292);
    states[739] = new State(new int[]{7,140,109,145,9,-293,88,-293},new int[]{-261,151});
    states[740] = new State(-294);
    states[741] = new State(-291);
    states[742] = new State(-304);
    states[743] = new State(-306);
    states[744] = new State(-301);
    states[745] = new State(-298);
    states[746] = new State(new int[]{97,747});
    states[747] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,10,-437},new int[]{-231,748,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[748] = new State(new int[]{10,749});
    states[749] = new State(-394);
    states[750] = new State(new int[]{11,-595,8,-595,7,-595,128,-595,4,-595,97,-595,98,-595,99,-595,100,-595,101,-595,80,-595,10,-595,86,-595,89,-595,26,-595,92,-595,25,-595,5,-92});
    states[751] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,80,-496,10,-496,86,-496,89,-496,26,-496,92,-496,25,-496},new int[]{-119,254,-124,44,-125,47});
    states[752] = new State(new int[]{7,-170,5,-90});
    states[753] = new State(new int[]{7,-172,5,-91});
    states[754] = new State(-439);
    states[755] = new State(-440);
    states[756] = new State(new int[]{138,645,139,646,129,43,74,45,75,46,69,48,67,49},new int[]{-115,757,-119,647,-124,44,-125,47});
    states[757] = new State(-462);
    states[758] = new State(-441);
    states[759] = new State(-442);
    states[760] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,761,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[761] = new State(new int[]{42,762});
    states[762] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,25,-437,80,-437,10,-437,86,-437,89,-437,26,-437,92,-437},new int[]{-231,763,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[763] = new State(new int[]{25,764,80,-466,10,-466,86,-466,89,-466,26,-466,92,-466});
    states[764] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,25,-437,80,-437,10,-437,86,-437,89,-437,26,-437,92,-437},new int[]{-231,765,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[765] = new State(-467);
    states[766] = new State(-443);
    states[767] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,768,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[768] = new State(new int[]{49,769});
    states[769] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381,10,-471,25,-471,80,-471},new int[]{-32,770,-232,894,-67,775,-91,891,-81,890,-78,345,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[770] = new State(new int[]{10,773,25,892,80,-476},new int[]{-222,771});
    states[771] = new State(new int[]{80,772});
    states[772] = new State(-468);
    states[773] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381,10,-471,25,-471,80,-471},new int[]{-232,774,-67,775,-91,891,-81,890,-78,345,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[774] = new State(-470);
    states[775] = new State(new int[]{5,776,88,888});
    states[776] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,10,-437,25,-437,80,-437},new int[]{-231,777,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[777] = new State(-472);
    states[778] = new State(-444);
    states[779] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,86,-437,10,-437},new int[]{-221,780,-231,783,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[780] = new State(new int[]{86,781,10,19});
    states[781] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,782,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[782] = new State(-478);
    states[783] = new State(-464);
    states[784] = new State(-445);
    states[785] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,786,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[786] = new State(new int[]{87,880,127,-481,129,-481,74,-481,75,-481,69,-481,67,-481,36,-481,33,-481,8,-481,15,-481,16,-481,130,-481,131,-481,138,-481,140,-481,139,-481,48,-481,79,-481,31,-481,19,-481,85,-481,45,-481,28,-481,46,-481,90,-481,38,-481,29,-481,44,-481,51,-481,64,-481,66,-481,80,-481,10,-481,86,-481,89,-481,26,-481,92,-481,25,-481},new int[]{-255,787});
    states[787] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,25,-437,80,-437,10,-437,86,-437,89,-437,26,-437,92,-437},new int[]{-231,788,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[788] = new State(-479);
    states[789] = new State(-446);
    states[790] = new State(new int[]{44,887,129,-490,74,-490,75,-490,69,-490,67,-490},new int[]{-17,791});
    states[791] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-119,792,-124,44,-125,47});
    states[792] = new State(new int[]{97,883,5,884},new int[]{-249,793});
    states[793] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,794,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[794] = new State(new int[]{62,881,63,882},new int[]{-94,795});
    states[795] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,796,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[796] = new State(new int[]{87,880,127,-481,129,-481,74,-481,75,-481,69,-481,67,-481,36,-481,33,-481,8,-481,15,-481,16,-481,130,-481,131,-481,138,-481,140,-481,139,-481,48,-481,79,-481,31,-481,19,-481,85,-481,45,-481,28,-481,46,-481,90,-481,38,-481,29,-481,44,-481,51,-481,64,-481,66,-481,80,-481,10,-481,86,-481,89,-481,26,-481,92,-481,25,-481},new int[]{-255,797});
    states[797] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,25,-437,80,-437,10,-437,86,-437,89,-437,26,-437,92,-437},new int[]{-231,798,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[798] = new State(-488);
    states[799] = new State(-447);
    states[800] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-64,801,-77,210,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[801] = new State(new int[]{87,802,88,202});
    states[802] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,25,-437,80,-437,10,-437,86,-437,89,-437,26,-437,92,-437},new int[]{-231,803,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[803] = new State(-495);
    states[804] = new State(-448);
    states[805] = new State(-449);
    states[806] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,10,-437,89,-437,26,-437},new int[]{-221,807,-231,783,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[807] = new State(new int[]{10,19,89,809,26,858},new int[]{-253,808});
    states[808] = new State(-497);
    states[809] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,80,-437,10,-437},new int[]{-221,810,-231,783,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[810] = new State(new int[]{80,811,10,19});
    states[811] = new State(-498);
    states[812] = new State(-450);
    states[813] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453,80,-512,10,-512,86,-512,89,-512,26,-512,92,-512,25,-512},new int[]{-77,814,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[814] = new State(-513);
    states[815] = new State(-451);
    states[816] = new State(new int[]{44,846,129,43,74,45,75,46,69,48,67,49},new int[]{-119,817,-124,44,-125,47});
    states[817] = new State(new int[]{5,844,123,-487},new int[]{-240,818});
    states[818] = new State(new int[]{123,819});
    states[819] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,820,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[820] = new State(new int[]{87,821});
    states[821] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,25,-437,80,-437,10,-437,86,-437,89,-437,26,-437,92,-437},new int[]{-231,822,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[822] = new State(-483);
    states[823] = new State(-452);
    states[824] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-271,825,-131,701,-119,474,-124,44,-125,47});
    states[825] = new State(-459);
    states[826] = new State(-453);
    states[827] = new State(-516);
    states[828] = new State(-517);
    states[829] = new State(-454);
    states[830] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,831,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[831] = new State(new int[]{87,832});
    states[832] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,25,-437,80,-437,10,-437,86,-437,89,-437,26,-437,92,-437},new int[]{-231,833,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[833] = new State(-482);
    states[834] = new State(-455);
    states[835] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,836,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[836] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,131,140,132,139,133,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,25,-437,80,-437,10,-437,86,-437,89,-437,26,-437,92,-437},new int[]{-230,837,-3,22,-93,23,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838});
    states[837] = new State(-458);
    states[838] = new State(-456);
    states[839] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269},new int[]{-85,840,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275});
    states[840] = new State(new int[]{13,27,80,-457,10,-457,86,-457,89,-457,26,-457,92,-457,25,-457});
    states[841] = new State(new int[]{5,842});
    states[842] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,25,-437,80,-437,10,-437,86,-437,89,-437,26,-437,92,-437},new int[]{-231,843,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[843] = new State(-436);
    states[844] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-242,845,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[845] = new State(-486);
    states[846] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-119,847,-124,44,-125,47});
    states[847] = new State(new int[]{5,848,123,854});
    states[848] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-242,849,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[849] = new State(new int[]{123,850});
    states[850] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,851,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[851] = new State(new int[]{87,852});
    states[852] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,25,-437,80,-437,10,-437,86,-437,89,-437,26,-437,92,-437},new int[]{-231,853,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[853] = new State(-484);
    states[854] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,855,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[855] = new State(new int[]{87,856});
    states[856] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,25,-437,80,-437,10,-437,86,-437,89,-437,26,-437,92,-437},new int[]{-231,857,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[857] = new State(-485);
    states[858] = new State(new int[]{68,866,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,10,-437,80,-437},new int[]{-54,859,-57,861,-56,878,-221,879,-231,783,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[859] = new State(new int[]{80,860});
    states[860] = new State(-499);
    states[861] = new State(new int[]{10,863,25,876,80,-505},new int[]{-223,862});
    states[862] = new State(-500);
    states[863] = new State(new int[]{68,866,25,876,80,-505},new int[]{-56,864,-223,865});
    states[864] = new State(-504);
    states[865] = new State(-501);
    states[866] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-58,867,-153,870,-154,871,-119,872,-124,44,-125,47,-112,873});
    states[867] = new State(new int[]{87,868});
    states[868] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,10,-437,25,-437,80,-437},new int[]{-231,869,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[869] = new State(-507);
    states[870] = new State(-508);
    states[871] = new State(new int[]{7,140,87,-510});
    states[872] = new State(new int[]{7,-232,87,-232,5,-511});
    states[873] = new State(new int[]{5,874});
    states[874] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-153,875,-154,871,-119,152,-124,44,-125,47});
    states[875] = new State(-509);
    states[876] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,10,-437,80,-437},new int[]{-221,877,-231,783,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[877] = new State(new int[]{10,19,80,-506});
    states[878] = new State(-503);
    states[879] = new State(new int[]{10,19,80,-502});
    states[880] = new State(-480);
    states[881] = new State(-493);
    states[882] = new State(-494);
    states[883] = new State(-491);
    states[884] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-154,885,-119,152,-124,44,-125,47});
    states[885] = new State(new int[]{97,886,7,140});
    states[886] = new State(-492);
    states[887] = new State(-489);
    states[888] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,357,121,377,103,191,102,192,128,381},new int[]{-91,889,-81,890,-78,345,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384});
    states[889] = new State(-474);
    states[890] = new State(-475);
    states[891] = new State(-473);
    states[892] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,10,-437,80,-437},new int[]{-221,893,-231,783,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[893] = new State(new int[]{10,19,80,-477});
    states[894] = new State(-469);
    states[895] = new State(new int[]{132,529,134,530,135,531,136,532,137,533,17,-622,79,-622,50,-622,22,-622,58,-622,41,-622,44,-622,53,-622,11,-622,20,-622,35,-622,30,-622,23,-622,24,-622,37,-622,80,-622,73,-622,72,-622,71,-622,70,-622},new int[]{-178,896,-181,534});
    states[896] = new State(new int[]{10,527,97,-625});
    states[897] = new State(-342);
    states[898] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,36,224},new int[]{-143,899,-114,616,-109,617,-106,618,-119,623,-124,44,-125,47,-165,624,-290,625,-121,629});
    states[899] = new State(new int[]{8,535,5,-418,10,-418,97,-418},new int[]{-99,900});
    states[900] = new State(new int[]{5,903,10,895,97,-624},new int[]{-179,901,-180,920});
    states[901] = new State(new int[]{17,725,79,-296,50,-296,22,-296,58,-296,41,-296,44,-296,53,-296,11,-296,20,-296,35,-296,30,-296,23,-296,24,-296,37,-296,80,-296,73,-296,72,-296,71,-296,70,-296,133,-296,95,-296,32,-296},new int[]{-276,902,-275,723,-274,745});
    states[902] = new State(-409);
    states[903] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-241,904,-242,291,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[904] = new State(new int[]{10,895,97,-624},new int[]{-179,905,-180,907});
    states[905] = new State(new int[]{17,725,79,-296,50,-296,22,-296,58,-296,41,-296,44,-296,53,-296,11,-296,20,-296,35,-296,30,-296,23,-296,24,-296,37,-296,80,-296,73,-296,72,-296,71,-296,70,-296,133,-296,95,-296,32,-296},new int[]{-276,906,-275,723,-274,745});
    states[906] = new State(-410);
    states[907] = new State(new int[]{97,908});
    states[908] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269},new int[]{-84,909,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274});
    states[909] = new State(new int[]{10,910,14,911,106,913,111,914,109,915,107,916,110,917,108,918,123,919},new int[]{-170,32});
    states[910] = new State(-392);
    states[911] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269},new int[]{-86,912,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274});
    states[912] = new State(new int[]{103,169,102,170,114,171,115,172,112,173,14,-544,106,-544,111,-544,109,-544,107,-544,110,-544,108,-544,123,-544,13,-544,80,-544,10,-544,86,-544,89,-544,26,-544,92,-544,25,-544,2,-544,5,-544,6,-544,88,-544,12,-544,9,-544,87,-544,73,-544,72,-544,71,-544,70,-544,42,-544,49,-544,127,-544,129,-544,74,-544,75,-544,69,-544,67,-544,36,-544,33,-544,8,-544,15,-544,16,-544,130,-544,131,-544,138,-544,140,-544,139,-544,48,-544,79,-544,31,-544,19,-544,85,-544,45,-544,28,-544,46,-544,90,-544,38,-544,29,-544,44,-544,51,-544,64,-544,66,-544,62,-544,63,-544},new int[]{-171,34});
    states[913] = new State(-547);
    states[914] = new State(-548);
    states[915] = new State(-549);
    states[916] = new State(-550);
    states[917] = new State(-551);
    states[918] = new State(-552);
    states[919] = new State(-553);
    states[920] = new State(new int[]{97,921});
    states[921] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269},new int[]{-84,922,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274});
    states[922] = new State(new int[]{10,923,14,911,106,913,111,914,109,915,107,916,110,917,108,918,123,919},new int[]{-170,32});
    states[923] = new State(-393);
    states[924] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,73,52,72,53,71,54,70,55},new int[]{-146,925,-119,954,-124,44,-125,47,-123,955});
    states[925] = new State(new int[]{7,939,11,945,74,-358,75,-358,10,-358,5,-360},new int[]{-203,926,-208,942});
    states[926] = new State(new int[]{74,932,75,935,10,-367},new int[]{-176,927});
    states[927] = new State(new int[]{10,928});
    states[928] = new State(new int[]{54,930,11,-356,20,-356,35,-356,30,-356,23,-356,24,-356,37,-356,80,-356,73,-356,72,-356,71,-356,70,-356},new int[]{-177,929});
    states[929] = new State(-355);
    states[930] = new State(new int[]{10,931});
    states[931] = new State(-357);
    states[932] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,10,-366},new int[]{-122,933,-119,938,-124,44,-125,47});
    states[933] = new State(new int[]{74,932,75,935,10,-367},new int[]{-176,934});
    states[934] = new State(-368);
    states[935] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,10,-366},new int[]{-122,936,-119,938,-124,44,-125,47});
    states[936] = new State(new int[]{74,932,75,935,10,-367},new int[]{-176,937});
    states[937] = new State(-369);
    states[938] = new State(-365);
    states[939] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,73,52,72,53,71,54,70,55},new int[]{-119,940,-123,941,-124,44,-125,47});
    states[940] = new State(-350);
    states[941] = new State(-351);
    states[942] = new State(new int[]{5,943});
    states[943] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-241,944,-242,291,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[944] = new State(-359);
    states[945] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-207,946,-206,953,-131,950,-119,474,-124,44,-125,47});
    states[946] = new State(new int[]{12,947,10,948});
    states[947] = new State(-361);
    states[948] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-206,949,-131,950,-119,474,-124,44,-125,47});
    states[949] = new State(-363);
    states[950] = new State(new int[]{5,951,88,472});
    states[951] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-241,952,-242,291,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[952] = new State(-364);
    states[953] = new State(-362);
    states[954] = new State(-348);
    states[955] = new State(-349);
    states[956] = new State(-338);
    states[957] = new State(new int[]{11,-339,20,-339,35,-339,30,-339,23,-339,24,-339,37,-339,80,-339,73,-339,72,-339,71,-339,70,-339,50,-61,22,-61,58,-61,41,-61,44,-61,53,-61,79,-61},new int[]{-150,958,-39,634,-35,637});
    states[958] = new State(-381);
    states[959] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,36,224,8,-347,10,-347},new int[]{-145,960,-144,614,-143,615,-114,616,-109,617,-106,618,-119,623,-124,44,-125,47,-165,624,-290,625,-121,629});
    states[960] = new State(new int[]{8,535,10,-418},new int[]{-99,961});
    states[961] = new State(new int[]{10,525},new int[]{-179,962});
    states[962] = new State(-343);
    states[963] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,36,224,8,-347,10,-347},new int[]{-145,964,-144,614,-143,615,-114,616,-109,617,-106,618,-119,623,-124,44,-125,47,-165,624,-290,625,-121,629});
    states[964] = new State(new int[]{8,535,10,-418},new int[]{-99,965});
    states[965] = new State(new int[]{10,525},new int[]{-179,966});
    states[966] = new State(-345);
    states[967] = new State(-335);
    states[968] = new State(-389);
    states[969] = new State(-336);
    states[970] = new State(-353);
    states[971] = new State(new int[]{11,600,80,-315,73,-315,72,-315,71,-315,70,-315,20,-193,35,-193,30,-193,23,-193,24,-193,37,-193},new int[]{-49,512,-48,513,-5,514,-219,612,-50,972});
    states[972] = new State(-327);
    states[973] = new State(-324);
    states[974] = new State(-281);
    states[975] = new State(-282);
    states[976] = new State(new int[]{20,977,39,978,34,979,8,-283,17,-283,11,-283,80,-283,73,-283,72,-283,71,-283,70,-283,22,-283,129,-283,74,-283,75,-283,69,-283,67,-283,53,-283,35,-283,30,-283,23,-283,24,-283,37,-283,10,-283});
    states[977] = new State(-284);
    states[978] = new State(-285);
    states[979] = new State(-286);
    states[980] = new State(new int[]{60,982,61,983,132,984,21,985,20,-278,34,-278,55,-278},new int[]{-18,981});
    states[981] = new State(-280);
    states[982] = new State(-273);
    states[983] = new State(-274);
    states[984] = new State(-275);
    states[985] = new State(-276);
    states[986] = new State(-279);
    states[987] = new State(new int[]{109,989,106,-201},new int[]{-128,988});
    states[988] = new State(-202);
    states[989] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-131,990,-119,474,-124,44,-125,47});
    states[990] = new State(new int[]{108,991,107,622,88,472});
    states[991] = new State(-203);
    states[992] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571,41,679,60,982,61,983,132,984,21,985,20,-277,34,-277,55,-277},new int[]{-250,993,-242,678,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575,-26,681,-19,682,-20,980,-18,986});
    states[993] = new State(new int[]{10,994});
    states[994] = new State(-200);
    states[995] = new State(new int[]{11,600,129,-193,74,-193,75,-193,69,-193,67,-193},new int[]{-44,996,-5,672,-219,612});
    states[996] = new State(-97);
    states[997] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,50,-82,22,-82,58,-82,41,-82,44,-82,53,-82,79,-82},new int[]{-270,998,-271,999,-131,701,-119,474,-124,44,-125,47});
    states[998] = new State(-101);
    states[999] = new State(new int[]{10,1000});
    states[1000] = new State(-370);
    states[1001] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-270,1002,-271,999,-131,701,-119,474,-124,44,-125,47});
    states[1002] = new State(-99);
    states[1003] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-270,1004,-271,999,-131,701,-119,474,-124,44,-125,47});
    states[1004] = new State(-100);
    states[1005] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,553,12,-253,88,-253},new int[]{-237,1006,-238,1007,-154,552,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129});
    states[1006] = new State(-251);
    states[1007] = new State(-252);
    states[1008] = new State(-250);
    states[1009] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-242,1010,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[1010] = new State(-249);
    states[1011] = new State(new int[]{9,1012,10,468});
    states[1012] = new State(new int[]{5,289,113,-762},new int[]{-283,1013});
    states[1013] = new State(new int[]{113,1014});
    states[1014] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269,79,16},new int[]{-286,1015,-85,214,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-224,283});
    states[1015] = new State(-755);
    states[1016] = new State(new int[]{5,1017,10,1029,88,1035,113,212,11,-595,8,-595,7,-595,128,-595,4,-595,105,-595,104,-595,117,-595,118,-595,119,-595,120,-595,116,-595,122,-595,124,-595,103,-595,102,-595,114,-595,115,-595,112,-595,14,-595,106,-595,111,-595,109,-595,107,-595,110,-595,108,-595,123,-595,13,-595,9,-595});
    states[1017] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-241,1018,-242,291,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[1018] = new State(new int[]{9,1019,10,1023});
    states[1019] = new State(new int[]{5,289,113,-762},new int[]{-283,1020});
    states[1020] = new State(new int[]{113,1021});
    states[1021] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269,79,16},new int[]{-286,1022,-85,214,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-224,283});
    states[1022] = new State(-747);
    states[1023] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-284,1024,-285,475,-131,470,-119,474,-124,44,-125,47});
    states[1024] = new State(new int[]{9,1025,10,468});
    states[1025] = new State(new int[]{5,289,113,-762},new int[]{-283,1026});
    states[1026] = new State(new int[]{113,1027});
    states[1027] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269,79,16},new int[]{-286,1028,-85,214,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-224,283});
    states[1028] = new State(-749);
    states[1029] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-284,1030,-285,475,-131,470,-119,474,-124,44,-125,47});
    states[1030] = new State(new int[]{9,1031,10,468});
    states[1031] = new State(new int[]{5,289,113,-762},new int[]{-283,1032});
    states[1032] = new State(new int[]{113,1033});
    states[1033] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269,79,16},new int[]{-286,1034,-85,214,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-224,283});
    states[1034] = new State(-748);
    states[1035] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-285,1036,-131,470,-119,474,-124,44,-125,47});
    states[1036] = new State(new int[]{9,1037,10,1041});
    states[1037] = new State(new int[]{5,289,113,-762},new int[]{-283,1038});
    states[1038] = new State(new int[]{113,1039});
    states[1039] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269,79,16},new int[]{-286,1040,-85,214,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-224,283});
    states[1040] = new State(-750);
    states[1041] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-284,1042,-285,475,-131,470,-119,474,-124,44,-125,47});
    states[1042] = new State(new int[]{9,1043,10,468});
    states[1043] = new State(new int[]{5,289,113,-762},new int[]{-283,1044});
    states[1044] = new State(new int[]{113,1045});
    states[1045] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269,79,16},new int[]{-286,1046,-85,214,-84,31,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-224,283});
    states[1046] = new State(-751);
    states[1047] = new State(new int[]{11,1048});
    states[1048] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453,12,-609},new int[]{-61,1049,-64,209,-77,210,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[1049] = new State(new int[]{12,1050});
    states[1050] = new State(new int[]{8,1052,80,-530,10,-530,86,-530,89,-530,26,-530,92,-530,105,-530,104,-530,117,-530,118,-530,119,-530,120,-530,116,-530,122,-530,124,-530,5,-530,103,-530,102,-530,114,-530,115,-530,112,-530,14,-530,106,-530,111,-530,109,-530,107,-530,110,-530,108,-530,123,-530,13,-530,25,-530,2,-530,6,-530,88,-530,12,-530,9,-530,87,-530,73,-530,72,-530,71,-530,70,-530,42,-530,49,-530,127,-530,129,-530,74,-530,75,-530,69,-530,67,-530,36,-530,33,-530,15,-530,16,-530,130,-530,131,-530,138,-530,140,-530,139,-530,48,-530,79,-530,31,-530,19,-530,85,-530,45,-530,28,-530,46,-530,90,-530,38,-530,29,-530,44,-530,51,-530,64,-530,66,-530,62,-530,63,-530},new int[]{-4,1051});
    states[1051] = new State(-532);
    states[1052] = new State(new int[]{129,43,74,45,75,46,69,48,67,217,15,264,16,269,11,339,138,131,140,132,139,133,130,127,131,128,47,350,127,351,8,367,121,377,103,191,102,192,128,381,54,135,9,-179},new int[]{-60,1053,-59,385,-76,394,-75,388,-78,389,-73,306,-11,324,-9,332,-12,313,-119,333,-124,44,-125,47,-226,336,-258,337,-209,338,-15,348,-138,349,-140,125,-139,129,-173,379,-235,383,-211,384,-82,390,-212,391,-147,392,-52,393});
    states[1053] = new State(new int[]{9,1054});
    states[1054] = new State(-529);
    states[1055] = new State(new int[]{8,1056});
    states[1056] = new State(new int[]{129,43,74,45,75,46,69,48,67,217,47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,36,224,33,253,8,262,15,264,16,269},new int[]{-289,1057,-288,1065,-119,1061,-124,44,-125,47,-84,1064,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-165,223,-226,263,-258,268,-147,273,-234,274});
    states[1057] = new State(new int[]{9,1058,88,1059});
    states[1058] = new State(-533);
    states[1059] = new State(new int[]{129,43,74,45,75,46,69,48,67,217,47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,36,224,33,253,8,262,15,264,16,269},new int[]{-288,1060,-119,1061,-124,44,-125,47,-84,1064,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-165,223,-226,263,-258,268,-147,273,-234,274});
    states[1060] = new State(-537);
    states[1061] = new State(new int[]{97,1062,11,-595,8,-595,7,-595,128,-595,4,-595,105,-595,104,-595,117,-595,118,-595,119,-595,120,-595,116,-595,122,-595,124,-595,103,-595,102,-595,114,-595,115,-595,112,-595,14,-595,106,-595,111,-595,109,-595,107,-595,110,-595,108,-595,123,-595,9,-595,88,-595});
    states[1062] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269},new int[]{-84,1063,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274});
    states[1063] = new State(new int[]{14,911,106,913,111,914,109,915,107,916,110,917,108,918,123,919,9,-534,88,-534},new int[]{-170,32});
    states[1064] = new State(new int[]{14,911,106,913,111,914,109,915,107,916,110,917,108,918,123,919,9,-535,88,-535},new int[]{-170,32});
    states[1065] = new State(-536);
    states[1066] = new State(new int[]{7,140,4,143,109,145,8,-526,80,-526,10,-526,86,-526,89,-526,26,-526,92,-526,105,-526,104,-526,117,-526,118,-526,119,-526,120,-526,116,-526,122,-526,124,-526,5,-526,103,-526,102,-526,114,-526,115,-526,112,-526,14,-526,106,-526,111,-526,107,-526,110,-526,108,-526,123,-526,13,-526,25,-526,2,-526,6,-526,88,-526,12,-526,9,-526,87,-526,73,-526,72,-526,71,-526,70,-526,42,-526,49,-526,127,-526,129,-526,74,-526,75,-526,69,-526,67,-526,36,-526,33,-526,15,-526,16,-526,130,-526,131,-526,138,-526,140,-526,139,-526,48,-526,79,-526,31,-526,19,-526,85,-526,45,-526,28,-526,46,-526,90,-526,38,-526,29,-526,44,-526,51,-526,64,-526,66,-526,62,-526,63,-526,11,-538},new int[]{-261,142});
    states[1067] = new State(-539);
    states[1068] = new State(new int[]{49,1009});
    states[1069] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,73,52,72,53,71,54,70,55,60,56,55,57,114,58,16,59,15,60,54,61,17,62,115,63,116,64,117,65,118,66,119,67,120,68,121,69,122,70,123,71,124,72,18,73,65,74,79,75,19,76,20,77,22,78,23,79,24,80,63,81,87,82,25,83,26,84,27,85,21,86,92,87,89,88,28,89,29,90,30,91,31,92,32,93,33,94,91,95,34,96,35,97,37,98,38,99,39,100,85,101,40,102,90,103,41,104,42,105,62,106,86,107,43,108,44,109,45,110,46,111,47,112,48,113,49,114,50,115,52,116,93,117,94,118,95,119,96,120,36,224},new int[]{-120,1070,-119,1071,-124,44,-125,47,-256,1072,-123,51,-165,1073});
    states[1070] = new State(-605);
    states[1071] = new State(-634);
    states[1072] = new State(-635);
    states[1073] = new State(-636);
    states[1074] = new State(-606);
    states[1075] = new State(new int[]{109,145},new int[]{-261,1076});
    states[1076] = new State(-607);
    states[1077] = new State(-589);
    states[1078] = new State(-612);
    states[1079] = new State(-32);
    states[1080] = new State(new int[]{50,640,22,664,58,668,41,995,44,1001,53,1003,11,600,79,-57,80,-57,91,-57,35,-193,30,-193,20,-193,23,-193,24,-193},new int[]{-42,1081,-141,1082,-25,1083,-47,1084,-252,1085,-269,1086,-190,1087,-5,1088,-219,612});
    states[1081] = new State(-59);
    states[1082] = new State(-69);
    states[1083] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,50,-70,22,-70,58,-70,41,-70,44,-70,53,-70,11,-70,35,-70,30,-70,20,-70,23,-70,24,-70,79,-70,80,-70,91,-70},new int[]{-23,650,-24,651,-113,653,-119,663,-124,44,-125,47});
    states[1084] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,50,-71,22,-71,58,-71,41,-71,44,-71,53,-71,11,-71,35,-71,30,-71,20,-71,23,-71,24,-71,79,-71,80,-71,91,-71},new int[]{-23,667,-24,651,-113,653,-119,663,-124,44,-125,47});
    states[1085] = new State(new int[]{11,600,50,-72,22,-72,58,-72,41,-72,44,-72,53,-72,35,-72,30,-72,20,-72,23,-72,24,-72,79,-72,80,-72,91,-72,129,-193,74,-193,75,-193,69,-193,67,-193},new int[]{-44,671,-5,672,-219,612});
    states[1086] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,50,-73,22,-73,58,-73,41,-73,44,-73,53,-73,11,-73,35,-73,30,-73,20,-73,23,-73,24,-73,79,-73,80,-73,91,-73},new int[]{-270,998,-271,999,-131,701,-119,474,-124,44,-125,47});
    states[1087] = new State(-74);
    states[1088] = new State(new int[]{35,1110,30,1116,20,1127,23,959,24,963,11,600},new int[]{-183,1089,-219,516,-184,1090,-191,1091,-198,1092,-195,717,-199,897,-187,1129,-197,1130});
    states[1089] = new State(-77);
    states[1090] = new State(-75);
    states[1091] = new State(-382);
    states[1092] = new State(new int[]{133,1094,95,1101,50,-58,22,-58,58,-58,41,-58,44,-58,53,-58,11,-58,35,-58,30,-58,20,-58,23,-58,24,-58,79,-58},new int[]{-152,1093,-151,1096,-37,1097,-38,1080,-55,1100});
    states[1093] = new State(-384);
    states[1094] = new State(new int[]{10,1095});
    states[1095] = new State(-388);
    states[1096] = new State(-395);
    states[1097] = new State(new int[]{79,16},new int[]{-224,1098});
    states[1098] = new State(new int[]{10,1099});
    states[1099] = new State(-416);
    states[1100] = new State(-396);
    states[1101] = new State(new int[]{10,1109,129,43,74,45,75,46,69,48,67,49,130,127,131,128},new int[]{-89,1102,-119,1106,-124,44,-125,47,-138,1107,-140,125,-139,129});
    states[1102] = new State(new int[]{69,1103,10,1108});
    states[1103] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,130,127,131,128},new int[]{-89,1104,-119,1106,-124,44,-125,47,-138,1107,-140,125,-139,129});
    states[1104] = new State(new int[]{10,1105});
    states[1105] = new State(-411);
    states[1106] = new State(-414);
    states[1107] = new State(-415);
    states[1108] = new State(-412);
    states[1109] = new State(-413);
    states[1110] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,36,224},new int[]{-144,1111,-143,615,-114,616,-109,617,-106,618,-119,623,-124,44,-125,47,-165,624,-290,625,-121,629});
    states[1111] = new State(new int[]{8,535,97,-418,10,-418},new int[]{-99,1112});
    states[1112] = new State(new int[]{97,1113,10,525},new int[]{-179,721});
    states[1113] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,10,-437},new int[]{-231,1114,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[1114] = new State(new int[]{10,1115});
    states[1115] = new State(-387);
    states[1116] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,36,224},new int[]{-143,1117,-114,616,-109,617,-106,618,-119,623,-124,44,-125,47,-165,624,-290,625,-121,629});
    states[1117] = new State(new int[]{8,535,5,-418,97,-418,10,-418},new int[]{-99,1118});
    states[1118] = new State(new int[]{5,1119,97,1124,10,525},new int[]{-179,901});
    states[1119] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-241,1120,-242,291,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[1120] = new State(new int[]{97,1121,10,525},new int[]{-179,905});
    states[1121] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269},new int[]{-84,1122,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274});
    states[1122] = new State(new int[]{10,1123,14,911,106,913,111,914,109,915,107,916,110,917,108,918,123,919},new int[]{-170,32});
    states[1123] = new State(-385);
    states[1124] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,262,15,264,16,269},new int[]{-84,1125,-86,215,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,216,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274});
    states[1125] = new State(new int[]{10,1126,14,911,106,913,111,914,109,915,107,916,110,917,108,918,123,919},new int[]{-170,32});
    states[1126] = new State(-386);
    states[1127] = new State(new int[]{23,521,35,1110,30,1116},new int[]{-191,1128,-198,1092,-195,717,-199,897});
    states[1128] = new State(-383);
    states[1129] = new State(-76);
    states[1130] = new State(-58,new int[]{-151,1131,-37,1097,-38,1080});
    states[1131] = new State(-380);
    states[1132] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,73,52,72,53,71,54,70,55,60,56,55,57,114,58,16,59,15,60,54,61,17,62,115,63,116,64,117,65,118,66,119,67,120,68,121,69,122,70,123,71,124,72,18,73,65,74,79,75,19,76,20,77,22,78,23,79,24,80,63,81,87,82,25,83,26,84,27,85,21,86,92,87,89,88,28,89,29,90,30,91,31,92,32,93,33,94,91,95,34,96,35,97,37,98,38,99,39,100,85,101,40,102,90,103,41,104,42,105,62,106,86,107,43,108,44,109,45,110,46,111,47,112,48,113,49,114,50,115,52,116,93,117,94,118,95,119,96,120,36,122,80,123},new int[]{-265,1133,-267,1143,-130,1137,-110,1142,-119,42,-124,44,-125,47,-256,50,-123,51,-257,121});
    states[1133] = new State(new int[]{10,1134,88,1135});
    states[1134] = new State(-36);
    states[1135] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,73,52,72,53,71,54,70,55,60,56,55,57,114,58,16,59,15,60,54,61,17,62,115,63,116,64,117,65,118,66,119,67,120,68,121,69,122,70,123,71,124,72,18,73,65,74,79,75,19,76,20,77,22,78,23,79,24,80,63,81,87,82,25,83,26,84,27,85,21,86,92,87,89,88,28,89,29,90,30,91,31,92,32,93,33,94,91,95,34,96,35,97,37,98,38,99,39,100,85,101,40,102,90,103,41,104,42,105,62,106,86,107,43,108,44,109,45,110,46,111,47,112,48,113,49,114,50,115,52,116,93,117,94,118,95,119,96,120,36,122,80,123},new int[]{-267,1136,-130,1137,-110,1142,-119,42,-124,44,-125,47,-256,50,-123,51,-257,121});
    states[1136] = new State(-38);
    states[1137] = new State(new int[]{7,1138,123,1140,10,-39,88,-39});
    states[1138] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,73,52,72,53,71,54,70,55,60,56,55,57,114,58,16,59,15,60,54,61,17,62,115,63,116,64,117,65,118,66,119,67,120,68,121,69,122,70,123,71,124,72,18,73,65,74,79,75,19,76,20,77,22,78,23,79,24,80,63,81,87,82,25,83,26,84,27,85,21,86,92,87,89,88,28,89,29,90,30,91,31,92,32,93,33,94,91,95,34,96,35,97,37,98,38,99,39,100,85,101,40,102,90,103,41,104,42,105,62,106,86,107,43,108,44,109,45,110,46,111,47,112,48,113,49,114,50,115,52,116,93,117,94,118,95,119,96,120,36,122,80,123},new int[]{-110,1139,-119,42,-124,44,-125,47,-256,50,-123,51,-257,121});
    states[1139] = new State(-34);
    states[1140] = new State(new int[]{130,1141});
    states[1141] = new State(-40);
    states[1142] = new State(-33);
    states[1143] = new State(-37);
    states[1144] = new State(new int[]{3,1146,43,-12,79,-12,50,-12,22,-12,58,-12,41,-12,44,-12,53,-12,11,-12,35,-12,30,-12,20,-12,23,-12,24,-12,34,-12,80,-12,91,-12},new int[]{-158,1145});
    states[1145] = new State(-14);
    states[1146] = new State(new int[]{129,1147,130,1148});
    states[1147] = new State(-15);
    states[1148] = new State(-16);
    states[1149] = new State(-13);
    states[1150] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-119,1151,-124,44,-125,47});
    states[1151] = new State(new int[]{10,1153,8,1154},new int[]{-161,1152});
    states[1152] = new State(-25);
    states[1153] = new State(-26);
    states[1154] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-163,1155,-118,1161,-119,1160,-124,44,-125,47});
    states[1155] = new State(new int[]{9,1156,88,1158});
    states[1156] = new State(new int[]{10,1157});
    states[1157] = new State(-27);
    states[1158] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-118,1159,-119,1160,-124,44,-125,47});
    states[1159] = new State(-29);
    states[1160] = new State(-30);
    states[1161] = new State(-28);
    states[1162] = new State(-3);
    states[1163] = new State(new int[]{93,1218,94,1219,11,600},new int[]{-268,1164,-219,516,-2,1213});
    states[1164] = new State(new int[]{34,1185,43,1132,50,-35,22,-35,58,-35,41,-35,44,-35,53,-35,11,-35,35,-35,30,-35,20,-35,23,-35,24,-35,80,-35,91,-35,79,-35},new int[]{-135,1165,-136,1182,-264,1211});
    states[1165] = new State(new int[]{32,1179},new int[]{-134,1166});
    states[1166] = new State(new int[]{80,1169,91,1170,79,1176},new int[]{-127,1167});
    states[1167] = new State(new int[]{7,1168});
    states[1168] = new State(-41);
    states[1169] = new State(-50);
    states[1170] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,80,-437,92,-437,10,-437},new int[]{-221,1171,-231,783,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[1171] = new State(new int[]{80,1172,92,1173,10,19});
    states[1172] = new State(-51);
    states[1173] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,80,-437,10,-437},new int[]{-221,1174,-231,783,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[1174] = new State(new int[]{80,1175,10,19});
    states[1175] = new State(-52);
    states[1176] = new State(new int[]{127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,751,8,262,15,264,16,269,130,127,131,128,138,752,140,132,139,753,48,756,79,16,31,760,19,767,85,779,45,785,28,790,46,800,90,806,38,813,29,816,44,824,51,830,64,835,66,839,80,-437,10,-437},new int[]{-221,1177,-231,783,-230,21,-3,22,-93,23,-103,196,-92,205,-119,750,-124,44,-125,47,-165,223,-226,263,-258,268,-14,458,-138,124,-140,125,-139,129,-15,130,-182,754,-104,755,-224,758,-126,759,-31,766,-216,778,-277,784,-97,789,-278,799,-133,804,-263,805,-217,812,-96,815,-273,823,-53,826,-148,827,-147,828,-142,829,-105,834,-98,838,-115,841});
    states[1177] = new State(new int[]{80,1178,10,19});
    states[1178] = new State(-53);
    states[1179] = new State(new int[]{43,1132,50,-35,22,-35,58,-35,41,-35,44,-35,53,-35,11,-35,35,-35,30,-35,20,-35,23,-35,24,-35,80,-35,91,-35,79,-35},new int[]{-264,1180});
    states[1180] = new State(-58,new int[]{-37,1181,-38,1080});
    states[1181] = new State(-48);
    states[1182] = new State(new int[]{80,1169,91,1170,79,1176},new int[]{-127,1183});
    states[1183] = new State(new int[]{7,1184});
    states[1184] = new State(-42);
    states[1185] = new State(new int[]{43,1132,22,-35,58,-35,41,-35,44,-35,53,-35,11,-35,35,-35,30,-35,32,-35},new int[]{-264,1186});
    states[1186] = new State(-55,new int[]{-36,1187,-34,1188});
    states[1187] = new State(-47);
    states[1188] = new State(new int[]{22,664,58,668,41,995,44,1001,53,1003,11,600,32,-54,35,-193,30,-193},new int[]{-43,1189,-25,1190,-47,1191,-252,1192,-269,1193,-202,1194,-5,1195,-219,612,-201,1210});
    states[1189] = new State(-56);
    states[1190] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,22,-63,58,-63,41,-63,44,-63,53,-63,11,-63,35,-63,30,-63,32,-63},new int[]{-23,650,-24,651,-113,653,-119,663,-124,44,-125,47});
    states[1191] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,22,-64,58,-64,41,-64,44,-64,53,-64,11,-64,35,-64,30,-64,32,-64},new int[]{-23,667,-24,651,-113,653,-119,663,-124,44,-125,47});
    states[1192] = new State(new int[]{11,600,22,-65,58,-65,41,-65,44,-65,53,-65,35,-65,30,-65,32,-65,129,-193,74,-193,75,-193,69,-193,67,-193},new int[]{-44,671,-5,672,-219,612});
    states[1193] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,22,-66,58,-66,41,-66,44,-66,53,-66,11,-66,35,-66,30,-66,32,-66},new int[]{-270,998,-271,999,-131,701,-119,474,-124,44,-125,47});
    states[1194] = new State(-67);
    states[1195] = new State(new int[]{35,1202,11,600,30,1205},new int[]{-195,1196,-219,516,-199,1199});
    states[1196] = new State(new int[]{133,1197,22,-83,58,-83,41,-83,44,-83,53,-83,11,-83,35,-83,30,-83,32,-83});
    states[1197] = new State(new int[]{10,1198});
    states[1198] = new State(-84);
    states[1199] = new State(new int[]{133,1200,22,-85,58,-85,41,-85,44,-85,53,-85,11,-85,35,-85,30,-85,32,-85});
    states[1200] = new State(new int[]{10,1201});
    states[1201] = new State(-86);
    states[1202] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,36,224},new int[]{-144,1203,-143,615,-114,616,-109,617,-106,618,-119,623,-124,44,-125,47,-165,624,-290,625,-121,629});
    states[1203] = new State(new int[]{8,535,10,-418},new int[]{-99,1204});
    states[1204] = new State(new int[]{10,525},new int[]{-179,721});
    states[1205] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,36,224},new int[]{-143,1206,-114,616,-109,617,-106,618,-119,623,-124,44,-125,47,-165,624,-290,625,-121,629});
    states[1206] = new State(new int[]{8,535,5,-418,10,-418},new int[]{-99,1207});
    states[1207] = new State(new int[]{5,1208,10,525},new int[]{-179,901});
    states[1208] = new State(new int[]{129,298,74,45,75,46,69,48,67,49,138,131,140,132,139,133,103,191,102,192,130,127,131,128,8,441,128,487,18,492,39,500,40,549,27,557,65,561,56,564,35,569,30,571},new int[]{-241,1209,-242,291,-238,292,-154,293,-119,152,-124,44,-125,47,-80,421,-87,440,-88,439,-15,432,-173,433,-138,435,-140,125,-139,129,-225,485,-218,486,-245,489,-246,490,-243,491,-236,498,-27,499,-233,548,-101,556,-102,560,-196,566,-194,567,-193,568,-262,575});
    states[1209] = new State(new int[]{10,525},new int[]{-179,905});
    states[1210] = new State(-68);
    states[1211] = new State(-58,new int[]{-37,1212,-38,1080});
    states[1212] = new State(-49);
    states[1213] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-111,1214,-119,1217,-124,44,-125,47});
    states[1214] = new State(new int[]{10,1215});
    states[1215] = new State(new int[]{3,1146,34,-11,43,-11,80,-11,91,-11,79,-11,50,-11,22,-11,58,-11,41,-11,44,-11,53,-11,11,-11,35,-11,30,-11,20,-11,23,-11,24,-11},new int[]{-159,1216,-160,1144,-158,1149});
    states[1216] = new State(-43);
    states[1217] = new State(-46);
    states[1218] = new State(-44);
    states[1219] = new State(-45);
    states[1220] = new State(-4);
    states[1221] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453},new int[]{-77,1222,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,195,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278});
    states[1222] = new State(-5);
    states[1223] = new State(new int[]{129,43,74,45,75,46,69,48,67,49},new int[]{-279,1224,-280,1225,-119,1229,-124,44,-125,47});
    states[1224] = new State(-6);
    states[1225] = new State(new int[]{7,1226,109,145,2,-593},new int[]{-261,1228});
    states[1226] = new State(new int[]{129,43,74,45,75,46,69,48,67,49,73,52,72,53,71,54,70,55,60,56,55,57,114,58,16,59,15,60,54,61,17,62,115,63,116,64,117,65,118,66,119,67,120,68,121,69,122,70,123,71,124,72,18,73,65,74,79,75,19,76,20,77,22,78,23,79,24,80,63,81,87,82,25,83,26,84,27,85,21,86,92,87,89,88,28,89,29,90,30,91,31,92,32,93,33,94,91,95,34,96,35,97,37,98,38,99,39,100,85,101,40,102,90,103,41,104,42,105,62,106,86,107,43,108,44,109,45,110,46,111,47,112,48,113,49,114,50,115,52,116,93,117,94,118,95,119,96,120,36,122,80,123},new int[]{-110,1227,-119,42,-124,44,-125,47,-256,50,-123,51,-257,121});
    states[1227] = new State(-592);
    states[1228] = new State(-594);
    states[1229] = new State(-591);
    states[1230] = new State(new int[]{47,38,130,127,131,128,138,131,140,132,139,133,54,135,11,155,121,187,103,191,102,192,128,193,127,204,129,43,74,45,75,46,69,48,67,217,36,224,33,253,8,255,15,264,16,269,30,279,35,453,44,824},new int[]{-229,1231,-77,1232,-85,26,-84,31,-86,164,-74,174,-83,186,-14,39,-138,124,-140,125,-139,129,-15,130,-52,134,-173,189,-93,1233,-103,196,-92,205,-119,211,-124,44,-125,47,-165,223,-226,263,-258,268,-147,273,-234,274,-210,275,-95,276,-281,277,-282,278,-3,1234,-273,1235});
    states[1231] = new State(-7);
    states[1232] = new State(-8);
    states[1233] = new State(new int[]{97,248,98,249,99,250,100,251,101,252,105,-583,104,-583,117,-583,118,-583,119,-583,120,-583,116,-583,122,-583,124,-583,5,-583,103,-583,102,-583,114,-583,115,-583,112,-583,14,-583,106,-583,111,-583,109,-583,107,-583,110,-583,108,-583,123,-583,13,-583,2,-583},new int[]{-168,24});
    states[1234] = new State(-9);
    states[1235] = new State(-10);

    rules[1] = new Rule(-292, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-204});
    rules[3] = new Rule(-1, new int[]{-266});
    rules[4] = new Rule(-1, new int[]{-149});
    rules[5] = new Rule(-149, new int[]{76,-77});
    rules[6] = new Rule(-149, new int[]{78,-279});
    rules[7] = new Rule(-149, new int[]{77,-229});
    rules[8] = new Rule(-229, new int[]{-77});
    rules[9] = new Rule(-229, new int[]{-3});
    rules[10] = new Rule(-229, new int[]{-273});
    rules[11] = new Rule(-159, new int[]{});
    rules[12] = new Rule(-159, new int[]{-160});
    rules[13] = new Rule(-160, new int[]{-158});
    rules[14] = new Rule(-160, new int[]{-160,-158});
    rules[15] = new Rule(-158, new int[]{3,129});
    rules[16] = new Rule(-158, new int[]{3,130});
    rules[17] = new Rule(-204, new int[]{-205,-159,-264,-16,-162});
    rules[18] = new Rule(-162, new int[]{7});
    rules[19] = new Rule(-162, new int[]{10});
    rules[20] = new Rule(-162, new int[]{5});
    rules[21] = new Rule(-162, new int[]{88});
    rules[22] = new Rule(-162, new int[]{6});
    rules[23] = new Rule(-162, new int[]{});
    rules[24] = new Rule(-205, new int[]{});
    rules[25] = new Rule(-205, new int[]{52,-119,-161});
    rules[26] = new Rule(-161, new int[]{10});
    rules[27] = new Rule(-161, new int[]{8,-163,9,10});
    rules[28] = new Rule(-163, new int[]{-118});
    rules[29] = new Rule(-163, new int[]{-163,88,-118});
    rules[30] = new Rule(-118, new int[]{-119});
    rules[31] = new Rule(-16, new int[]{-33,-224});
    rules[32] = new Rule(-33, new int[]{-37});
    rules[33] = new Rule(-130, new int[]{-110});
    rules[34] = new Rule(-130, new int[]{-130,7,-110});
    rules[35] = new Rule(-264, new int[]{});
    rules[36] = new Rule(-264, new int[]{43,-265,10});
    rules[37] = new Rule(-265, new int[]{-267});
    rules[38] = new Rule(-265, new int[]{-265,88,-267});
    rules[39] = new Rule(-267, new int[]{-130});
    rules[40] = new Rule(-267, new int[]{-130,123,130});
    rules[41] = new Rule(-266, new int[]{-5,-268,-135,-134,-127,7});
    rules[42] = new Rule(-266, new int[]{-5,-268,-136,-127,7});
    rules[43] = new Rule(-268, new int[]{-2,-111,10,-159});
    rules[44] = new Rule(-2, new int[]{93});
    rules[45] = new Rule(-2, new int[]{94});
    rules[46] = new Rule(-111, new int[]{-119});
    rules[47] = new Rule(-135, new int[]{34,-264,-36});
    rules[48] = new Rule(-134, new int[]{32,-264,-37});
    rules[49] = new Rule(-136, new int[]{-264,-37});
    rules[50] = new Rule(-127, new int[]{80});
    rules[51] = new Rule(-127, new int[]{91,-221,80});
    rules[52] = new Rule(-127, new int[]{91,-221,92,-221,80});
    rules[53] = new Rule(-127, new int[]{79,-221,80});
    rules[54] = new Rule(-36, new int[]{-34});
    rules[55] = new Rule(-34, new int[]{});
    rules[56] = new Rule(-34, new int[]{-34,-43});
    rules[57] = new Rule(-37, new int[]{-38});
    rules[58] = new Rule(-38, new int[]{});
    rules[59] = new Rule(-38, new int[]{-38,-42});
    rules[60] = new Rule(-39, new int[]{-35});
    rules[61] = new Rule(-35, new int[]{});
    rules[62] = new Rule(-35, new int[]{-35,-41});
    rules[63] = new Rule(-43, new int[]{-25});
    rules[64] = new Rule(-43, new int[]{-47});
    rules[65] = new Rule(-43, new int[]{-252});
    rules[66] = new Rule(-43, new int[]{-269});
    rules[67] = new Rule(-43, new int[]{-202});
    rules[68] = new Rule(-43, new int[]{-201});
    rules[69] = new Rule(-42, new int[]{-141});
    rules[70] = new Rule(-42, new int[]{-25});
    rules[71] = new Rule(-42, new int[]{-47});
    rules[72] = new Rule(-42, new int[]{-252});
    rules[73] = new Rule(-42, new int[]{-269});
    rules[74] = new Rule(-42, new int[]{-190});
    rules[75] = new Rule(-183, new int[]{-184});
    rules[76] = new Rule(-183, new int[]{-187});
    rules[77] = new Rule(-190, new int[]{-5,-183});
    rules[78] = new Rule(-41, new int[]{-141});
    rules[79] = new Rule(-41, new int[]{-25});
    rules[80] = new Rule(-41, new int[]{-47});
    rules[81] = new Rule(-41, new int[]{-252});
    rules[82] = new Rule(-41, new int[]{-269});
    rules[83] = new Rule(-202, new int[]{-5,-195});
    rules[84] = new Rule(-202, new int[]{-5,-195,133,10});
    rules[85] = new Rule(-201, new int[]{-5,-199});
    rules[86] = new Rule(-201, new int[]{-5,-199,133,10});
    rules[87] = new Rule(-141, new int[]{50,-129,10});
    rules[88] = new Rule(-129, new int[]{-115});
    rules[89] = new Rule(-129, new int[]{-129,88,-115});
    rules[90] = new Rule(-115, new int[]{138});
    rules[91] = new Rule(-115, new int[]{139});
    rules[92] = new Rule(-115, new int[]{-119});
    rules[93] = new Rule(-25, new int[]{22,-23});
    rules[94] = new Rule(-25, new int[]{-25,-23});
    rules[95] = new Rule(-47, new int[]{58,-23});
    rules[96] = new Rule(-47, new int[]{-47,-23});
    rules[97] = new Rule(-252, new int[]{41,-44});
    rules[98] = new Rule(-252, new int[]{-252,-44});
    rules[99] = new Rule(-269, new int[]{44,-270});
    rules[100] = new Rule(-269, new int[]{53,-270});
    rules[101] = new Rule(-269, new int[]{-269,-270});
    rules[102] = new Rule(-23, new int[]{-24,10});
    rules[103] = new Rule(-24, new int[]{-113,106,-90});
    rules[104] = new Rule(-24, new int[]{-113,5,-242,106,-75});
    rules[105] = new Rule(-90, new int[]{-78});
    rules[106] = new Rule(-90, new int[]{-82});
    rules[107] = new Rule(-113, new int[]{-119});
    rules[108] = new Rule(-78, new int[]{-73});
    rules[109] = new Rule(-78, new int[]{-119,113,-286});
    rules[110] = new Rule(-78, new int[]{8,9,-283,113,-286});
    rules[111] = new Rule(-78, new int[]{8,-60,9,113,-286});
    rules[112] = new Rule(-78, new int[]{-73,-166,-73});
    rules[113] = new Rule(-78, new int[]{-211});
    rules[114] = new Rule(-211, new int[]{-78,13,-78,5,-78});
    rules[115] = new Rule(-166, new int[]{106});
    rules[116] = new Rule(-166, new int[]{111});
    rules[117] = new Rule(-166, new int[]{109});
    rules[118] = new Rule(-166, new int[]{107});
    rules[119] = new Rule(-166, new int[]{110});
    rules[120] = new Rule(-166, new int[]{108});
    rules[121] = new Rule(-166, new int[]{123});
    rules[122] = new Rule(-73, new int[]{-11});
    rules[123] = new Rule(-73, new int[]{-73,-167,-11});
    rules[124] = new Rule(-167, new int[]{103});
    rules[125] = new Rule(-167, new int[]{102});
    rules[126] = new Rule(-167, new int[]{114});
    rules[127] = new Rule(-167, new int[]{115});
    rules[128] = new Rule(-235, new int[]{-11,-175,-247});
    rules[129] = new Rule(-11, new int[]{-9});
    rules[130] = new Rule(-11, new int[]{-235});
    rules[131] = new Rule(-11, new int[]{-11,-169,-9});
    rules[132] = new Rule(-169, new int[]{105});
    rules[133] = new Rule(-169, new int[]{104});
    rules[134] = new Rule(-169, new int[]{117});
    rules[135] = new Rule(-169, new int[]{118});
    rules[136] = new Rule(-169, new int[]{119});
    rules[137] = new Rule(-169, new int[]{120});
    rules[138] = new Rule(-169, new int[]{116});
    rules[139] = new Rule(-9, new int[]{-12});
    rules[140] = new Rule(-9, new int[]{-209});
    rules[141] = new Rule(-9, new int[]{-15});
    rules[142] = new Rule(-9, new int[]{-138});
    rules[143] = new Rule(-9, new int[]{47});
    rules[144] = new Rule(-9, new int[]{127,-9});
    rules[145] = new Rule(-9, new int[]{8,-78,9});
    rules[146] = new Rule(-9, new int[]{121,-9});
    rules[147] = new Rule(-9, new int[]{-173,-9});
    rules[148] = new Rule(-9, new int[]{128,-9});
    rules[149] = new Rule(-209, new int[]{11,-68,12});
    rules[150] = new Rule(-173, new int[]{103});
    rules[151] = new Rule(-173, new int[]{102});
    rules[152] = new Rule(-12, new int[]{-119});
    rules[153] = new Rule(-12, new int[]{-226});
    rules[154] = new Rule(-12, new int[]{-258});
    rules[155] = new Rule(-12, new int[]{-12,-10});
    rules[156] = new Rule(-10, new int[]{7,-110});
    rules[157] = new Rule(-10, new int[]{128});
    rules[158] = new Rule(-10, new int[]{8,-69,9});
    rules[159] = new Rule(-10, new int[]{11,-68,12});
    rules[160] = new Rule(-69, new int[]{-66});
    rules[161] = new Rule(-69, new int[]{});
    rules[162] = new Rule(-66, new int[]{-78});
    rules[163] = new Rule(-66, new int[]{-66,88,-78});
    rules[164] = new Rule(-68, new int[]{-65});
    rules[165] = new Rule(-68, new int[]{});
    rules[166] = new Rule(-65, new int[]{-81});
    rules[167] = new Rule(-65, new int[]{-65,88,-81});
    rules[168] = new Rule(-81, new int[]{-78});
    rules[169] = new Rule(-81, new int[]{-78,6,-78});
    rules[170] = new Rule(-15, new int[]{138});
    rules[171] = new Rule(-15, new int[]{140});
    rules[172] = new Rule(-15, new int[]{139});
    rules[173] = new Rule(-75, new int[]{-78});
    rules[174] = new Rule(-75, new int[]{-82});
    rules[175] = new Rule(-75, new int[]{-212});
    rules[176] = new Rule(-82, new int[]{8,-60,9});
    rules[177] = new Rule(-82, new int[]{8,-212,9});
    rules[178] = new Rule(-82, new int[]{8,-82,9});
    rules[179] = new Rule(-60, new int[]{});
    rules[180] = new Rule(-60, new int[]{-59});
    rules[181] = new Rule(-59, new int[]{-76});
    rules[182] = new Rule(-59, new int[]{-59,88,-76});
    rules[183] = new Rule(-212, new int[]{8,-214,9});
    rules[184] = new Rule(-214, new int[]{-213});
    rules[185] = new Rule(-214, new int[]{-213,10});
    rules[186] = new Rule(-213, new int[]{-215});
    rules[187] = new Rule(-213, new int[]{-213,10,-215});
    rules[188] = new Rule(-215, new int[]{-108,5,-75});
    rules[189] = new Rule(-108, new int[]{-119});
    rules[190] = new Rule(-44, new int[]{-5,-45});
    rules[191] = new Rule(-5, new int[]{-219});
    rules[192] = new Rule(-5, new int[]{-5,-219});
    rules[193] = new Rule(-5, new int[]{});
    rules[194] = new Rule(-219, new int[]{11,-220,12});
    rules[195] = new Rule(-220, new int[]{-7});
    rules[196] = new Rule(-220, new int[]{-220,88,-7});
    rules[197] = new Rule(-7, new int[]{-8});
    rules[198] = new Rule(-7, new int[]{-119,5,-8});
    rules[199] = new Rule(-45, new int[]{-116,106,-250,10});
    rules[200] = new Rule(-45, new int[]{-117,-250,10});
    rules[201] = new Rule(-116, new int[]{-119});
    rules[202] = new Rule(-116, new int[]{-119,-128});
    rules[203] = new Rule(-117, new int[]{-119,109,-131,108});
    rules[204] = new Rule(-250, new int[]{-242});
    rules[205] = new Rule(-250, new int[]{41,-242});
    rules[206] = new Rule(-250, new int[]{-26});
    rules[207] = new Rule(-242, new int[]{-238});
    rules[208] = new Rule(-242, new int[]{-225});
    rules[209] = new Rule(-242, new int[]{-218});
    rules[210] = new Rule(-242, new int[]{-245});
    rules[211] = new Rule(-242, new int[]{-196});
    rules[212] = new Rule(-242, new int[]{-262});
    rules[213] = new Rule(-262, new int[]{-154,-261});
    rules[214] = new Rule(-261, new int[]{109,-260,107});
    rules[215] = new Rule(-260, new int[]{-244});
    rules[216] = new Rule(-260, new int[]{-260,88,-244});
    rules[217] = new Rule(-244, new int[]{-154});
    rules[218] = new Rule(-244, new int[]{-262});
    rules[219] = new Rule(-238, new int[]{-154});
    rules[220] = new Rule(-238, new int[]{-80,6,-80});
    rules[221] = new Rule(-238, new int[]{8,-72,9});
    rules[222] = new Rule(-80, new int[]{-87});
    rules[223] = new Rule(-80, new int[]{-80,-167,-87});
    rules[224] = new Rule(-87, new int[]{-88});
    rules[225] = new Rule(-87, new int[]{-87,-169,-88});
    rules[226] = new Rule(-88, new int[]{-154});
    rules[227] = new Rule(-88, new int[]{-15});
    rules[228] = new Rule(-88, new int[]{-173,-88});
    rules[229] = new Rule(-88, new int[]{-138});
    rules[230] = new Rule(-88, new int[]{-88,8,-68,9});
    rules[231] = new Rule(-88, new int[]{8,-78,9});
    rules[232] = new Rule(-154, new int[]{-119});
    rules[233] = new Rule(-154, new int[]{-154,7,-110});
    rules[234] = new Rule(-72, new int[]{-71,88,-71});
    rules[235] = new Rule(-72, new int[]{-72,88,-71});
    rules[236] = new Rule(-71, new int[]{-119});
    rules[237] = new Rule(-71, new int[]{-119,106,-77});
    rules[238] = new Rule(-218, new int[]{128,-241});
    rules[239] = new Rule(-245, new int[]{-246});
    rules[240] = new Rule(-245, new int[]{56,-246});
    rules[241] = new Rule(-246, new int[]{-243});
    rules[242] = new Rule(-246, new int[]{-27});
    rules[243] = new Rule(-246, new int[]{-233});
    rules[244] = new Rule(-246, new int[]{-101});
    rules[245] = new Rule(-246, new int[]{-102});
    rules[246] = new Rule(-102, new int[]{65,49,-244});
    rules[247] = new Rule(-243, new int[]{18,11,-137,12,49,-242});
    rules[248] = new Rule(-243, new int[]{-236});
    rules[249] = new Rule(-236, new int[]{18,49,-242});
    rules[250] = new Rule(-137, new int[]{-237});
    rules[251] = new Rule(-137, new int[]{-137,88,-237});
    rules[252] = new Rule(-237, new int[]{-238});
    rules[253] = new Rule(-237, new int[]{});
    rules[254] = new Rule(-233, new int[]{40,49,-238});
    rules[255] = new Rule(-101, new int[]{27,49,-242});
    rules[256] = new Rule(-101, new int[]{27});
    rules[257] = new Rule(-225, new int[]{129,11,-78,12});
    rules[258] = new Rule(-196, new int[]{-194});
    rules[259] = new Rule(-194, new int[]{-193});
    rules[260] = new Rule(-193, new int[]{35,-99});
    rules[261] = new Rule(-193, new int[]{30,-99});
    rules[262] = new Rule(-193, new int[]{30,-99,5,-241});
    rules[263] = new Rule(-193, new int[]{-154,113,-244});
    rules[264] = new Rule(-193, new int[]{-262,113,-244});
    rules[265] = new Rule(-193, new int[]{8,9,113,-244});
    rules[266] = new Rule(-193, new int[]{8,-72,9,113,-244});
    rules[267] = new Rule(-193, new int[]{-154,113,8,9});
    rules[268] = new Rule(-193, new int[]{-262,113,8,9});
    rules[269] = new Rule(-193, new int[]{8,9,113,8,9});
    rules[270] = new Rule(-193, new int[]{8,-72,9,113,8,9});
    rules[271] = new Rule(-26, new int[]{-19,-254,-157,-276,-22});
    rules[272] = new Rule(-27, new int[]{39,-157,-276,-21,80});
    rules[273] = new Rule(-18, new int[]{60});
    rules[274] = new Rule(-18, new int[]{61});
    rules[275] = new Rule(-18, new int[]{132});
    rules[276] = new Rule(-18, new int[]{21});
    rules[277] = new Rule(-19, new int[]{});
    rules[278] = new Rule(-19, new int[]{-20});
    rules[279] = new Rule(-20, new int[]{-18});
    rules[280] = new Rule(-20, new int[]{-20,-18});
    rules[281] = new Rule(-254, new int[]{20});
    rules[282] = new Rule(-254, new int[]{34});
    rules[283] = new Rule(-254, new int[]{55});
    rules[284] = new Rule(-254, new int[]{55,20});
    rules[285] = new Rule(-254, new int[]{55,39});
    rules[286] = new Rule(-254, new int[]{55,34});
    rules[287] = new Rule(-22, new int[]{});
    rules[288] = new Rule(-22, new int[]{-21,80});
    rules[289] = new Rule(-157, new int[]{});
    rules[290] = new Rule(-157, new int[]{8,-156,9});
    rules[291] = new Rule(-156, new int[]{-155});
    rules[292] = new Rule(-156, new int[]{-156,88,-155});
    rules[293] = new Rule(-155, new int[]{-154});
    rules[294] = new Rule(-155, new int[]{-262});
    rules[295] = new Rule(-128, new int[]{109,-131,107});
    rules[296] = new Rule(-276, new int[]{});
    rules[297] = new Rule(-276, new int[]{-275});
    rules[298] = new Rule(-275, new int[]{-274});
    rules[299] = new Rule(-275, new int[]{-275,-274});
    rules[300] = new Rule(-274, new int[]{17,-131,5,-251,10});
    rules[301] = new Rule(-251, new int[]{-248});
    rules[302] = new Rule(-251, new int[]{-251,88,-248});
    rules[303] = new Rule(-248, new int[]{-242});
    rules[304] = new Rule(-248, new int[]{20});
    rules[305] = new Rule(-248, new int[]{39});
    rules[306] = new Rule(-248, new int[]{23});
    rules[307] = new Rule(-21, new int[]{-28});
    rules[308] = new Rule(-21, new int[]{-21,-6,-28});
    rules[309] = new Rule(-6, new int[]{73});
    rules[310] = new Rule(-6, new int[]{72});
    rules[311] = new Rule(-6, new int[]{71});
    rules[312] = new Rule(-6, new int[]{70});
    rules[313] = new Rule(-28, new int[]{});
    rules[314] = new Rule(-28, new int[]{-30,-164});
    rules[315] = new Rule(-28, new int[]{-29});
    rules[316] = new Rule(-28, new int[]{-30,10,-29});
    rules[317] = new Rule(-131, new int[]{-119});
    rules[318] = new Rule(-131, new int[]{-131,88,-119});
    rules[319] = new Rule(-164, new int[]{});
    rules[320] = new Rule(-164, new int[]{10});
    rules[321] = new Rule(-30, new int[]{-40});
    rules[322] = new Rule(-30, new int[]{-30,10,-40});
    rules[323] = new Rule(-40, new int[]{-5,-46});
    rules[324] = new Rule(-29, new int[]{-49});
    rules[325] = new Rule(-29, new int[]{-29,-49});
    rules[326] = new Rule(-49, new int[]{-48});
    rules[327] = new Rule(-49, new int[]{-50});
    rules[328] = new Rule(-46, new int[]{22,-24});
    rules[329] = new Rule(-46, new int[]{-272});
    rules[330] = new Rule(-46, new int[]{20,-272});
    rules[331] = new Rule(-272, new int[]{-271});
    rules[332] = new Rule(-272, new int[]{53,-131,5,-242});
    rules[333] = new Rule(-48, new int[]{-5,-192});
    rules[334] = new Rule(-48, new int[]{-5,-189});
    rules[335] = new Rule(-189, new int[]{-185});
    rules[336] = new Rule(-189, new int[]{-188});
    rules[337] = new Rule(-192, new int[]{20,-200});
    rules[338] = new Rule(-192, new int[]{-200});
    rules[339] = new Rule(-192, new int[]{-197});
    rules[340] = new Rule(-200, new int[]{-198});
    rules[341] = new Rule(-198, new int[]{-195});
    rules[342] = new Rule(-198, new int[]{-199});
    rules[343] = new Rule(-197, new int[]{23,-145,-99,-179});
    rules[344] = new Rule(-197, new int[]{20,23,-145,-99,-179});
    rules[345] = new Rule(-197, new int[]{24,-145,-99,-179});
    rules[346] = new Rule(-145, new int[]{-144});
    rules[347] = new Rule(-145, new int[]{});
    rules[348] = new Rule(-146, new int[]{-119});
    rules[349] = new Rule(-146, new int[]{-123});
    rules[350] = new Rule(-146, new int[]{-146,7,-119});
    rules[351] = new Rule(-146, new int[]{-146,7,-123});
    rules[352] = new Rule(-50, new int[]{-5,-227});
    rules[353] = new Rule(-227, new int[]{-228});
    rules[354] = new Rule(-227, new int[]{20,-228});
    rules[355] = new Rule(-228, new int[]{37,-146,-203,-176,10,-177});
    rules[356] = new Rule(-177, new int[]{});
    rules[357] = new Rule(-177, new int[]{54,10});
    rules[358] = new Rule(-203, new int[]{});
    rules[359] = new Rule(-203, new int[]{-208,5,-241});
    rules[360] = new Rule(-208, new int[]{});
    rules[361] = new Rule(-208, new int[]{11,-207,12});
    rules[362] = new Rule(-207, new int[]{-206});
    rules[363] = new Rule(-207, new int[]{-207,10,-206});
    rules[364] = new Rule(-206, new int[]{-131,5,-241});
    rules[365] = new Rule(-122, new int[]{-119});
    rules[366] = new Rule(-122, new int[]{});
    rules[367] = new Rule(-176, new int[]{});
    rules[368] = new Rule(-176, new int[]{74,-122,-176});
    rules[369] = new Rule(-176, new int[]{75,-122,-176});
    rules[370] = new Rule(-270, new int[]{-271,10});
    rules[371] = new Rule(-291, new int[]{97});
    rules[372] = new Rule(-291, new int[]{106});
    rules[373] = new Rule(-271, new int[]{-131,5,-242});
    rules[374] = new Rule(-271, new int[]{-131,97,-77});
    rules[375] = new Rule(-271, new int[]{-131,5,-242,-291,-76});
    rules[376] = new Rule(-271, new int[]{-131,5,-242,-291,-282});
    rules[377] = new Rule(-76, new int[]{-75});
    rules[378] = new Rule(-76, new int[]{-147});
    rules[379] = new Rule(-76, new int[]{-52});
    rules[380] = new Rule(-187, new int[]{-197,-151});
    rules[381] = new Rule(-188, new int[]{-197,-150});
    rules[382] = new Rule(-184, new int[]{-191});
    rules[383] = new Rule(-184, new int[]{20,-191});
    rules[384] = new Rule(-191, new int[]{-198,-152});
    rules[385] = new Rule(-191, new int[]{30,-143,-99,5,-241,97,-84,10});
    rules[386] = new Rule(-191, new int[]{30,-143,-99,97,-84,10});
    rules[387] = new Rule(-191, new int[]{35,-144,-99,97,-231,10});
    rules[388] = new Rule(-191, new int[]{-198,133,10});
    rules[389] = new Rule(-185, new int[]{-186});
    rules[390] = new Rule(-185, new int[]{20,-186});
    rules[391] = new Rule(-186, new int[]{-198,-150});
    rules[392] = new Rule(-186, new int[]{30,-143,-99,5,-241,-180,97,-84,10});
    rules[393] = new Rule(-186, new int[]{30,-143,-99,-180,97,-84,10});
    rules[394] = new Rule(-186, new int[]{35,-144,-99,-180,97,-231,10});
    rules[395] = new Rule(-152, new int[]{-151});
    rules[396] = new Rule(-152, new int[]{-55});
    rules[397] = new Rule(-144, new int[]{-143});
    rules[398] = new Rule(-143, new int[]{-114});
    rules[399] = new Rule(-143, new int[]{-290,7,-114});
    rules[400] = new Rule(-121, new int[]{-109});
    rules[401] = new Rule(-290, new int[]{-121});
    rules[402] = new Rule(-290, new int[]{-290,7,-121});
    rules[403] = new Rule(-114, new int[]{-109});
    rules[404] = new Rule(-114, new int[]{-165});
    rules[405] = new Rule(-109, new int[]{-106});
    rules[406] = new Rule(-109, new int[]{-106,-128});
    rules[407] = new Rule(-106, new int[]{-119});
    rules[408] = new Rule(-195, new int[]{35,-144,-99,-179,-276});
    rules[409] = new Rule(-199, new int[]{30,-143,-99,-179,-276});
    rules[410] = new Rule(-199, new int[]{30,-143,-99,5,-241,-179,-276});
    rules[411] = new Rule(-55, new int[]{95,-89,69,-89,10});
    rules[412] = new Rule(-55, new int[]{95,-89,10});
    rules[413] = new Rule(-55, new int[]{95,10});
    rules[414] = new Rule(-89, new int[]{-119});
    rules[415] = new Rule(-89, new int[]{-138});
    rules[416] = new Rule(-151, new int[]{-37,-224,10});
    rules[417] = new Rule(-150, new int[]{-39,-224,10});
    rules[418] = new Rule(-99, new int[]{});
    rules[419] = new Rule(-99, new int[]{8,9});
    rules[420] = new Rule(-99, new int[]{8,-100,9});
    rules[421] = new Rule(-100, new int[]{-51});
    rules[422] = new Rule(-100, new int[]{-100,10,-51});
    rules[423] = new Rule(-51, new int[]{-5,-259});
    rules[424] = new Rule(-259, new int[]{-132,5,-241});
    rules[425] = new Rule(-259, new int[]{44,-132,5,-241});
    rules[426] = new Rule(-259, new int[]{22,-132,5,-241});
    rules[427] = new Rule(-259, new int[]{96,-132,5,-241});
    rules[428] = new Rule(-259, new int[]{-132,5,-241,97,-78});
    rules[429] = new Rule(-259, new int[]{44,-132,5,-241,97,-78});
    rules[430] = new Rule(-259, new int[]{22,-132,5,-241,97,-78});
    rules[431] = new Rule(-132, new int[]{-107});
    rules[432] = new Rule(-132, new int[]{-132,88,-107});
    rules[433] = new Rule(-107, new int[]{-119});
    rules[434] = new Rule(-241, new int[]{-242});
    rules[435] = new Rule(-231, new int[]{-230});
    rules[436] = new Rule(-231, new int[]{-115,5,-231});
    rules[437] = new Rule(-230, new int[]{});
    rules[438] = new Rule(-230, new int[]{-3});
    rules[439] = new Rule(-230, new int[]{-182});
    rules[440] = new Rule(-230, new int[]{-104});
    rules[441] = new Rule(-230, new int[]{-224});
    rules[442] = new Rule(-230, new int[]{-126});
    rules[443] = new Rule(-230, new int[]{-31});
    rules[444] = new Rule(-230, new int[]{-216});
    rules[445] = new Rule(-230, new int[]{-277});
    rules[446] = new Rule(-230, new int[]{-97});
    rules[447] = new Rule(-230, new int[]{-278});
    rules[448] = new Rule(-230, new int[]{-133});
    rules[449] = new Rule(-230, new int[]{-263});
    rules[450] = new Rule(-230, new int[]{-217});
    rules[451] = new Rule(-230, new int[]{-96});
    rules[452] = new Rule(-230, new int[]{-273});
    rules[453] = new Rule(-230, new int[]{-53});
    rules[454] = new Rule(-230, new int[]{-142});
    rules[455] = new Rule(-230, new int[]{-105});
    rules[456] = new Rule(-230, new int[]{-98});
    rules[457] = new Rule(-98, new int[]{66,-85});
    rules[458] = new Rule(-105, new int[]{64,-77,-230});
    rules[459] = new Rule(-273, new int[]{44,-271});
    rules[460] = new Rule(-3, new int[]{-93,-168,-77});
    rules[461] = new Rule(-182, new int[]{-93});
    rules[462] = new Rule(-104, new int[]{48,-115});
    rules[463] = new Rule(-224, new int[]{79,-221,80});
    rules[464] = new Rule(-221, new int[]{-231});
    rules[465] = new Rule(-221, new int[]{-221,10,-231});
    rules[466] = new Rule(-126, new int[]{31,-77,42,-231});
    rules[467] = new Rule(-126, new int[]{31,-77,42,-231,25,-231});
    rules[468] = new Rule(-31, new int[]{19,-77,49,-32,-222,80});
    rules[469] = new Rule(-32, new int[]{-232});
    rules[470] = new Rule(-32, new int[]{-32,10,-232});
    rules[471] = new Rule(-232, new int[]{});
    rules[472] = new Rule(-232, new int[]{-67,5,-231});
    rules[473] = new Rule(-67, new int[]{-91});
    rules[474] = new Rule(-67, new int[]{-67,88,-91});
    rules[475] = new Rule(-91, new int[]{-81});
    rules[476] = new Rule(-222, new int[]{});
    rules[477] = new Rule(-222, new int[]{25,-221});
    rules[478] = new Rule(-216, new int[]{85,-221,86,-77});
    rules[479] = new Rule(-277, new int[]{45,-77,-255,-231});
    rules[480] = new Rule(-255, new int[]{87});
    rules[481] = new Rule(-255, new int[]{});
    rules[482] = new Rule(-142, new int[]{51,-77,87,-231});
    rules[483] = new Rule(-96, new int[]{29,-119,-240,123,-77,87,-231});
    rules[484] = new Rule(-96, new int[]{29,44,-119,5,-242,123,-77,87,-231});
    rules[485] = new Rule(-96, new int[]{29,44,-119,123,-77,87,-231});
    rules[486] = new Rule(-240, new int[]{5,-242});
    rules[487] = new Rule(-240, new int[]{});
    rules[488] = new Rule(-97, new int[]{28,-17,-119,-249,-77,-94,-77,-255,-231});
    rules[489] = new Rule(-17, new int[]{44});
    rules[490] = new Rule(-17, new int[]{});
    rules[491] = new Rule(-249, new int[]{97});
    rules[492] = new Rule(-249, new int[]{5,-154,97});
    rules[493] = new Rule(-94, new int[]{62});
    rules[494] = new Rule(-94, new int[]{63});
    rules[495] = new Rule(-278, new int[]{46,-64,87,-231});
    rules[496] = new Rule(-133, new int[]{33});
    rules[497] = new Rule(-263, new int[]{90,-221,-253});
    rules[498] = new Rule(-253, new int[]{89,-221,80});
    rules[499] = new Rule(-253, new int[]{26,-54,80});
    rules[500] = new Rule(-54, new int[]{-57,-223});
    rules[501] = new Rule(-54, new int[]{-57,10,-223});
    rules[502] = new Rule(-54, new int[]{-221});
    rules[503] = new Rule(-57, new int[]{-56});
    rules[504] = new Rule(-57, new int[]{-57,10,-56});
    rules[505] = new Rule(-223, new int[]{});
    rules[506] = new Rule(-223, new int[]{25,-221});
    rules[507] = new Rule(-56, new int[]{68,-58,87,-231});
    rules[508] = new Rule(-58, new int[]{-153});
    rules[509] = new Rule(-58, new int[]{-112,5,-153});
    rules[510] = new Rule(-153, new int[]{-154});
    rules[511] = new Rule(-112, new int[]{-119});
    rules[512] = new Rule(-217, new int[]{38});
    rules[513] = new Rule(-217, new int[]{38,-77});
    rules[514] = new Rule(-64, new int[]{-77});
    rules[515] = new Rule(-64, new int[]{-64,88,-77});
    rules[516] = new Rule(-53, new int[]{-148});
    rules[517] = new Rule(-148, new int[]{-147});
    rules[518] = new Rule(-77, new int[]{-85});
    rules[519] = new Rule(-77, new int[]{-95});
    rules[520] = new Rule(-77, new int[]{-281});
    rules[521] = new Rule(-85, new int[]{-84});
    rules[522] = new Rule(-85, new int[]{-210});
    rules[523] = new Rule(-226, new int[]{15,8,-247,9});
    rules[524] = new Rule(-258, new int[]{16,8,-247,9});
    rules[525] = new Rule(-210, new int[]{-85,13,-85,5,-85});
    rules[526] = new Rule(-247, new int[]{-154});
    rules[527] = new Rule(-247, new int[]{-154,-261});
    rules[528] = new Rule(-247, new int[]{-154,4,-261});
    rules[529] = new Rule(-4, new int[]{8,-60,9});
    rules[530] = new Rule(-4, new int[]{});
    rules[531] = new Rule(-147, new int[]{67,-247,-63});
    rules[532] = new Rule(-147, new int[]{67,-239,11,-61,12,-4});
    rules[533] = new Rule(-147, new int[]{67,20,8,-289,9});
    rules[534] = new Rule(-288, new int[]{-119,97,-84});
    rules[535] = new Rule(-288, new int[]{-84});
    rules[536] = new Rule(-289, new int[]{-288});
    rules[537] = new Rule(-289, new int[]{-289,88,-288});
    rules[538] = new Rule(-239, new int[]{-154});
    rules[539] = new Rule(-239, new int[]{-236});
    rules[540] = new Rule(-63, new int[]{});
    rules[541] = new Rule(-63, new int[]{8,-61,9});
    rules[542] = new Rule(-84, new int[]{-86});
    rules[543] = new Rule(-84, new int[]{-84,-170,-86});
    rules[544] = new Rule(-84, new int[]{-84,14,-86});
    rules[545] = new Rule(-95, new int[]{-86,5,-86});
    rules[546] = new Rule(-95, new int[]{-86,5,-86,5,-86});
    rules[547] = new Rule(-170, new int[]{106});
    rules[548] = new Rule(-170, new int[]{111});
    rules[549] = new Rule(-170, new int[]{109});
    rules[550] = new Rule(-170, new int[]{107});
    rules[551] = new Rule(-170, new int[]{110});
    rules[552] = new Rule(-170, new int[]{108});
    rules[553] = new Rule(-170, new int[]{123});
    rules[554] = new Rule(-86, new int[]{-74});
    rules[555] = new Rule(-86, new int[]{-86,-171,-74});
    rules[556] = new Rule(-171, new int[]{103});
    rules[557] = new Rule(-171, new int[]{102});
    rules[558] = new Rule(-171, new int[]{114});
    rules[559] = new Rule(-171, new int[]{115});
    rules[560] = new Rule(-171, new int[]{112});
    rules[561] = new Rule(-175, new int[]{122});
    rules[562] = new Rule(-175, new int[]{124});
    rules[563] = new Rule(-234, new int[]{-74,-175,-247});
    rules[564] = new Rule(-74, new int[]{-83});
    rules[565] = new Rule(-74, new int[]{-147});
    rules[566] = new Rule(-74, new int[]{-74,-172,-83});
    rules[567] = new Rule(-74, new int[]{-234});
    rules[568] = new Rule(-172, new int[]{105});
    rules[569] = new Rule(-172, new int[]{104});
    rules[570] = new Rule(-172, new int[]{117});
    rules[571] = new Rule(-172, new int[]{118});
    rules[572] = new Rule(-172, new int[]{119});
    rules[573] = new Rule(-172, new int[]{120});
    rules[574] = new Rule(-172, new int[]{116});
    rules[575] = new Rule(-52, new int[]{54,8,-247,9});
    rules[576] = new Rule(-83, new int[]{47});
    rules[577] = new Rule(-83, new int[]{-14});
    rules[578] = new Rule(-83, new int[]{-52});
    rules[579] = new Rule(-83, new int[]{11,-62,12});
    rules[580] = new Rule(-83, new int[]{121,-83});
    rules[581] = new Rule(-83, new int[]{-173,-83});
    rules[582] = new Rule(-83, new int[]{128,-83});
    rules[583] = new Rule(-83, new int[]{-93});
    rules[584] = new Rule(-14, new int[]{-138});
    rules[585] = new Rule(-14, new int[]{-15});
    rules[586] = new Rule(-93, new int[]{-103,-92});
    rules[587] = new Rule(-93, new int[]{-92});
    rules[588] = new Rule(-103, new int[]{127});
    rules[589] = new Rule(-103, new int[]{-103,127});
    rules[590] = new Rule(-8, new int[]{-154,-63});
    rules[591] = new Rule(-280, new int[]{-119});
    rules[592] = new Rule(-280, new int[]{-280,7,-110});
    rules[593] = new Rule(-279, new int[]{-280});
    rules[594] = new Rule(-279, new int[]{-280,-261});
    rules[595] = new Rule(-92, new int[]{-119});
    rules[596] = new Rule(-92, new int[]{-165});
    rules[597] = new Rule(-92, new int[]{33,-119});
    rules[598] = new Rule(-92, new int[]{8,-77,9});
    rules[599] = new Rule(-92, new int[]{-226});
    rules[600] = new Rule(-92, new int[]{-258});
    rules[601] = new Rule(-92, new int[]{-14,7,-110});
    rules[602] = new Rule(-92, new int[]{-92,-13});
    rules[603] = new Rule(-13, new int[]{11,-64,12});
    rules[604] = new Rule(-13, new int[]{8,-61,9});
    rules[605] = new Rule(-13, new int[]{7,-120});
    rules[606] = new Rule(-13, new int[]{128});
    rules[607] = new Rule(-13, new int[]{4,-261});
    rules[608] = new Rule(-61, new int[]{-64});
    rules[609] = new Rule(-61, new int[]{});
    rules[610] = new Rule(-62, new int[]{-70});
    rules[611] = new Rule(-62, new int[]{});
    rules[612] = new Rule(-70, new int[]{-79});
    rules[613] = new Rule(-70, new int[]{-70,88,-79});
    rules[614] = new Rule(-79, new int[]{-77});
    rules[615] = new Rule(-79, new int[]{-77,6,-77});
    rules[616] = new Rule(-139, new int[]{130});
    rules[617] = new Rule(-139, new int[]{131});
    rules[618] = new Rule(-138, new int[]{-140});
    rules[619] = new Rule(-140, new int[]{-139});
    rules[620] = new Rule(-140, new int[]{-140,-139});
    rules[621] = new Rule(-165, new int[]{36,-174});
    rules[622] = new Rule(-179, new int[]{10});
    rules[623] = new Rule(-179, new int[]{10,-178,10});
    rules[624] = new Rule(-180, new int[]{});
    rules[625] = new Rule(-180, new int[]{10,-178});
    rules[626] = new Rule(-178, new int[]{-181});
    rules[627] = new Rule(-178, new int[]{-178,10,-181});
    rules[628] = new Rule(-119, new int[]{129});
    rules[629] = new Rule(-119, new int[]{-124});
    rules[630] = new Rule(-119, new int[]{-125});
    rules[631] = new Rule(-110, new int[]{-119});
    rules[632] = new Rule(-110, new int[]{-256});
    rules[633] = new Rule(-110, new int[]{-257});
    rules[634] = new Rule(-120, new int[]{-119});
    rules[635] = new Rule(-120, new int[]{-256});
    rules[636] = new Rule(-120, new int[]{-165});
    rules[637] = new Rule(-181, new int[]{132});
    rules[638] = new Rule(-181, new int[]{134});
    rules[639] = new Rule(-181, new int[]{135});
    rules[640] = new Rule(-181, new int[]{136});
    rules[641] = new Rule(-181, new int[]{137});
    rules[642] = new Rule(-124, new int[]{74});
    rules[643] = new Rule(-124, new int[]{75});
    rules[644] = new Rule(-125, new int[]{69});
    rules[645] = new Rule(-125, new int[]{67});
    rules[646] = new Rule(-123, new int[]{73});
    rules[647] = new Rule(-123, new int[]{72});
    rules[648] = new Rule(-123, new int[]{71});
    rules[649] = new Rule(-123, new int[]{70});
    rules[650] = new Rule(-256, new int[]{-123});
    rules[651] = new Rule(-256, new int[]{60});
    rules[652] = new Rule(-256, new int[]{55});
    rules[653] = new Rule(-256, new int[]{114});
    rules[654] = new Rule(-256, new int[]{16});
    rules[655] = new Rule(-256, new int[]{15});
    rules[656] = new Rule(-256, new int[]{54});
    rules[657] = new Rule(-256, new int[]{17});
    rules[658] = new Rule(-256, new int[]{115});
    rules[659] = new Rule(-256, new int[]{116});
    rules[660] = new Rule(-256, new int[]{117});
    rules[661] = new Rule(-256, new int[]{118});
    rules[662] = new Rule(-256, new int[]{119});
    rules[663] = new Rule(-256, new int[]{120});
    rules[664] = new Rule(-256, new int[]{121});
    rules[665] = new Rule(-256, new int[]{122});
    rules[666] = new Rule(-256, new int[]{123});
    rules[667] = new Rule(-256, new int[]{124});
    rules[668] = new Rule(-256, new int[]{18});
    rules[669] = new Rule(-256, new int[]{65});
    rules[670] = new Rule(-256, new int[]{79});
    rules[671] = new Rule(-256, new int[]{19});
    rules[672] = new Rule(-256, new int[]{20});
    rules[673] = new Rule(-256, new int[]{22});
    rules[674] = new Rule(-256, new int[]{23});
    rules[675] = new Rule(-256, new int[]{24});
    rules[676] = new Rule(-256, new int[]{63});
    rules[677] = new Rule(-256, new int[]{87});
    rules[678] = new Rule(-256, new int[]{25});
    rules[679] = new Rule(-256, new int[]{26});
    rules[680] = new Rule(-256, new int[]{27});
    rules[681] = new Rule(-256, new int[]{21});
    rules[682] = new Rule(-256, new int[]{92});
    rules[683] = new Rule(-256, new int[]{89});
    rules[684] = new Rule(-256, new int[]{28});
    rules[685] = new Rule(-256, new int[]{29});
    rules[686] = new Rule(-256, new int[]{30});
    rules[687] = new Rule(-256, new int[]{31});
    rules[688] = new Rule(-256, new int[]{32});
    rules[689] = new Rule(-256, new int[]{33});
    rules[690] = new Rule(-256, new int[]{91});
    rules[691] = new Rule(-256, new int[]{34});
    rules[692] = new Rule(-256, new int[]{35});
    rules[693] = new Rule(-256, new int[]{37});
    rules[694] = new Rule(-256, new int[]{38});
    rules[695] = new Rule(-256, new int[]{39});
    rules[696] = new Rule(-256, new int[]{85});
    rules[697] = new Rule(-256, new int[]{40});
    rules[698] = new Rule(-256, new int[]{90});
    rules[699] = new Rule(-256, new int[]{41});
    rules[700] = new Rule(-256, new int[]{42});
    rules[701] = new Rule(-256, new int[]{62});
    rules[702] = new Rule(-256, new int[]{86});
    rules[703] = new Rule(-256, new int[]{43});
    rules[704] = new Rule(-256, new int[]{44});
    rules[705] = new Rule(-256, new int[]{45});
    rules[706] = new Rule(-256, new int[]{46});
    rules[707] = new Rule(-256, new int[]{47});
    rules[708] = new Rule(-256, new int[]{48});
    rules[709] = new Rule(-256, new int[]{49});
    rules[710] = new Rule(-256, new int[]{50});
    rules[711] = new Rule(-256, new int[]{52});
    rules[712] = new Rule(-256, new int[]{93});
    rules[713] = new Rule(-256, new int[]{94});
    rules[714] = new Rule(-256, new int[]{95});
    rules[715] = new Rule(-256, new int[]{96});
    rules[716] = new Rule(-257, new int[]{36});
    rules[717] = new Rule(-257, new int[]{80});
    rules[718] = new Rule(-174, new int[]{102});
    rules[719] = new Rule(-174, new int[]{103});
    rules[720] = new Rule(-174, new int[]{104});
    rules[721] = new Rule(-174, new int[]{105});
    rules[722] = new Rule(-174, new int[]{106});
    rules[723] = new Rule(-174, new int[]{107});
    rules[724] = new Rule(-174, new int[]{108});
    rules[725] = new Rule(-174, new int[]{109});
    rules[726] = new Rule(-174, new int[]{110});
    rules[727] = new Rule(-174, new int[]{111});
    rules[728] = new Rule(-174, new int[]{114});
    rules[729] = new Rule(-174, new int[]{115});
    rules[730] = new Rule(-174, new int[]{116});
    rules[731] = new Rule(-174, new int[]{117});
    rules[732] = new Rule(-174, new int[]{118});
    rules[733] = new Rule(-174, new int[]{119});
    rules[734] = new Rule(-174, new int[]{120});
    rules[735] = new Rule(-174, new int[]{121});
    rules[736] = new Rule(-174, new int[]{123});
    rules[737] = new Rule(-174, new int[]{125});
    rules[738] = new Rule(-174, new int[]{126});
    rules[739] = new Rule(-174, new int[]{-168});
    rules[740] = new Rule(-168, new int[]{97});
    rules[741] = new Rule(-168, new int[]{98});
    rules[742] = new Rule(-168, new int[]{99});
    rules[743] = new Rule(-168, new int[]{100});
    rules[744] = new Rule(-168, new int[]{101});
    rules[745] = new Rule(-281, new int[]{-119,113,-286});
    rules[746] = new Rule(-281, new int[]{8,9,-283,113,-286});
    rules[747] = new Rule(-281, new int[]{8,-119,5,-241,9,-283,113,-286});
    rules[748] = new Rule(-281, new int[]{8,-119,10,-284,9,-283,113,-286});
    rules[749] = new Rule(-281, new int[]{8,-119,5,-241,10,-284,9,-283,113,-286});
    rules[750] = new Rule(-281, new int[]{8,-119,88,-285,9,-283,113,-286});
    rules[751] = new Rule(-281, new int[]{8,-119,88,-285,10,-284,9,-283,113,-286});
    rules[752] = new Rule(-281, new int[]{-282});
    rules[753] = new Rule(-282, new int[]{30,-283,113,-286});
    rules[754] = new Rule(-282, new int[]{30,8,9,-283,113,-286});
    rules[755] = new Rule(-282, new int[]{30,8,-284,9,-283,113,-286});
    rules[756] = new Rule(-282, new int[]{35,113,-287});
    rules[757] = new Rule(-282, new int[]{35,8,9,113,-287});
    rules[758] = new Rule(-282, new int[]{35,8,-284,9,113,-287});
    rules[759] = new Rule(-284, new int[]{-285});
    rules[760] = new Rule(-284, new int[]{-284,10,-285});
    rules[761] = new Rule(-285, new int[]{-131,-283});
    rules[762] = new Rule(-283, new int[]{});
    rules[763] = new Rule(-283, new int[]{5,-241});
    rules[764] = new Rule(-286, new int[]{-85});
    rules[765] = new Rule(-286, new int[]{-224});
    rules[766] = new Rule(-287, new int[]{-182});
    rules[767] = new Rule(-287, new int[]{-224});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
    {
  CurrentSemanticValue = new Union();
    switch (action)
    {
      case 2: // parse_goal -> program_file
{ root = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 3: // parse_goal -> unit_file
{ root = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 4: // parse_goal -> parts
{ root = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 5: // parts -> tkParseModeExpression, expr
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 6: // parts -> tkParseModeType, variable_as_type
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 7: // parts -> tkParseModeStatement, stmt_or_expression
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 8: // stmt_or_expression -> expr
{ CurrentSemanticValue.stn = new expression_as_statement(ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);}
        break;
      case 9: // stmt_or_expression -> assignment
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 10: // stmt_or_expression -> var_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 11: // optional_head_compiler_directives -> /* empty */
{ CurrentSemanticValue.ob = null; }
        break;
      case 12: // optional_head_compiler_directives -> head_compiler_directives
{ CurrentSemanticValue.ob = null; }
        break;
      case 13: // head_compiler_directives -> one_compiler_directive
{ CurrentSemanticValue.ob = null; }
        break;
      case 14: // head_compiler_directives -> head_compiler_directives, one_compiler_directive
{ CurrentSemanticValue.ob = null; }
        break;
      case 15: // one_compiler_directive -> tkDirectiveName, tkIdentifier
{
			parsertools.AddErrorFromResource("UNSUPPORTED_OLD_DIRECTIVES",CurrentLocationSpan);
			CurrentSemanticValue.ob = null;
        }
        break;
      case 16: // one_compiler_directive -> tkDirectiveName, tkStringLiteral
{
			parsertools.AddErrorFromResource("UNSUPPORTED_OLD_DIRECTIVES",CurrentLocationSpan);
			CurrentSemanticValue.ob = null;
        }
        break;
      case 17: // program_file -> program_header, optional_head_compiler_directives, uses_clause, 
               //                 program_block, optional_tk_point
{ 
			CurrentSemanticValue.stn = NewProgramModule(ValueStack[ValueStack.Depth-5].stn as program_name, ValueStack[ValueStack.Depth-4].ob, ValueStack[ValueStack.Depth-3].stn as uses_list, ValueStack[ValueStack.Depth-2].stn, ValueStack[ValueStack.Depth-1].ob, CurrentLocationSpan);
        }
        break;
      case 18: // optional_tk_point -> tkPoint
{ CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 19: // optional_tk_point -> tkSemiColon
{ CurrentSemanticValue.ob = null; }
        break;
      case 20: // optional_tk_point -> tkColon
{ CurrentSemanticValue.ob = null; }
        break;
      case 21: // optional_tk_point -> tkComma
{ CurrentSemanticValue.ob = null; }
        break;
      case 22: // optional_tk_point -> tkDotDot
{ CurrentSemanticValue.ob = null; }
        break;
      case 24: // program_header -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 25: // program_header -> tkProgram, identifier, program_heading_2
{ CurrentSemanticValue.stn = new program_name(ValueStack[ValueStack.Depth-2].id,CurrentLocationSpan); }
        break;
      case 26: // program_heading_2 -> tkSemiColon
{ CurrentSemanticValue.ob = null; }
        break;
      case 27: // program_heading_2 -> tkRoundOpen, program_param_list, tkRoundClose, tkSemiColon
{ CurrentSemanticValue.ob = null; }
        break;
      case 28: // program_param_list -> program_param
{ CurrentSemanticValue.ob = null; }
        break;
      case 29: // program_param_list -> program_param_list, tkComma, program_param
{ CurrentSemanticValue.ob = null; }
        break;
      case 30: // program_param -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 31: // program_block -> program_decl_sect_list, compound_stmt
{ 
			CurrentSemanticValue.stn = new block(ValueStack[ValueStack.Depth-2].stn as declarations, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
        }
        break;
      case 32: // program_decl_sect_list -> decl_sect_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 33: // ident_or_keyword_pointseparator_list -> identifier_or_keyword
{ 
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 34: // ident_or_keyword_pointseparator_list -> ident_or_keyword_pointseparator_list, 
               //                                         tkPoint, identifier_or_keyword
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 35: // uses_clause -> /* empty */
{ 
			CurrentSemanticValue.stn = null; 
		}
        break;
      case 36: // uses_clause -> tkUses, used_units_list, tkSemiColon
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 37: // used_units_list -> used_unit_name
{ 
		  CurrentSemanticValue.stn = new uses_list(ValueStack[ValueStack.Depth-1].stn as unit_or_namespace,CurrentLocationSpan);
        }
        break;
      case 38: // used_units_list -> used_units_list, tkComma, used_unit_name
{ 
		  CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as uses_list).Add(ValueStack[ValueStack.Depth-1].stn as unit_or_namespace, CurrentLocationSpan);
        }
        break;
      case 39: // used_unit_name -> ident_or_keyword_pointseparator_list
{ 
			CurrentSemanticValue.stn = new unit_or_namespace(ValueStack[ValueStack.Depth-1].stn as ident_list,CurrentLocationSpan); 
		}
        break;
      case 40: // used_unit_name -> ident_or_keyword_pointseparator_list, tkIn, tkStringLiteral
{ 
			CurrentSemanticValue.stn = new uses_unit_in(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].stn as string_const, CurrentLocationSpan);
        }
        break;
      case 41: // unit_file -> attribute_declarations, unit_header, interface_part, 
               //              implementation_part, initialization_part, tkPoint
{ 
			CurrentSemanticValue.stn = new unit_module(ValueStack[ValueStack.Depth-5].stn as unit_name, ValueStack[ValueStack.Depth-4].stn as interface_node, ValueStack[ValueStack.Depth-3].stn as implementation_node, (ValueStack[ValueStack.Depth-2].stn as initfinal_part).initialization_sect, (ValueStack[ValueStack.Depth-2].stn as initfinal_part).finalization_sect, ValueStack[ValueStack.Depth-6].stn as attribute_list, CurrentLocationSpan);                    
		}
        break;
      case 42: // unit_file -> attribute_declarations, unit_header, abc_interface_part, 
               //              initialization_part, tkPoint
{ 
			CurrentSemanticValue.stn = new unit_module(ValueStack[ValueStack.Depth-4].stn as unit_name, ValueStack[ValueStack.Depth-3].stn as interface_node, null, (ValueStack[ValueStack.Depth-2].stn as initfinal_part).initialization_sect, (ValueStack[ValueStack.Depth-2].stn as initfinal_part).finalization_sect, ValueStack[ValueStack.Depth-5].stn as attribute_list, CurrentLocationSpan);
        }
        break;
      case 43: // unit_header -> unit_key_word, unit_name, tkSemiColon, 
               //                optional_head_compiler_directives
{ 
			CurrentSemanticValue.stn = NewUnitHeading(new ident(ValueStack[ValueStack.Depth-4].ti.text, LocationStack[LocationStack.Depth-4]), ValueStack[ValueStack.Depth-3].id, CurrentLocationSpan); 
		}
        break;
      case 44: // unit_key_word -> tkUnit
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 45: // unit_key_word -> tkLibrary
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 46: // unit_name -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 47: // interface_part -> tkInterface, uses_clause, interface_decl_sect_list
{ 
			CurrentSemanticValue.stn = new interface_node(ValueStack[ValueStack.Depth-1].stn as declarations, ValueStack[ValueStack.Depth-2].stn as uses_list, null, LexLocation.MergeAll(LocationStack[LocationStack.Depth-3],LocationStack[LocationStack.Depth-2],LocationStack[LocationStack.Depth-1])); 
        }
        break;
      case 48: // implementation_part -> tkImplementation, uses_clause, decl_sect_list
{ 
			CurrentSemanticValue.stn = new implementation_node(ValueStack[ValueStack.Depth-2].stn as uses_list, ValueStack[ValueStack.Depth-1].stn as declarations, null, LexLocation.MergeAll(LocationStack[LocationStack.Depth-3],LocationStack[LocationStack.Depth-2],LocationStack[LocationStack.Depth-1])); 
        }
        break;
      case 49: // abc_interface_part -> uses_clause, decl_sect_list
{ 
			CurrentSemanticValue.stn = new interface_node(ValueStack[ValueStack.Depth-1].stn as declarations, ValueStack[ValueStack.Depth-2].stn as uses_list, null, null); 
        }
        break;
      case 50: // initialization_part -> tkEnd
{ 
			CurrentSemanticValue.stn = new initfinal_part(); 
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 51: // initialization_part -> tkInitialization, stmt_list, tkEnd
{ 
		  CurrentSemanticValue.stn = new initfinal_part(ValueStack[ValueStack.Depth-3].ti, ValueStack[ValueStack.Depth-2].stn as statement_list, ValueStack[ValueStack.Depth-1].ti, null, null, CurrentLocationSpan);
        }
        break;
      case 52: // initialization_part -> tkInitialization, stmt_list, tkFinalization, stmt_list, 
               //                        tkEnd
{ 
		  CurrentSemanticValue.stn = new initfinal_part(ValueStack[ValueStack.Depth-5].ti, ValueStack[ValueStack.Depth-4].stn as statement_list, ValueStack[ValueStack.Depth-3].ti, ValueStack[ValueStack.Depth-2].stn as statement_list, ValueStack[ValueStack.Depth-1].ti, CurrentLocationSpan);
        }
        break;
      case 53: // initialization_part -> tkBegin, stmt_list, tkEnd
{ 
		  CurrentSemanticValue.stn = new initfinal_part(ValueStack[ValueStack.Depth-3].ti, ValueStack[ValueStack.Depth-2].stn as statement_list, ValueStack[ValueStack.Depth-1].ti, null, null, CurrentLocationSpan);
        }
        break;
      case 54: // interface_decl_sect_list -> int_decl_sect_list1
{
			if ((ValueStack[ValueStack.Depth-1].stn as declarations).defs.Count > 0) 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
			else 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 55: // int_decl_sect_list1 -> /* empty */
{ 
			CurrentSemanticValue.stn = new declarations();  
			if (GlobalDecls==null) 
				GlobalDecls = CurrentSemanticValue.stn as declarations;
		}
        break;
      case 56: // int_decl_sect_list1 -> int_decl_sect_list1, int_decl_sect
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as declarations).Add(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 57: // decl_sect_list -> decl_sect_list1
{
			if ((ValueStack[ValueStack.Depth-1].stn as declarations).defs.Count > 0) 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
			else 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 58: // decl_sect_list1 -> /* empty */
{ 
			CurrentSemanticValue.stn = new declarations(); 
			if (GlobalDecls==null) 
				GlobalDecls = CurrentSemanticValue.stn as declarations;
		}
        break;
      case 59: // decl_sect_list1 -> decl_sect_list1, decl_sect
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as declarations).Add(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 60: // inclass_decl_sect_list -> inclass_decl_sect_list1
{
			if ((ValueStack[ValueStack.Depth-1].stn as declarations).defs.Count > 0) 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
			else 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 61: // inclass_decl_sect_list1 -> /* empty */
{ 
        	CurrentSemanticValue.stn = new declarations(); 
        }
        break;
      case 62: // inclass_decl_sect_list1 -> inclass_decl_sect_list1, abc_decl_sect
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as declarations).Add(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 63: // int_decl_sect -> const_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 64: // int_decl_sect -> res_str_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 65: // int_decl_sect -> type_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 66: // int_decl_sect -> var_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 67: // int_decl_sect -> int_proc_header
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 68: // int_decl_sect -> int_func_header
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 69: // decl_sect -> label_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 70: // decl_sect -> const_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 71: // decl_sect -> res_str_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 72: // decl_sect -> type_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 73: // decl_sect -> var_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 74: // decl_sect -> proc_func_constr_destr_decl_with_attr
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 75: // proc_func_constr_destr_decl -> proc_func_decl
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 76: // proc_func_constr_destr_decl -> constr_destr_decl
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 77: // proc_func_constr_destr_decl_with_attr -> attribute_declarations, 
               //                                          proc_func_constr_destr_decl
{
		    (ValueStack[ValueStack.Depth-1].stn as procedure_definition).AssignAttrList(ValueStack[ValueStack.Depth-2].stn as attribute_list);
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 78: // abc_decl_sect -> label_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 79: // abc_decl_sect -> const_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 80: // abc_decl_sect -> res_str_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 81: // abc_decl_sect -> type_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 82: // abc_decl_sect -> var_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 83: // int_proc_header -> attribute_declarations, proc_header
{  
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
			(CurrentSemanticValue.td as procedure_header).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
        }
        break;
      case 84: // int_proc_header -> attribute_declarations, proc_header, tkForward, tkSemiColon
{  
			CurrentSemanticValue.td = NewProcedureHeader(ValueStack[ValueStack.Depth-4].stn as attribute_list, ValueStack[ValueStack.Depth-3].td as procedure_header, ValueStack[ValueStack.Depth-2].id as procedure_attribute, CurrentLocationSpan);
		}
        break;
      case 85: // int_func_header -> attribute_declarations, func_header
{  
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
			(CurrentSemanticValue.td as procedure_header).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
        }
        break;
      case 86: // int_func_header -> attribute_declarations, func_header, tkForward, tkSemiColon
{  
			CurrentSemanticValue.td = NewProcedureHeader(ValueStack[ValueStack.Depth-4].stn as attribute_list, ValueStack[ValueStack.Depth-3].td as procedure_header, ValueStack[ValueStack.Depth-2].id as procedure_attribute, CurrentLocationSpan);
		}
        break;
      case 87: // label_decl_sect -> tkLabel, label_list, tkSemiColon
{ 
			CurrentSemanticValue.stn = new label_definitions(ValueStack[ValueStack.Depth-2].stn as ident_list, CurrentLocationSpan); 
		}
        break;
      case 88: // label_list -> label_name
{ 
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 89: // label_list -> label_list, tkComma, label_name
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 90: // label_name -> tkInteger
{ 
			CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].ex.ToString(), CurrentLocationSpan);
		}
        break;
      case 91: // label_name -> tkFloat
{ 
			CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].ex.ToString(), CurrentLocationSpan);  
		}
        break;
      case 92: // label_name -> identifier
{ 
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 93: // const_decl_sect -> tkConst, const_decl
{ 
			CurrentSemanticValue.stn = new consts_definitions_list(ValueStack[ValueStack.Depth-1].stn as const_definition, CurrentLocationSpan);
		}
        break;
      case 94: // const_decl_sect -> const_decl_sect, const_decl
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as consts_definitions_list).Add(ValueStack[ValueStack.Depth-1].stn as const_definition, CurrentLocationSpan);
		}
        break;
      case 95: // res_str_decl_sect -> tkResourceString, const_decl
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 96: // res_str_decl_sect -> res_str_decl_sect, const_decl
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; 
		}
        break;
      case 97: // type_decl_sect -> tkType, type_decl
{ 
            CurrentSemanticValue.stn = new type_declarations(ValueStack[ValueStack.Depth-1].stn as type_declaration, CurrentLocationSpan);
		}
        break;
      case 98: // type_decl_sect -> type_decl_sect, type_decl
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as type_declarations).Add(ValueStack[ValueStack.Depth-1].stn as type_declaration, CurrentLocationSpan);
		}
        break;
      case 99: // var_decl_sect -> tkVar, var_decl
{ 
			CurrentSemanticValue.stn = new variable_definitions(ValueStack[ValueStack.Depth-1].stn as var_def_statement, CurrentLocationSpan);
		}
        break;
      case 100: // var_decl_sect -> tkEvent, var_decl
{ 
			CurrentSemanticValue.stn = new variable_definitions(ValueStack[ValueStack.Depth-1].stn as var_def_statement, CurrentLocationSpan);                        
			(ValueStack[ValueStack.Depth-1].stn as var_def_statement).is_event = true;
        }
        break;
      case 101: // var_decl_sect -> var_decl_sect, var_decl
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as variable_definitions).Add(ValueStack[ValueStack.Depth-1].stn as var_def_statement, CurrentLocationSpan);
		}
        break;
      case 102: // const_decl -> only_const_decl, tkSemiColon
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 103: // only_const_decl -> const_name, tkEqual, init_const_expr
{ 
			CurrentSemanticValue.stn = new simple_const_definition(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 104: // only_const_decl -> const_name, tkColon, type_ref, tkEqual, typed_const
{ 
			CurrentSemanticValue.stn = new typed_const_definition(ValueStack[ValueStack.Depth-5].id, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-3].td, CurrentLocationSpan);
		}
        break;
      case 105: // init_const_expr -> const_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 106: // init_const_expr -> array_const
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 107: // const_name -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 108: // const_expr -> const_simple_expr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 109: // const_expr -> identifier, tkArrow, lambda_function_body
{  
			var idList = new ident_list(ValueStack[ValueStack.Depth-3].id, LocationStack[LocationStack.Depth-3]); 
			var formalPars = new formal_parameters(new typed_parameters(idList, new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null), parametr_kind.none, null, LocationStack[LocationStack.Depth-3]), LocationStack[LocationStack.Depth-3]);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null), ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 110: // const_expr -> tkRoundOpen, tkRoundClose, lambda_type_ref, tkArrow, 
                //               lambda_function_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 111: // const_expr -> tkRoundOpen, typed_const_list, tkRoundClose, tkArrow, 
                //               lambda_function_body
{  
		    var el = ValueStack[ValueStack.Depth-4].stn as expression_list;
		    var cnt = el.expressions.Count;
		    
			var idList = new ident_list();
			idList.source_context = LocationStack[LocationStack.Depth-4];
			
			for (int j = 0; j < cnt; j++)
			{
				if (!(el.expressions[j] is ident))
					parsertools.AddErrorFromResource("ONE_TKIDENTIFIER",el.expressions[j].source_context);
				idList.idents.Add(el.expressions[j] as ident);
			}	
				
			var any = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);	
				
			var formalPars = new formal_parameters(new typed_parameters(idList, any, parametr_kind.none, null, LocationStack[LocationStack.Depth-4]), LocationStack[LocationStack.Depth-4]);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, any, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 112: // const_expr -> const_simple_expr, const_relop, const_simple_expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 113: // const_expr -> question_constexpr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 114: // question_constexpr -> const_expr, tkQuestion, const_expr, tkColon, const_expr
{ CurrentSemanticValue.ex = new question_colon_expression(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); }
        break;
      case 115: // const_relop -> tkEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 116: // const_relop -> tkNotEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 117: // const_relop -> tkLower
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 118: // const_relop -> tkGreater
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 119: // const_relop -> tkLowerEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 120: // const_relop -> tkGreaterEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 121: // const_relop -> tkIn
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 122: // const_simple_expr -> const_term
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 123: // const_simple_expr -> const_simple_expr, const_addop, const_term
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 124: // const_addop -> tkPlus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 125: // const_addop -> tkMinus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 126: // const_addop -> tkOr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 127: // const_addop -> tkXor
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 128: // as_is_constexpr -> const_term, typecast_op, simple_or_template_type_reference
{ 
			CurrentSemanticValue.ex = NewAsIsConstexpr(ValueStack[ValueStack.Depth-3].ex, (op_typecast)ValueStack[ValueStack.Depth-2].ob, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);                                
		}
        break;
      case 129: // const_term -> const_factor
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 130: // const_term -> as_is_constexpr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 131: // const_term -> const_term, const_mulop, const_factor
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 132: // const_mulop -> tkStar
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 133: // const_mulop -> tkSlash
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 134: // const_mulop -> tkDiv
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 135: // const_mulop -> tkMod
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 136: // const_mulop -> tkShl
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 137: // const_mulop -> tkShr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 138: // const_mulop -> tkAnd
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 139: // const_factor -> const_variable
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 140: // const_factor -> const_set
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 141: // const_factor -> unsigned_number
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 142: // const_factor -> literal
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 143: // const_factor -> tkNil
{ 
			CurrentSemanticValue.ex = new nil_const();  
			CurrentSemanticValue.ex.source_context = CurrentLocationSpan;
		}
        break;
      case 144: // const_factor -> tkAddressOf, const_factor
{ 
			CurrentSemanticValue.ex = new get_address(ValueStack[ValueStack.Depth-1].ex as addressed_value, CurrentLocationSpan);  
		}
        break;
      case 145: // const_factor -> tkRoundOpen, const_expr, tkRoundClose
{ 
	 	    CurrentSemanticValue.ex = new bracket_expr(ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan); 
		}
        break;
      case 146: // const_factor -> tkNot, const_factor
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 147: // const_factor -> sign, const_factor
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 148: // const_factor -> tkDeref, const_factor
{ 
			CurrentSemanticValue.ex = new roof_dereference(ValueStack[ValueStack.Depth-1].ex as addressed_value, CurrentLocationSpan);
		}
        break;
      case 149: // const_set -> tkSquareOpen, const_elem_list, tkSquareClose
{ 
			CurrentSemanticValue.ex = new pascal_set_constant(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan); 
		}
        break;
      case 150: // sign -> tkPlus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 151: // sign -> tkMinus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 152: // const_variable -> identifier
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 153: // const_variable -> sizeof_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 154: // const_variable -> typeof_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 155: // const_variable -> const_variable, const_variable_2
{
			CurrentSemanticValue.ex = NewConstVariable(ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
        }
        break;
      case 156: // const_variable_2 -> tkPoint, identifier_or_keyword
{ 
			CurrentSemanticValue.ex = new dot_node(null, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 157: // const_variable_2 -> tkDeref
{ 
			CurrentSemanticValue.ex = new roof_dereference();  
			CurrentSemanticValue.ex.source_context = CurrentLocationSpan;
		}
        break;
      case 158: // const_variable_2 -> tkRoundOpen, optional_const_func_expr_list, tkRoundClose
{ 
			CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);  
		}
        break;
      case 159: // const_variable_2 -> tkSquareOpen, const_elem_list, tkSquareClose
{ 
			CurrentSemanticValue.ex = new indexer(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);  
		}
        break;
      case 160: // optional_const_func_expr_list -> const_func_expr_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 161: // optional_const_func_expr_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 162: // const_func_expr_list -> const_expr
{ 	
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 163: // const_func_expr_list -> const_func_expr_list, tkComma, const_expr
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 164: // const_elem_list -> const_elem_list1
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 166: // const_elem_list1 -> const_elem
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 167: // const_elem_list1 -> const_elem_list1, tkComma, const_elem
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 168: // const_elem -> const_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 169: // const_elem -> const_expr, tkDotDot, const_expr
{ 
			CurrentSemanticValue.ex = new diapason_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 170: // unsigned_number -> tkInteger
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 171: // unsigned_number -> tkHex
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 172: // unsigned_number -> tkFloat
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 173: // typed_const -> const_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 174: // typed_const -> array_const
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 175: // typed_const -> record_const
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 176: // array_const -> tkRoundOpen, typed_const_list, tkRoundClose
{ 
			CurrentSemanticValue.ex = new array_const(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan); 
		}
        break;
      case 177: // array_const -> tkRoundOpen, record_const, tkRoundClose
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex; }
        break;
      case 178: // array_const -> tkRoundOpen, array_const, tkRoundClose
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex; }
        break;
      case 180: // typed_const_list -> typed_const_list1
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 181: // typed_const_list1 -> typed_const_or_new
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
        }
        break;
      case 182: // typed_const_list1 -> typed_const_list1, tkComma, typed_const_or_new
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 183: // record_const -> tkRoundOpen, const_field_list, tkRoundClose
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex;
			CurrentSemanticValue.ex.source_context = CurrentLocationSpan;
		}
        break;
      case 184: // const_field_list -> const_field_list_1
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 185: // const_field_list -> const_field_list_1, tkSemiColon
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex; }
        break;
      case 186: // const_field_list_1 -> const_field
{ 
			CurrentSemanticValue.ex = new record_const(ValueStack[ValueStack.Depth-1].stn as record_const_definition, CurrentLocationSpan);
		}
        break;
      case 187: // const_field_list_1 -> const_field_list_1, tkSemiColon, const_field
{ 
			CurrentSemanticValue.ex = (ValueStack[ValueStack.Depth-3].ex as record_const).Add(ValueStack[ValueStack.Depth-1].stn as record_const_definition, CurrentLocationSpan);
		}
        break;
      case 188: // const_field -> const_field_name, tkColon, typed_const
{ 
			CurrentSemanticValue.stn = new record_const_definition(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 189: // const_field_name -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 190: // type_decl -> attribute_declarations, simple_type_decl
{  
			(ValueStack[ValueStack.Depth-1].stn as declaration).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
			CurrentSemanticValue.stn.source_context = LocationStack[LocationStack.Depth-1];
        }
        break;
      case 191: // attribute_declarations -> attribute_declaration
{ 
			CurrentSemanticValue.stn = new attribute_list(ValueStack[ValueStack.Depth-1].stn as simple_attribute_list, CurrentLocationSpan);
    }
        break;
      case 192: // attribute_declarations -> attribute_declarations, attribute_declaration
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as attribute_list).Add(ValueStack[ValueStack.Depth-1].stn as simple_attribute_list, CurrentLocationSpan);
		}
        break;
      case 193: // attribute_declarations -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 194: // attribute_declaration -> tkSquareOpen, one_or_some_attribute, tkSquareClose
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 195: // one_or_some_attribute -> one_attribute
{ 
			CurrentSemanticValue.stn = new simple_attribute_list(ValueStack[ValueStack.Depth-1].stn as attribute, CurrentLocationSpan);
		}
        break;
      case 196: // one_or_some_attribute -> one_or_some_attribute, tkComma, one_attribute
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as simple_attribute_list).Add(ValueStack[ValueStack.Depth-1].stn as attribute, CurrentLocationSpan);
		}
        break;
      case 197: // one_attribute -> attribute_variable
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 198: // one_attribute -> identifier, tkColon, attribute_variable
{  
			(ValueStack[ValueStack.Depth-1].stn as attribute).qualifier = ValueStack[ValueStack.Depth-3].id;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
        }
        break;
      case 199: // simple_type_decl -> type_decl_identifier, tkEqual, type_decl_type, tkSemiColon
{ 
			CurrentSemanticValue.stn = new type_declaration(ValueStack[ValueStack.Depth-4].id, ValueStack[ValueStack.Depth-2].td, CurrentLocationSpan); 
		}
        break;
      case 200: // simple_type_decl -> template_identifier_with_equal, type_decl_type, tkSemiColon
{ 
			CurrentSemanticValue.stn = new type_declaration(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-2].td, CurrentLocationSpan); 
		}
        break;
      case 201: // type_decl_identifier -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 202: // type_decl_identifier -> identifier, template_arguments
{ 
			CurrentSemanticValue.id = new template_type_name(ValueStack[ValueStack.Depth-2].id.name, ValueStack[ValueStack.Depth-1].stn as ident_list, CurrentLocationSpan); 
        }
        break;
      case 203: // template_identifier_with_equal -> identifier, tkLower, ident_list, 
                //                                   tkGreaterEqual
{ 
			CurrentSemanticValue.id = new template_type_name(ValueStack[ValueStack.Depth-4].id.name, ValueStack[ValueStack.Depth-2].stn as ident_list, CurrentLocationSpan); 
        }
        break;
      case 204: // type_decl_type -> type_ref
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 205: // type_decl_type -> tkType, type_ref
{
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
			CurrentSemanticValue.td.source_context = CurrentLocationSpan;
		}
        break;
      case 206: // type_decl_type -> object_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 207: // type_ref -> simple_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 208: // type_ref -> string_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 209: // type_ref -> pointer_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 210: // type_ref -> structured_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 211: // type_ref -> procedural_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 212: // type_ref -> template_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 213: // template_type -> simple_type_identifier, template_type_params
{ 
			CurrentSemanticValue.td = new template_type_reference(ValueStack[ValueStack.Depth-2].td as named_type_reference, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan); 
		}
        break;
      case 214: // template_type_params -> tkLower, template_param_list, tkGreater
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 215: // template_param_list -> template_param
{ 
			CurrentSemanticValue.stn = new template_param_list(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 216: // template_param_list -> template_param_list, tkComma, template_param
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as template_param_list).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 217: // template_param -> simple_type_identifier
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 218: // template_param -> template_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 219: // simple_type -> simple_type_identifier
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 220: // simple_type -> range_expr, tkDotDot, range_expr
{ 
			CurrentSemanticValue.td = new diapason(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 221: // simple_type -> tkRoundOpen, enumeration_id_list, tkRoundClose
{ 
			CurrentSemanticValue.td = new enum_type_definition(ValueStack[ValueStack.Depth-2].stn as enumerator_list, CurrentLocationSpan);  
		}
        break;
      case 222: // range_expr -> range_term
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 223: // range_expr -> range_expr, const_addop, range_term
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 224: // range_term -> range_factor
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 225: // range_term -> range_term, const_mulop, range_factor
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 226: // range_factor -> simple_type_identifier
{ 
			if((ValueStack[ValueStack.Depth-1].td as named_type_reference).names.Count>0)
				CurrentSemanticValue.ex = (ValueStack[ValueStack.Depth-1].td as named_type_reference).names[0];
			else
				CurrentSemanticValue.ex = null;
        }
        break;
      case 227: // range_factor -> unsigned_number
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 228: // range_factor -> sign, range_factor
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 229: // range_factor -> literal
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 230: // range_factor -> range_factor, tkRoundOpen, const_elem_list, tkRoundClose
{ 
			CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-4].ex as addressed_value, ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
        }
        break;
      case 231: // range_factor -> tkRoundOpen, const_expr, tkRoundClose
{ 
			if (!parsertools.build_tree_for_brackets) 
				CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex; 
			else 
               CurrentSemanticValue.ex = new bracket_expr(ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan);      
		}
        break;
      case 232: // simple_type_identifier -> identifier
{ 
			CurrentSemanticValue.td = new named_type_reference(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 233: // simple_type_identifier -> simple_type_identifier, tkPoint, 
                //                           identifier_or_keyword
{ 
			CurrentSemanticValue.td = (ValueStack[ValueStack.Depth-3].td as named_type_reference).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 234: // enumeration_id_list -> enumeration_id, tkComma, enumeration_id
{ 
			CurrentSemanticValue.stn = new enumerator_list(ValueStack[ValueStack.Depth-3].stn as enumerator, CurrentLocationSpan);
			(CurrentSemanticValue.stn as enumerator_list).Add(ValueStack[ValueStack.Depth-1].stn as enumerator, CurrentLocationSpan);
        }
        break;
      case 235: // enumeration_id_list -> enumeration_id_list, tkComma, enumeration_id
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as enumerator_list).Add(ValueStack[ValueStack.Depth-1].stn as enumerator, CurrentLocationSpan);
        }
        break;
      case 236: // enumeration_id -> identifier
{ 
			CurrentSemanticValue.stn = new enumerator(ValueStack[ValueStack.Depth-1].id, null, CurrentLocationSpan); 
		}
        break;
      case 237: // enumeration_id -> identifier, tkEqual, expr
{ 
			CurrentSemanticValue.stn = new enumerator(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 238: // pointer_type -> tkDeref, fptype
{ 
			CurrentSemanticValue.td = new ref_type(ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);
		}
        break;
      case 239: // structured_type -> unpacked_structured_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 240: // structured_type -> tkPacked, unpacked_structured_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 241: // unpacked_structured_type -> array_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 242: // unpacked_structured_type -> record_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 243: // unpacked_structured_type -> set_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 244: // unpacked_structured_type -> file_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 245: // unpacked_structured_type -> sequence_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 246: // sequence_type -> tkSequence, tkOf, template_param
{
			CurrentSemanticValue.td = new sequence_type(ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);
		}
        break;
      case 247: // array_type -> tkArray, tkSquareOpen, simple_type_list, tkSquareClose, tkOf, 
                //               type_ref
{ 
			CurrentSemanticValue.td = new array_type(ValueStack[ValueStack.Depth-4].stn as indexers_types, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
        }
        break;
      case 248: // array_type -> unsized_array_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 249: // unsized_array_type -> tkArray, tkOf, type_ref
{ 
			CurrentSemanticValue.td = new array_type(null, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
        }
        break;
      case 250: // simple_type_list -> simple_type_or_
{ 
			CurrentSemanticValue.stn = new indexers_types(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
        }
        break;
      case 251: // simple_type_list -> simple_type_list, tkComma, simple_type_or_
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as indexers_types).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
        }
        break;
      case 252: // simple_type_or_ -> simple_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 253: // simple_type_or_ -> /* empty */
{ CurrentSemanticValue.td = null; }
        break;
      case 254: // set_type -> tkSet, tkOf, simple_type
{ 
			CurrentSemanticValue.td = new set_type_definition(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
		}
        break;
      case 255: // file_type -> tkFile, tkOf, type_ref
{ 
			CurrentSemanticValue.td = new file_type(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 256: // file_type -> tkFile
{ 
			CurrentSemanticValue.td = new file_type();  
			CurrentSemanticValue.td.source_context = CurrentLocationSpan;
		}
        break;
      case 257: // string_type -> tkIdentifier, tkSquareOpen, const_expr, tkSquareClose
{ 
			CurrentSemanticValue.td = new string_num_definition(ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-4].id, CurrentLocationSpan);
		}
        break;
      case 258: // procedural_type -> procedural_type_kind
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 259: // procedural_type_kind -> proc_type_decl
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 260: // proc_type_decl -> tkProcedure, fp_list
{ 
			CurrentSemanticValue.td = new procedure_header(ValueStack[ValueStack.Depth-1].stn as formal_parameters,null,null,false,false,null,null,CurrentLocationSpan);
        }
        break;
      case 261: // proc_type_decl -> tkFunction, fp_list
{
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-1].stn as formal_parameters, null, null, null, null, CurrentLocationSpan);
		}
        break;
      case 262: // proc_type_decl -> tkFunction, fp_list, tkColon, fptype
{ 
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-3].stn as formal_parameters, null, null, null, ValueStack[ValueStack.Depth-1].td as type_definition, CurrentLocationSpan);
        }
        break;
      case 263: // proc_type_decl -> simple_type_identifier, tkArrow, template_param
{
    		CurrentSemanticValue.td = new modern_proc_type(ValueStack[ValueStack.Depth-3].td,null,ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);            
    	}
        break;
      case 264: // proc_type_decl -> template_type, tkArrow, template_param
{
    		CurrentSemanticValue.td = new modern_proc_type(ValueStack[ValueStack.Depth-3].td,null,ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);            
    	}
        break;
      case 265: // proc_type_decl -> tkRoundOpen, tkRoundClose, tkArrow, template_param
{
    		CurrentSemanticValue.td = new modern_proc_type(null,null,ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);
    	}
        break;
      case 266: // proc_type_decl -> tkRoundOpen, enumeration_id_list, tkRoundClose, tkArrow, 
                //                   template_param
{
    		CurrentSemanticValue.td = new modern_proc_type(null,ValueStack[ValueStack.Depth-4].stn as enumerator_list,ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);
    	}
        break;
      case 267: // proc_type_decl -> simple_type_identifier, tkArrow, tkRoundOpen, tkRoundClose
{
    		CurrentSemanticValue.td = new modern_proc_type(ValueStack[ValueStack.Depth-4].td,null,null,CurrentLocationSpan);
    	}
        break;
      case 268: // proc_type_decl -> template_type, tkArrow, tkRoundOpen, tkRoundClose
{
    		CurrentSemanticValue.td = new modern_proc_type(ValueStack[ValueStack.Depth-4].td,null,null,CurrentLocationSpan);
    	}
        break;
      case 269: // proc_type_decl -> tkRoundOpen, tkRoundClose, tkArrow, tkRoundOpen, tkRoundClose
{
    		CurrentSemanticValue.td = new modern_proc_type(null,null,null,CurrentLocationSpan);
    	}
        break;
      case 270: // proc_type_decl -> tkRoundOpen, enumeration_id_list, tkRoundClose, tkArrow, 
                //                   tkRoundOpen, tkRoundClose
{
    		CurrentSemanticValue.td = new modern_proc_type(null,ValueStack[ValueStack.Depth-5].stn as enumerator_list,null,CurrentLocationSpan);
    	}
        break;
      case 271: // object_type -> class_attributes, class_or_interface_keyword, 
                //                optional_base_classes, optional_where_section, 
                //                optional_component_list_seq_end
{ 
			CurrentSemanticValue.td = NewObjectType((class_attribute)ValueStack[ValueStack.Depth-5].ob, ValueStack[ValueStack.Depth-4].ti, ValueStack[ValueStack.Depth-3].stn as named_type_reference_list, ValueStack[ValueStack.Depth-2].stn as where_definition_list, ValueStack[ValueStack.Depth-1].stn as class_body, CurrentLocationSpan);
		}
        break;
      case 272: // record_type -> tkRecord, optional_base_classes, optional_where_section, 
                //                member_list_section, tkEnd
{ 
			CurrentSemanticValue.td = NewRecordType(ValueStack[ValueStack.Depth-4].stn as named_type_reference_list, ValueStack[ValueStack.Depth-3].stn as where_definition_list, ValueStack[ValueStack.Depth-2].stn as class_body, CurrentLocationSpan);
		}
        break;
      case 273: // class_attribute -> tkSealed
{ CurrentSemanticValue.ob = class_attribute.Sealed; }
        break;
      case 274: // class_attribute -> tkPartial
{ CurrentSemanticValue.ob = class_attribute.Partial; }
        break;
      case 275: // class_attribute -> tkAbstract
{ CurrentSemanticValue.ob = class_attribute.Abstract; }
        break;
      case 276: // class_attribute -> tkAuto
{ CurrentSemanticValue.ob = class_attribute.Auto; }
        break;
      case 277: // class_attributes -> /* empty */
{ 
			CurrentSemanticValue.ob = class_attribute.None; 
		}
        break;
      case 278: // class_attributes -> class_attributes1
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ob;
		}
        break;
      case 279: // class_attributes1 -> class_attribute
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ob;
		}
        break;
      case 280: // class_attributes1 -> class_attributes1, class_attribute
{
			ValueStack[ValueStack.Depth-2].ob = ((class_attribute)ValueStack[ValueStack.Depth-2].ob) | ((class_attribute)ValueStack[ValueStack.Depth-1].ob);
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-2].ob;
		}
        break;
      case 281: // class_or_interface_keyword -> tkClass
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 282: // class_or_interface_keyword -> tkInterface
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 283: // class_or_interface_keyword -> tkTemplate
{ 
			CurrentSemanticValue.ti = NewClassOrInterfaceKeyword(ValueStack[ValueStack.Depth-1].ti);
		}
        break;
      case 284: // class_or_interface_keyword -> tkTemplate, tkClass
{ 
			CurrentSemanticValue.ti = NewClassOrInterfaceKeyword(ValueStack[ValueStack.Depth-2].ti, "c", CurrentLocationSpan);
		}
        break;
      case 285: // class_or_interface_keyword -> tkTemplate, tkRecord
{ 
			CurrentSemanticValue.ti = NewClassOrInterfaceKeyword(ValueStack[ValueStack.Depth-2].ti, "r", CurrentLocationSpan);
		}
        break;
      case 286: // class_or_interface_keyword -> tkTemplate, tkInterface
{ 
			CurrentSemanticValue.ti = NewClassOrInterfaceKeyword(ValueStack[ValueStack.Depth-2].ti, "i", CurrentLocationSpan);
		}
        break;
      case 287: // optional_component_list_seq_end -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 288: // optional_component_list_seq_end -> member_list_section, tkEnd
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 290: // optional_base_classes -> tkRoundOpen, base_classes_names_list, tkRoundClose
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 291: // base_classes_names_list -> base_class_name
{ 
			CurrentSemanticValue.stn = new named_type_reference_list(ValueStack[ValueStack.Depth-1].stn as named_type_reference, CurrentLocationSpan);
		}
        break;
      case 292: // base_classes_names_list -> base_classes_names_list, tkComma, base_class_name
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as named_type_reference_list).Add(ValueStack[ValueStack.Depth-1].stn as named_type_reference, CurrentLocationSpan);
		}
        break;
      case 293: // base_class_name -> simple_type_identifier
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 294: // base_class_name -> template_type
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 295: // template_arguments -> tkLower, ident_list, tkGreater
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 296: // optional_where_section -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 297: // optional_where_section -> where_part_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 298: // where_part_list -> where_part
{ 
			CurrentSemanticValue.stn = new where_definition_list(ValueStack[ValueStack.Depth-1].stn as where_definition, CurrentLocationSpan);
		}
        break;
      case 299: // where_part_list -> where_part_list, where_part
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as where_definition_list).Add(ValueStack[ValueStack.Depth-1].stn as where_definition, CurrentLocationSpan);
		}
        break;
      case 300: // where_part -> tkWhere, ident_list, tkColon, type_ref_and_secific_list, 
                //               tkSemiColon
{ 
			CurrentSemanticValue.stn = new where_definition(ValueStack[ValueStack.Depth-4].stn as ident_list, ValueStack[ValueStack.Depth-2].stn as type_definition_list, CurrentLocationSpan); 
		}
        break;
      case 301: // type_ref_and_secific_list -> type_ref_or_secific
{ 
			CurrentSemanticValue.stn = new type_definition_list(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 302: // type_ref_and_secific_list -> type_ref_and_secific_list, tkComma, 
                //                              type_ref_or_secific
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as type_definition_list).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 303: // type_ref_or_secific -> type_ref
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 304: // type_ref_or_secific -> tkClass
{ 
			CurrentSemanticValue.td = new declaration_specificator(DeclarationSpecificator.WhereDefClass, ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); 
		}
        break;
      case 305: // type_ref_or_secific -> tkRecord
{ 
			CurrentSemanticValue.td = new declaration_specificator(DeclarationSpecificator.WhereDefValueType, ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); 
		}
        break;
      case 306: // type_ref_or_secific -> tkConstructor
{ 
			CurrentSemanticValue.td = new declaration_specificator(DeclarationSpecificator.WhereDefConstructor, ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); 
		}
        break;
      case 307: // member_list_section -> member_list
{ 
			CurrentSemanticValue.stn = new class_body(ValueStack[ValueStack.Depth-1].stn as class_members, CurrentLocationSpan);
        }
        break;
      case 308: // member_list_section -> member_list_section, ot_visibility_specifier, 
                //                        member_list
{ 
		    (ValueStack[ValueStack.Depth-1].stn as class_members).access_mod = ValueStack[ValueStack.Depth-2].stn as access_modifer_node;
			(ValueStack[ValueStack.Depth-3].stn as class_body).Add(ValueStack[ValueStack.Depth-1].stn as class_members,CurrentLocationSpan);
			
			if ((ValueStack[ValueStack.Depth-3].stn as class_body).class_def_blocks[0].members.Count == 0)
                (ValueStack[ValueStack.Depth-3].stn as class_body).class_def_blocks.RemoveAt(0);
			
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-3].stn;
        }
        break;
      case 309: // ot_visibility_specifier -> tkInternal
{ CurrentSemanticValue.stn = new access_modifer_node(access_modifer.internal_modifer, CurrentLocationSpan); }
        break;
      case 310: // ot_visibility_specifier -> tkPublic
{ CurrentSemanticValue.stn = new access_modifer_node(access_modifer.public_modifer, CurrentLocationSpan); }
        break;
      case 311: // ot_visibility_specifier -> tkProtected
{ CurrentSemanticValue.stn = new access_modifer_node(access_modifer.protected_modifer, CurrentLocationSpan); }
        break;
      case 312: // ot_visibility_specifier -> tkPrivate
{ CurrentSemanticValue.stn = new access_modifer_node(access_modifer.private_modifer, CurrentLocationSpan); }
        break;
      case 313: // member_list -> /* empty */
{ CurrentSemanticValue.stn = new class_members(); }
        break;
      case 314: // member_list -> field_or_const_definition_list, optional_semicolon
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 315: // member_list -> method_decl_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 316: // member_list -> field_or_const_definition_list, tkSemiColon, method_decl_list
{  
			(ValueStack[ValueStack.Depth-3].stn as class_members).members.AddRange((ValueStack[ValueStack.Depth-1].stn as class_members).members);
			(ValueStack[ValueStack.Depth-3].stn as class_members).source_context = CurrentLocationSpan;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-3].stn;
        }
        break;
      case 317: // ident_list -> identifier
{ 
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 318: // ident_list -> ident_list, tkComma, identifier
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 319: // optional_semicolon -> /* empty */
{ CurrentSemanticValue.ob = null; }
        break;
      case 320: // optional_semicolon -> tkSemiColon
{ CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 321: // field_or_const_definition_list -> field_or_const_definition
{ 
			CurrentSemanticValue.stn = new class_members(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 322: // field_or_const_definition_list -> field_or_const_definition_list, tkSemiColon, 
                //                                   field_or_const_definition
{   
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as class_members).Add(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 323: // field_or_const_definition -> attribute_declarations, 
                //                              simple_field_or_const_definition
{  
		    (ValueStack[ValueStack.Depth-1].stn as declaration).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
        }
        break;
      case 324: // method_decl_list -> method_or_property_decl
{ 
			CurrentSemanticValue.stn = new class_members(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 325: // method_decl_list -> method_decl_list, method_or_property_decl
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as class_members).Add(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 326: // method_or_property_decl -> method_decl_withattr
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 327: // method_or_property_decl -> property_definition
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 328: // simple_field_or_const_definition -> tkConst, only_const_decl
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 329: // simple_field_or_const_definition -> field_definition
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 330: // simple_field_or_const_definition -> tkClass, field_definition
{ 
			(ValueStack[ValueStack.Depth-1].stn as var_def_statement).var_attr = definition_attribute.Static;
			(ValueStack[ValueStack.Depth-1].stn as var_def_statement).source_context = CurrentLocationSpan;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
        }
        break;
      case 331: // field_definition -> var_decl_part
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 332: // field_definition -> tkEvent, ident_list, tkColon, type_ref
{ 
			CurrentSemanticValue.stn = new var_def_statement(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, null, definition_attribute.None, true, CurrentLocationSpan); 
        }
        break;
      case 333: // method_decl_withattr -> attribute_declarations, method_header
{  
			(ValueStack[ValueStack.Depth-1].td as declaration).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].td;
        }
        break;
      case 334: // method_decl_withattr -> attribute_declarations, method_decl
{  
			(ValueStack[ValueStack.Depth-1].stn as declaration).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
     }
        break;
      case 335: // method_decl -> inclass_proc_func_decl
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 336: // method_decl -> inclass_constr_destr_decl
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 337: // method_header -> tkClass, method_procfunc_header
{ 
			(ValueStack[ValueStack.Depth-1].td as procedure_header).class_keyword = true;
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
		}
        break;
      case 338: // method_header -> method_procfunc_header
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 339: // method_header -> constr_destr_header
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 340: // method_procfunc_header -> proc_func_header
{ 
			CurrentSemanticValue.td = NewProcfuncHeading(ValueStack[ValueStack.Depth-1].td as procedure_header);
		}
        break;
      case 341: // proc_func_header -> proc_header
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 342: // proc_func_header -> func_header
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 343: // constr_destr_header -> tkConstructor, optional_proc_name, fp_list, 
                //                        optional_method_modificators
{ 
			CurrentSemanticValue.td = new constructor(null,ValueStack[ValueStack.Depth-2].stn as formal_parameters,ValueStack[ValueStack.Depth-1].stn as procedure_attributes_list,ValueStack[ValueStack.Depth-3].stn as method_name,false,false,null,null,CurrentLocationSpan);
        }
        break;
      case 344: // constr_destr_header -> tkClass, tkConstructor, optional_proc_name, fp_list, 
                //                        optional_method_modificators
{ 
			CurrentSemanticValue.td = new constructor(null,ValueStack[ValueStack.Depth-2].stn as formal_parameters,ValueStack[ValueStack.Depth-1].stn as procedure_attributes_list,ValueStack[ValueStack.Depth-3].stn as method_name,false,true,null,null,CurrentLocationSpan);
        }
        break;
      case 345: // constr_destr_header -> tkDestructor, optional_proc_name, fp_list, 
                //                        optional_method_modificators
{ 
			CurrentSemanticValue.td = new destructor(null,ValueStack[ValueStack.Depth-2].stn as formal_parameters,ValueStack[ValueStack.Depth-1].stn as procedure_attributes_list,ValueStack[ValueStack.Depth-3].stn as method_name, false,false,null,null,CurrentLocationSpan);
        }
        break;
      case 346: // optional_proc_name -> proc_name
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 347: // optional_proc_name -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 348: // qualified_identifier -> identifier
{ CurrentSemanticValue.stn = new method_name(null,null,ValueStack[ValueStack.Depth-1].id,null,CurrentLocationSpan); }
        break;
      case 349: // qualified_identifier -> visibility_specifier
{ CurrentSemanticValue.stn = new method_name(null,null,ValueStack[ValueStack.Depth-1].id,null,CurrentLocationSpan); }
        break;
      case 350: // qualified_identifier -> qualified_identifier, tkPoint, identifier
{
			CurrentSemanticValue.stn = NewQualifiedIdentifier(ValueStack[ValueStack.Depth-3].stn as method_name, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
        }
        break;
      case 351: // qualified_identifier -> qualified_identifier, tkPoint, visibility_specifier
{
			CurrentSemanticValue.stn = NewQualifiedIdentifier(ValueStack[ValueStack.Depth-3].stn as method_name, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
        }
        break;
      case 352: // property_definition -> attribute_declarations, simple_prim_property_definition
{  
			CurrentSemanticValue.stn = NewPropertyDefinition(ValueStack[ValueStack.Depth-2].stn as attribute_list, ValueStack[ValueStack.Depth-1].stn as declaration, LocationStack[LocationStack.Depth-1]);
        }
        break;
      case 353: // simple_prim_property_definition -> simple_property_definition
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 354: // simple_prim_property_definition -> tkClass, simple_property_definition
{ 
			CurrentSemanticValue.stn = NewSimplePrimPropertyDefinition(ValueStack[ValueStack.Depth-1].stn as simple_property, CurrentLocationSpan);
        }
        break;
      case 355: // simple_property_definition -> tkProperty, qualified_identifier, 
                //                               property_interface, property_specifiers, 
                //                               tkSemiColon, array_defaultproperty
{ 
			CurrentSemanticValue.stn = NewSimplePropertyDefinition(ValueStack[ValueStack.Depth-5].stn as method_name, ValueStack[ValueStack.Depth-4].stn as property_interface, ValueStack[ValueStack.Depth-3].stn as property_accessors, ValueStack[ValueStack.Depth-1].stn as property_array_default, CurrentLocationSpan);
        }
        break;
      case 356: // array_defaultproperty -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 357: // array_defaultproperty -> tkDefault, tkSemiColon
{ 
			CurrentSemanticValue.stn = new property_array_default();  
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 358: // property_interface -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 359: // property_interface -> property_parameter_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new property_interface(ValueStack[ValueStack.Depth-3].stn as property_parameter_list, ValueStack[ValueStack.Depth-1].td, null, CurrentLocationSpan);
        }
        break;
      case 360: // property_parameter_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 361: // property_parameter_list -> tkSquareOpen, parameter_decl_list, tkSquareClose
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 362: // parameter_decl_list -> parameter_decl
{ 
			CurrentSemanticValue.stn = new property_parameter_list(ValueStack[ValueStack.Depth-1].stn as property_parameter, CurrentLocationSpan);
		}
        break;
      case 363: // parameter_decl_list -> parameter_decl_list, tkSemiColon, parameter_decl
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as property_parameter_list).Add(ValueStack[ValueStack.Depth-1].stn as property_parameter, CurrentLocationSpan);
		}
        break;
      case 364: // parameter_decl -> ident_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new property_parameter(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
		}
        break;
      case 365: // optional_identifier -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 366: // optional_identifier -> /* empty */
{ CurrentSemanticValue.id = null; }
        break;
      case 368: // property_specifiers -> tkRead, optional_identifier, property_specifiers
{ 
			CurrentSemanticValue.stn = NewPropertySpecifiersRead(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-2].id, ValueStack[ValueStack.Depth-1].stn as property_accessors, CurrentLocationSpan);
        }
        break;
      case 369: // property_specifiers -> tkWrite, optional_identifier, property_specifiers
{ 
			CurrentSemanticValue.stn = NewPropertySpecifiersWrite(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-2].id, ValueStack[ValueStack.Depth-1].stn as property_accessors, CurrentLocationSpan);
        }
        break;
      case 370: // var_decl -> var_decl_part, tkSemiColon
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 373: // var_decl_part -> ident_list, tkColon, type_ref
{ 
			CurrentSemanticValue.stn = new var_def_statement(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, null, definition_attribute.None, false, CurrentLocationSpan);
		}
        break;
      case 374: // var_decl_part -> ident_list, tkAssign, expr
{ 
			CurrentSemanticValue.stn = new var_def_statement(ValueStack[ValueStack.Depth-3].stn as ident_list, null, ValueStack[ValueStack.Depth-1].ex, definition_attribute.None, false, CurrentLocationSpan);		
		}
        break;
      case 375: // var_decl_part -> ident_list, tkColon, type_ref, tkAssignOrEqual, 
                //                  typed_const_or_new
{ 
			CurrentSemanticValue.stn = new var_def_statement(ValueStack[ValueStack.Depth-5].stn as ident_list, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].ex, definition_attribute.None, false, CurrentLocationSpan); 
		}
        break;
      case 376: // var_decl_part -> ident_list, tkColon, type_ref, tkAssignOrEqual, 
                //                  expl_func_decl_lambda
{
			CurrentSemanticValue.stn = new var_def_statement(ValueStack[ValueStack.Depth-5].stn as ident_list, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].ex, definition_attribute.None, false, CurrentLocationSpan);
		}
        break;
      case 377: // typed_const_or_new -> typed_const
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 378: // typed_const_or_new -> new_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 379: // typed_const_or_new -> default_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 380: // constr_destr_decl -> constr_destr_header, block
{ 
			CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, ValueStack[ValueStack.Depth-1].stn as block, CurrentLocationSpan);
        }
        break;
      case 381: // inclass_constr_destr_decl -> constr_destr_header, inclass_block
{ 
			CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, ValueStack[ValueStack.Depth-1].stn as block, CurrentLocationSpan);
        }
        break;
      case 382: // proc_func_decl -> proc_func_decl_noclass
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 383: // proc_func_decl -> tkClass, proc_func_decl_noclass
{ 
			(ValueStack[ValueStack.Depth-1].stn as procedure_definition).proc_header.class_keyword = true;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 384: // proc_func_decl_noclass -> proc_func_header, proc_func_external_block
{
            CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, ValueStack[ValueStack.Depth-1].stn as proc_block, CurrentLocationSpan);
        }
        break;
      case 385: // proc_func_decl_noclass -> tkFunction, func_name, fp_list, tkColon, fptype, 
                //                           tkAssign, relop_expr, tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortFuncDefinition(ValueStack[ValueStack.Depth-6].stn as formal_parameters, new procedure_attributes_list(), ValueStack[ValueStack.Depth-7].stn as method_name, ValueStack[ValueStack.Depth-4].td as type_definition, ValueStack[ValueStack.Depth-2].ex, LocationStack[LocationStack.Depth-8].Merge(LocationStack[LocationStack.Depth-4]));
		}
        break;
      case 386: // proc_func_decl_noclass -> tkFunction, func_name, fp_list, tkAssign, relop_expr, 
                //                           tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortFuncDefinition(ValueStack[ValueStack.Depth-4].stn as formal_parameters, new procedure_attributes_list(), ValueStack[ValueStack.Depth-5].stn as method_name, null, ValueStack[ValueStack.Depth-2].ex, LocationStack[LocationStack.Depth-6].Merge(LocationStack[LocationStack.Depth-4]));
		}
        break;
      case 387: // proc_func_decl_noclass -> tkProcedure, proc_name, fp_list, tkAssign, stmt, 
                //                           tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortProcDefinition(ValueStack[ValueStack.Depth-4].stn as formal_parameters, new procedure_attributes_list(), ValueStack[ValueStack.Depth-5].stn as method_name, ValueStack[ValueStack.Depth-2].stn as statement, LocationStack[LocationStack.Depth-6].Merge(LocationStack[LocationStack.Depth-4]));
		}
        break;
      case 388: // proc_func_decl_noclass -> proc_func_header, tkForward, tkSemiColon
{
			CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-3].td as procedure_header, null, CurrentLocationSpan);
            (CurrentSemanticValue.stn as procedure_definition).proc_header.proc_attributes.Add((procedure_attribute)ValueStack[ValueStack.Depth-2].id, ValueStack[ValueStack.Depth-2].id.source_context);
		}
        break;
      case 389: // inclass_proc_func_decl -> inclass_proc_func_decl_noclass
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 390: // inclass_proc_func_decl -> tkClass, inclass_proc_func_decl_noclass
{ 
		    if ((ValueStack[ValueStack.Depth-1].stn as procedure_definition).proc_header != null)
				(ValueStack[ValueStack.Depth-1].stn as procedure_definition).proc_header.class_keyword = true;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 391: // inclass_proc_func_decl_noclass -> proc_func_header, inclass_block
{
            CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, ValueStack[ValueStack.Depth-1].stn as proc_block, CurrentLocationSpan);
		}
        break;
      case 392: // inclass_proc_func_decl_noclass -> tkFunction, func_name, fp_list, tkColon, 
                //                                   fptype, optional_method_modificators1, 
                //                                   tkAssign, relop_expr, tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortFuncDefinition(ValueStack[ValueStack.Depth-7].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-8].stn as method_name, ValueStack[ValueStack.Depth-5].td as type_definition, ValueStack[ValueStack.Depth-2].ex, LocationStack[LocationStack.Depth-9].Merge(LocationStack[LocationStack.Depth-4]));
			if (parsertools.build_tree_for_brackets)
				CurrentSemanticValue.stn = new short_func_definition(CurrentSemanticValue.stn as procedure_definition);
		}
        break;
      case 393: // inclass_proc_func_decl_noclass -> tkFunction, func_name, fp_list, 
                //                                   optional_method_modificators1, tkAssign, 
                //                                   relop_expr, tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortFuncDefinition(ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-6].stn as method_name, null, ValueStack[ValueStack.Depth-2].ex, LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-4]));
			if (parsertools.build_tree_for_brackets)
				CurrentSemanticValue.stn = new short_func_definition(CurrentSemanticValue.stn as procedure_definition);
		}
        break;
      case 394: // inclass_proc_func_decl_noclass -> tkProcedure, proc_name, fp_list, 
                //                                   optional_method_modificators1, tkAssign, 
                //                                   stmt, tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortProcDefinition(ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-6].stn as method_name, ValueStack[ValueStack.Depth-2].stn as statement, LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-4]));
			if (parsertools.build_tree_for_brackets)
				CurrentSemanticValue.stn = new short_func_definition(CurrentSemanticValue.stn as procedure_definition);
		}
        break;
      case 395: // proc_func_external_block -> block
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 396: // proc_func_external_block -> external_block
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 397: // proc_name -> func_name
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 398: // func_name -> func_meth_name_ident
{ 
			CurrentSemanticValue.stn = new method_name(null,null, ValueStack[ValueStack.Depth-1].id, null, CurrentLocationSpan); 
		}
        break;
      case 399: // func_name -> func_class_name_ident_list, tkPoint, func_meth_name_ident
{ 
        	var ln = ValueStack[ValueStack.Depth-3].ob as List<ident>;
        	var cnt = (ValueStack[ValueStack.Depth-3].ob as List<ident>).Count;
        	if (cnt == 1)
				CurrentSemanticValue.stn = new method_name(null, ln[cnt-1], ValueStack[ValueStack.Depth-1].id, null, CurrentLocationSpan);
			else 	
				CurrentSemanticValue.stn = new method_name(ln, ln[cnt-1], ValueStack[ValueStack.Depth-1].id, null, CurrentLocationSpan);
		}
        break;
      case 400: // func_class_name_ident -> func_name_with_template_args
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 401: // func_class_name_ident_list -> func_class_name_ident
{ 
			CurrentSemanticValue.ob = new List<ident>(); 
			(CurrentSemanticValue.ob as List<ident>).Add(ValueStack[ValueStack.Depth-1].id);
		}
        break;
      case 402: // func_class_name_ident_list -> func_class_name_ident_list, tkPoint, 
                //                               func_class_name_ident
{ 
			(ValueStack[ValueStack.Depth-3].ob as List<ident>).Add(ValueStack[ValueStack.Depth-1].id);
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-3].ob; 
		}
        break;
      case 403: // func_meth_name_ident -> func_name_with_template_args
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 404: // func_meth_name_ident -> operator_name_ident
{ CurrentSemanticValue.id = (ident)ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 405: // func_name_with_template_args -> func_name_ident
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 406: // func_name_with_template_args -> func_name_ident, template_arguments
{ 
			CurrentSemanticValue.id = new template_type_name(ValueStack[ValueStack.Depth-2].id.name, ValueStack[ValueStack.Depth-1].stn as ident_list, CurrentLocationSpan); 
        }
        break;
      case 407: // func_name_ident -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 408: // proc_header -> tkProcedure, proc_name, fp_list, optional_method_modificators, 
                //                optional_where_section
{ 
        	CurrentSemanticValue.td = new procedure_header(ValueStack[ValueStack.Depth-3].stn as formal_parameters, ValueStack[ValueStack.Depth-2].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-4].stn as method_name, ValueStack[ValueStack.Depth-1].stn as where_definition_list, CurrentLocationSpan); 
        }
        break;
      case 409: // func_header -> tkFunction, func_name, fp_list, optional_method_modificators, 
                //                optional_where_section
{
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-3].stn as formal_parameters, ValueStack[ValueStack.Depth-2].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-4].stn as method_name, ValueStack[ValueStack.Depth-1].stn as where_definition_list, null, CurrentLocationSpan); 
		}
        break;
      case 410: // func_header -> tkFunction, func_name, fp_list, tkColon, fptype, 
                //                optional_method_modificators, optional_where_section
{ 
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-2].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-6].stn as method_name, ValueStack[ValueStack.Depth-1].stn as where_definition_list, ValueStack[ValueStack.Depth-3].td as type_definition, CurrentLocationSpan); 
        }
        break;
      case 411: // external_block -> tkExternal, external_directive_ident, tkName, 
                //                   external_directive_ident, tkSemiColon
{ 
			CurrentSemanticValue.stn = new external_directive(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan); 
		}
        break;
      case 412: // external_block -> tkExternal, external_directive_ident, tkSemiColon
{ 
			CurrentSemanticValue.stn = new external_directive(ValueStack[ValueStack.Depth-2].ex, null, CurrentLocationSpan); 
		}
        break;
      case 413: // external_block -> tkExternal, tkSemiColon
{ 
			CurrentSemanticValue.stn = new external_directive(null, null, CurrentLocationSpan); 
		}
        break;
      case 414: // external_directive_ident -> identifier
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 415: // external_directive_ident -> literal
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 416: // block -> decl_sect_list, compound_stmt, tkSemiColon
{ 
			CurrentSemanticValue.stn = new block(ValueStack[ValueStack.Depth-3].stn as declarations, ValueStack[ValueStack.Depth-2].stn as statement_list, CurrentLocationSpan); 
		}
        break;
      case 417: // inclass_block -> inclass_decl_sect_list, compound_stmt, tkSemiColon
{ 
			CurrentSemanticValue.stn = new block(ValueStack[ValueStack.Depth-3].stn as declarations, ValueStack[ValueStack.Depth-2].stn as statement_list, CurrentLocationSpan); 
		}
        break;
      case 418: // fp_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 419: // fp_list -> tkRoundOpen, tkRoundClose
{ 
			CurrentSemanticValue.stn = null;
		}
        break;
      case 420: // fp_list -> tkRoundOpen, fp_sect_list, tkRoundClose
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			if (CurrentSemanticValue.stn != null)
				CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 421: // fp_sect_list -> fp_sect
{ 
			CurrentSemanticValue.stn = new formal_parameters(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
        }
        break;
      case 422: // fp_sect_list -> fp_sect_list, tkSemiColon, fp_sect
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as formal_parameters).Add(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);   
        }
        break;
      case 423: // fp_sect -> attribute_declarations, simple_fp_sect
{  
			(ValueStack[ValueStack.Depth-1].stn as declaration).attributes = ValueStack[ValueStack.Depth-2].stn as  attribute_list;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
        }
        break;
      case 424: // simple_fp_sect -> param_name_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.none, null, CurrentLocationSpan); 
		}
        break;
      case 425: // simple_fp_sect -> tkVar, param_name_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.var_parametr, null, CurrentLocationSpan);  
		}
        break;
      case 426: // simple_fp_sect -> tkConst, param_name_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.const_parametr, null, CurrentLocationSpan);  
		}
        break;
      case 427: // simple_fp_sect -> tkParams, param_name_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td,parametr_kind.params_parametr,null, CurrentLocationSpan);  
		}
        break;
      case 428: // simple_fp_sect -> param_name_list, tkColon, fptype, tkAssign, const_expr
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-5].stn as ident_list, ValueStack[ValueStack.Depth-3].td, parametr_kind.none, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 429: // simple_fp_sect -> tkVar, param_name_list, tkColon, fptype, tkAssign, const_expr
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-5].stn as ident_list, ValueStack[ValueStack.Depth-3].td, parametr_kind.var_parametr, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);  
		}
        break;
      case 430: // simple_fp_sect -> tkConst, param_name_list, tkColon, fptype, tkAssign, 
                //                   const_expr
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-5].stn as ident_list, ValueStack[ValueStack.Depth-3].td, parametr_kind.const_parametr, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);  
		}
        break;
      case 431: // param_name_list -> param_name
{ 
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 432: // param_name_list -> param_name_list, tkComma, param_name
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);  
		}
        break;
      case 433: // param_name -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 434: // fptype -> type_ref
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 435: // stmt -> unlabelled_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 436: // stmt -> label_name, tkColon, stmt
{ 
			CurrentSemanticValue.stn = new labeled_statement(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);  
		}
        break;
      case 437: // unlabelled_stmt -> /* empty */
{ 
			CurrentSemanticValue.stn = new empty_statement(); 
			CurrentSemanticValue.stn.source_context = null;
		}
        break;
      case 438: // unlabelled_stmt -> assignment
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 439: // unlabelled_stmt -> proc_call
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 440: // unlabelled_stmt -> goto_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 441: // unlabelled_stmt -> compound_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 442: // unlabelled_stmt -> if_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 443: // unlabelled_stmt -> case_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 444: // unlabelled_stmt -> repeat_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 445: // unlabelled_stmt -> while_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 446: // unlabelled_stmt -> for_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 447: // unlabelled_stmt -> with_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 448: // unlabelled_stmt -> inherited_message
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 449: // unlabelled_stmt -> try_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 450: // unlabelled_stmt -> raise_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 451: // unlabelled_stmt -> foreach_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 452: // unlabelled_stmt -> var_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 453: // unlabelled_stmt -> expr_as_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 454: // unlabelled_stmt -> lock_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 455: // unlabelled_stmt -> my_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 456: // unlabelled_stmt -> yield_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 457: // yield_stmt -> tkYield, expr_l1
{
			CurrentSemanticValue.stn = new yield_node(ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);
		}
        break;
      case 458: // my_stmt -> tkCycle, expr, unlabelled_stmt
{
			CurrentSemanticValue.stn = parsertools.MyStmt(ValueStack[ValueStack.Depth-2].ex,ValueStack[ValueStack.Depth-1].stn as statement); 
		}
        break;
      case 459: // var_stmt -> tkVar, var_decl_part
{ 
			CurrentSemanticValue.stn = new var_statement(ValueStack[ValueStack.Depth-1].stn as var_def_statement, CurrentLocationSpan);
		}
        break;
      case 460: // assignment -> var_reference, assign_operator, expr
{      
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
        }
        break;
      case 461: // proc_call -> var_reference
{ 
			CurrentSemanticValue.stn = new procedure_call(ValueStack[ValueStack.Depth-1].ex as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 462: // goto_stmt -> tkGoto, label_name
{ 
			CurrentSemanticValue.stn = new goto_statement(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 463: // compound_stmt -> tkBegin, stmt_list, tkEnd
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			(CurrentSemanticValue.stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-3].ti;
			(CurrentSemanticValue.stn as statement_list).right_logical_bracket = ValueStack[ValueStack.Depth-1].ti;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
        }
        break;
      case 464: // stmt_list -> stmt
{ 
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, LocationStack[LocationStack.Depth-1]);
        }
        break;
      case 465: // stmt_list -> stmt_list, tkSemiColon, stmt
{  
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as statement_list).Add(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
        }
        break;
      case 466: // if_stmt -> tkIf, expr, tkThen, stmt
{ 
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, null, CurrentLocationSpan); 
        }
        break;
      case 467: // if_stmt -> tkIf, expr, tkThen, stmt, tkElse, stmt
{
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); 
        }
        break;
      case 468: // case_stmt -> tkCase, expr, tkOf, case_list, else_case, tkEnd
{ 
			CurrentSemanticValue.stn = new case_node(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].stn as case_variants, ValueStack[ValueStack.Depth-2].stn as statement, CurrentLocationSpan); 
		}
        break;
      case 469: // case_list -> case_item
{
			if (ValueStack[ValueStack.Depth-1].stn is empty_statement) 
				CurrentSemanticValue.stn = NewCaseItem(ValueStack[ValueStack.Depth-1].stn, null);
			else CurrentSemanticValue.stn = NewCaseItem(ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan);
		}
        break;
      case 470: // case_list -> case_list, tkSemiColon, case_item
{ 
			CurrentSemanticValue.stn = AddCaseItem(ValueStack[ValueStack.Depth-3].stn as case_variants, ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan);
		}
        break;
      case 471: // case_item -> /* empty */
{ 
			CurrentSemanticValue.stn = new empty_statement(); 
		}
        break;
      case 472: // case_item -> case_label_list, tkColon, stmt
{ 
			CurrentSemanticValue.stn = new case_variant(ValueStack[ValueStack.Depth-3].stn as expression_list, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); 
		}
        break;
      case 473: // case_label_list -> case_label
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 474: // case_label_list -> case_label_list, tkComma, case_label
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 475: // case_label -> const_elem
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 476: // else_case -> /* empty */
{ CurrentSemanticValue.stn = null;}
        break;
      case 477: // else_case -> tkElse, stmt_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 478: // repeat_stmt -> tkRepeat, stmt_list, tkUntil, expr
{ 
		    CurrentSemanticValue.stn = new repeat_node(ValueStack[ValueStack.Depth-3].stn as statement_list, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
			(ValueStack[ValueStack.Depth-3].stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-4].ti;
			(ValueStack[ValueStack.Depth-3].stn as statement_list).right_logical_bracket = ValueStack[ValueStack.Depth-2].ti;
			ValueStack[ValueStack.Depth-3].stn.source_context = LocationStack[LocationStack.Depth-4].Merge(LocationStack[LocationStack.Depth-2]);
        }
        break;
      case 479: // while_stmt -> tkWhile, expr, optional_tk_do, stmt
{ 
			CurrentSemanticValue.stn = NewWhileStmt(ValueStack[ValueStack.Depth-4].ti, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-2].ti, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);    
        }
        break;
      case 480: // optional_tk_do -> tkDo
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 481: // optional_tk_do -> /* empty */
{ CurrentSemanticValue.ti = null; }
        break;
      case 482: // lock_stmt -> tkLock, expr, tkDo, stmt
{ 
			CurrentSemanticValue.stn = new lock_stmt(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); 
        }
        break;
      case 483: // foreach_stmt -> tkForeach, identifier, foreach_stmt_ident_dype_opt, tkIn, expr, 
                //                 tkDo, stmt
{ 
			CurrentSemanticValue.stn = new foreach_stmt(ValueStack[ValueStack.Depth-6].id, ValueStack[ValueStack.Depth-5].td, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); 
        }
        break;
      case 484: // foreach_stmt -> tkForeach, tkVar, identifier, tkColon, type_ref, tkIn, expr, 
                //                 tkDo, stmt
{ 
			CurrentSemanticValue.stn = new foreach_stmt(ValueStack[ValueStack.Depth-7].id, ValueStack[ValueStack.Depth-5].td, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); 
        }
        break;
      case 485: // foreach_stmt -> tkForeach, tkVar, identifier, tkIn, expr, tkDo, stmt
{ 
			CurrentSemanticValue.stn = new foreach_stmt(ValueStack[ValueStack.Depth-5].id, new no_type_foreach(), ValueStack[ValueStack.Depth-3].ex, (statement)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
        }
        break;
      case 486: // foreach_stmt_ident_dype_opt -> tkColon, type_ref
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 488: // for_stmt -> tkFor, optional_var, identifier, for_stmt_decl_or_assign, expr, 
                //             for_cycle_type, expr, optional_tk_do, stmt
{ 
			CurrentSemanticValue.stn = NewForStmt(ValueStack[ValueStack.Depth-9].ti, (bool)ValueStack[ValueStack.Depth-8].ob, ValueStack[ValueStack.Depth-7].id, ValueStack[ValueStack.Depth-6].td, ValueStack[ValueStack.Depth-5].ex, (for_cycle_type)ValueStack[ValueStack.Depth-4].ob, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-2].ti, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
        }
        break;
      case 489: // optional_var -> tkVar
{ CurrentSemanticValue.ob = true; }
        break;
      case 490: // optional_var -> /* empty */
{ CurrentSemanticValue.ob = false; }
        break;
      case 492: // for_stmt_decl_or_assign -> tkColon, simple_type_identifier, tkAssign
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-2].td; }
        break;
      case 493: // for_cycle_type -> tkTo
{ CurrentSemanticValue.ob = for_cycle_type.to; }
        break;
      case 494: // for_cycle_type -> tkDownto
{ CurrentSemanticValue.ob = for_cycle_type.downto; }
        break;
      case 495: // with_stmt -> tkWith, expr_list, tkDo, stmt
{ 
			CurrentSemanticValue.stn = new with_statement(ValueStack[ValueStack.Depth-1].stn as statement, ValueStack[ValueStack.Depth-3].stn as expression_list, CurrentLocationSpan); 
		}
        break;
      case 496: // inherited_message -> tkInherited
{ 
			CurrentSemanticValue.stn = new inherited_message();  
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 497: // try_stmt -> tkTry, stmt_list, try_handler
{ 
			CurrentSemanticValue.stn = new try_stmt(ValueStack[ValueStack.Depth-2].stn as statement_list, ValueStack[ValueStack.Depth-1].stn as try_handler, CurrentLocationSpan); 
			(ValueStack[ValueStack.Depth-2].stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-3].ti;
			ValueStack[ValueStack.Depth-2].stn.source_context = LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-2]);
        }
        break;
      case 498: // try_handler -> tkFinally, stmt_list, tkEnd
{ 
			CurrentSemanticValue.stn = new try_handler_finally(ValueStack[ValueStack.Depth-2].stn as statement_list, CurrentLocationSpan);
			(ValueStack[ValueStack.Depth-2].stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-3].ti;
			(ValueStack[ValueStack.Depth-2].stn as statement_list).right_logical_bracket = ValueStack[ValueStack.Depth-1].ti;
		}
        break;
      case 499: // try_handler -> tkExcept, exception_block, tkEnd
{ 
			CurrentSemanticValue.stn = new try_handler_except((exception_block)ValueStack[ValueStack.Depth-2].stn, CurrentLocationSpan);  
			if ((ValueStack[ValueStack.Depth-2].stn as exception_block).stmt_list != null)
			{
				(ValueStack[ValueStack.Depth-2].stn as exception_block).stmt_list.source_context = CurrentLocationSpan;
				(ValueStack[ValueStack.Depth-2].stn as exception_block).source_context = CurrentLocationSpan;
			}
		}
        break;
      case 500: // exception_block -> exception_handler_list, exception_block_else_branch
{ 
			CurrentSemanticValue.stn = new exception_block(null, (exception_handler_list)ValueStack[ValueStack.Depth-2].stn, (statement_list)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
		}
        break;
      case 501: // exception_block -> exception_handler_list, tkSemiColon, 
                //                    exception_block_else_branch
{ 
			CurrentSemanticValue.stn = new exception_block(null, (exception_handler_list)ValueStack[ValueStack.Depth-3].stn, (statement_list)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
		}
        break;
      case 502: // exception_block -> stmt_list
{ 
			CurrentSemanticValue.stn = new exception_block(ValueStack[ValueStack.Depth-1].stn as statement_list, null, null, LocationStack[LocationStack.Depth-1]);
		}
        break;
      case 503: // exception_handler_list -> exception_handler
{ 
			CurrentSemanticValue.stn = new exception_handler_list(ValueStack[ValueStack.Depth-1].stn as exception_handler, CurrentLocationSpan); 
		}
        break;
      case 504: // exception_handler_list -> exception_handler_list, tkSemiColon, 
                //                           exception_handler
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as exception_handler_list).Add(ValueStack[ValueStack.Depth-1].stn as exception_handler, CurrentLocationSpan); 
		}
        break;
      case 505: // exception_block_else_branch -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 506: // exception_block_else_branch -> tkElse, stmt_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 507: // exception_handler -> tkOn, exception_identifier, tkDo, stmt
{ 
			CurrentSemanticValue.stn = new exception_handler((ValueStack[ValueStack.Depth-3].stn as exception_ident).variable, (ValueStack[ValueStack.Depth-3].stn as exception_ident).type_name, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 508: // exception_identifier -> exception_class_type_identifier
{ 
			CurrentSemanticValue.stn = new exception_ident(null, (named_type_reference)ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
		}
        break;
      case 509: // exception_identifier -> exception_variable, tkColon, 
                //                         exception_class_type_identifier
{ 
			CurrentSemanticValue.stn = new exception_ident(ValueStack[ValueStack.Depth-3].id, (named_type_reference)ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
		}
        break;
      case 510: // exception_class_type_identifier -> simple_type_identifier
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 511: // exception_variable -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 512: // raise_stmt -> tkRaise
{ 
			CurrentSemanticValue.stn = new raise_stmt(); 
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 513: // raise_stmt -> tkRaise, expr
{ 
			CurrentSemanticValue.stn = new raise_stmt(ValueStack[ValueStack.Depth-1].ex, null, CurrentLocationSpan);  
		}
        break;
      case 514: // expr_list -> expr
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 515: // expr_list -> expr_list, tkComma, expr
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 516: // expr_as_stmt -> allowable_expr_as_stmt
{ 
			CurrentSemanticValue.stn = new expression_as_statement(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);  
		}
        break;
      case 517: // allowable_expr_as_stmt -> new_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 518: // expr -> expr_l1
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 519: // expr -> format_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 520: // expr -> func_decl_lambda
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 521: // expr_l1 -> relop_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 522: // expr_l1 -> question_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 523: // sizeof_expr -> tkSizeOf, tkRoundOpen, simple_or_template_type_reference, 
                //                tkRoundClose
{ 
			CurrentSemanticValue.ex = new sizeof_operator((named_type_reference)ValueStack[ValueStack.Depth-2].td, null, CurrentLocationSpan);  
		}
        break;
      case 524: // typeof_expr -> tkTypeOf, tkRoundOpen, simple_or_template_type_reference, 
                //                tkRoundClose
{ 
			CurrentSemanticValue.ex = new typeof_operator((named_type_reference)ValueStack[ValueStack.Depth-2].td, CurrentLocationSpan);  
		}
        break;
      case 525: // question_expr -> expr_l1, tkQuestion, expr_l1, tkColon, expr_l1
{ 
			CurrentSemanticValue.ex = new question_colon_expression(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);  
		}
        break;
      case 526: // simple_or_template_type_reference -> simple_type_identifier
{ 
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
		}
        break;
      case 527: // simple_or_template_type_reference -> simple_type_identifier, 
                //                                      template_type_params
{ 
			CurrentSemanticValue.td = new template_type_reference((named_type_reference)ValueStack[ValueStack.Depth-2].td, (template_param_list)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
        }
        break;
      case 528: // simple_or_template_type_reference -> simple_type_identifier, tkAmpersend, 
                //                                      template_type_params
{ 
			CurrentSemanticValue.td = new template_type_reference((named_type_reference)ValueStack[ValueStack.Depth-3].td, (template_param_list)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
        }
        break;
      case 529: // optional_array_initializer -> tkRoundOpen, typed_const_list, tkRoundClose
{ 
			CurrentSemanticValue.stn = new array_const((expression_list)ValueStack[ValueStack.Depth-2].stn, CurrentLocationSpan); 
		}
        break;
      case 531: // new_expr -> tkNew, simple_or_template_type_reference, 
                //             optional_expr_list_with_bracket
{
			CurrentSemanticValue.ex = new new_expr(ValueStack[ValueStack.Depth-2].td, ValueStack[ValueStack.Depth-1].stn as expression_list, false, null, CurrentLocationSpan);
        }
        break;
      case 532: // new_expr -> tkNew, array_name_for_new_expr, tkSquareOpen, optional_expr_list, 
                //             tkSquareClose, optional_array_initializer
{
        	var el = ValueStack[ValueStack.Depth-3].stn as expression_list;
        	if (el == null)
        	{
        		var cnt = 0;
        		var ac = ValueStack[ValueStack.Depth-1].stn as array_const;
        		if (ac != null && ac.elements != null)
	        	    cnt = ac.elements.expressions.Count;
	        	else parsertools.AddErrorFromResource("WITHOUT_INIT_AND_SIZE",LocationStack[LocationStack.Depth-2]);
        		el = new expression_list(new int32_const(cnt),LocationStack[LocationStack.Depth-6]);
        	}	
			CurrentSemanticValue.ex = new new_expr(ValueStack[ValueStack.Depth-5].td, el, true, ValueStack[ValueStack.Depth-1].stn as array_const, CurrentLocationSpan);
        }
        break;
      case 533: // new_expr -> tkNew, tkClass, tkRoundOpen, list_fields_in_unnamed_object, 
                //             tkRoundClose
{
        // sugared node	
        	var l = ValueStack[ValueStack.Depth-2].ob as name_assign_expr_list;
        	var exprs = l.name_expr.Select(x=>x.expr).ToList();
        	var typename = "AnonymousType#"+Guid();
        	var type = new named_type_reference(typename,LocationStack[LocationStack.Depth-5]);
        	
			// node new_expr - for code generation
			var ne = new new_expr(type, new expression_list(exprs), CurrentLocationSpan);
			// node unnamed_type_object - for formatting
			CurrentSemanticValue.ex = new unnamed_type_object(l, true, ne, CurrentLocationSpan);
        }
        break;
      case 534: // field_in_unnamed_object -> identifier, tkAssign, relop_expr
{
			CurrentSemanticValue.ob = new name_assign_expr(ValueStack[ValueStack.Depth-3].id,ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);
		}
        break;
      case 535: // field_in_unnamed_object -> relop_expr
{
			ident name = null;
			var id = ValueStack[ValueStack.Depth-1].ex as ident;
			dot_node dot;
			if (id != null)
				name = id;
			else 
            {
            	dot = ValueStack[ValueStack.Depth-1].ex as dot_node;
            	if (dot != null)
            	{
            		name = dot.right as ident;
            	}            	
            } 
			if (name == null)
				parsertools.errors.Add(new bad_anon_type(parsertools.CurrentFileName, LocationStack[LocationStack.Depth-1], null));	
			CurrentSemanticValue.ob = new name_assign_expr(name,ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);
		}
        break;
      case 536: // list_fields_in_unnamed_object -> field_in_unnamed_object
{
			var l = new name_assign_expr_list();
			CurrentSemanticValue.ob = l.Add(ValueStack[ValueStack.Depth-1].ob as name_assign_expr);
		}
        break;
      case 537: // list_fields_in_unnamed_object -> list_fields_in_unnamed_object, tkComma, 
                //                                  field_in_unnamed_object
{
			var nel = ValueStack[ValueStack.Depth-3].ob as name_assign_expr_list;
			var ss = nel.name_expr.Select(ne=>ne.name.name).FirstOrDefault(x=>string.Compare(x,(ValueStack[ValueStack.Depth-1].ob as name_assign_expr).name.name,true)==0);
            if (ss != null)
            	parsertools.errors.Add(new anon_type_duplicate_name(parsertools.CurrentFileName, LocationStack[LocationStack.Depth-1], null));
			nel.Add(ValueStack[ValueStack.Depth-1].ob as name_assign_expr);
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-3].ob;
		}
        break;
      case 538: // array_name_for_new_expr -> simple_type_identifier
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 539: // array_name_for_new_expr -> unsized_array_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 540: // optional_expr_list_with_bracket -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 541: // optional_expr_list_with_bracket -> tkRoundOpen, optional_expr_list, 
                //                                    tkRoundClose
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 542: // relop_expr -> simple_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 543: // relop_expr -> relop_expr, relop, simple_expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 544: // relop_expr -> relop_expr, tkMatching, simple_expr
{
			CurrentSemanticValue.ex = new matching_expression(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 545: // format_expr -> simple_expr, tkColon, simple_expr
{ 
			CurrentSemanticValue.ex = new format_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, null, CurrentLocationSpan); 
		}
        break;
      case 546: // format_expr -> simple_expr, tkColon, simple_expr, tkColon, simple_expr
{ 
			CurrentSemanticValue.ex = new format_expr(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 547: // relop -> tkEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 548: // relop -> tkNotEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 549: // relop -> tkLower
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 550: // relop -> tkGreater
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 551: // relop -> tkLowerEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 552: // relop -> tkGreaterEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 553: // relop -> tkIn
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 554: // simple_expr -> term
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 555: // simple_expr -> simple_expr, addop, term
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 556: // addop -> tkPlus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 557: // addop -> tkMinus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 558: // addop -> tkOr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 559: // addop -> tkXor
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 560: // addop -> tkCSharpStyleOr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 561: // typecast_op -> tkAs
{ 
			CurrentSemanticValue.ob = op_typecast.as_op; 
		}
        break;
      case 562: // typecast_op -> tkIs
{ 
			CurrentSemanticValue.ob = op_typecast.is_op; 
		}
        break;
      case 563: // as_is_expr -> term, typecast_op, simple_or_template_type_reference
{ 
			CurrentSemanticValue.ex = NewAsIsExpr(ValueStack[ValueStack.Depth-3].ex, (op_typecast)ValueStack[ValueStack.Depth-2].ob, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
        }
        break;
      case 564: // term -> factor
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 565: // term -> new_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 566: // term -> term, mulop, factor
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,(ValueStack[ValueStack.Depth-2].op).type, CurrentLocationSpan); }
        break;
      case 567: // term -> as_is_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 568: // mulop -> tkStar
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 569: // mulop -> tkSlash
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 570: // mulop -> tkDiv
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 571: // mulop -> tkMod
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 572: // mulop -> tkShl
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 573: // mulop -> tkShr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 574: // mulop -> tkAnd
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 575: // default_expr -> tkDefault, tkRoundOpen, simple_or_template_type_reference, 
                //                 tkRoundClose
{ 
			CurrentSemanticValue.ex = new default_operator(ValueStack[ValueStack.Depth-2].td as named_type_reference, CurrentLocationSpan);  
		}
        break;
      case 576: // factor -> tkNil
{ 
			CurrentSemanticValue.ex = new nil_const();  
			CurrentSemanticValue.ex.source_context = CurrentLocationSpan;
		}
        break;
      case 577: // factor -> literal_or_number
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 578: // factor -> default_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 579: // factor -> tkSquareOpen, elem_list, tkSquareClose
{ 
			CurrentSemanticValue.ex = new pascal_set_constant(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);  
		}
        break;
      case 580: // factor -> tkNot, factor
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 581: // factor -> sign, factor
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 582: // factor -> tkDeref, factor
{ 
			CurrentSemanticValue.ex = new roof_dereference(ValueStack[ValueStack.Depth-1].ex as addressed_value, CurrentLocationSpan);
		}
        break;
      case 583: // factor -> var_reference
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 584: // literal_or_number -> literal
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 585: // literal_or_number -> unsigned_number
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 586: // var_reference -> var_address, variable
{
			CurrentSemanticValue.ex = NewVarReference(ValueStack[ValueStack.Depth-2].stn as get_address, ValueStack[ValueStack.Depth-1].ex as addressed_value, CurrentLocationSpan);
		}
        break;
      case 587: // var_reference -> variable
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 588: // var_address -> tkAddressOf
{ 
			CurrentSemanticValue.stn = NewVarAddress(CurrentLocationSpan);
		}
        break;
      case 589: // var_address -> var_address, tkAddressOf
{ 
			CurrentSemanticValue.stn = NewVarAddress(ValueStack[ValueStack.Depth-2].stn as get_address, CurrentLocationSpan);
		}
        break;
      case 590: // attribute_variable -> simple_type_identifier, optional_expr_list_with_bracket
{ 
			CurrentSemanticValue.stn = new attribute(null, ValueStack[ValueStack.Depth-2].td as named_type_reference, ValueStack[ValueStack.Depth-1].stn as expression_list, CurrentLocationSpan);
		}
        break;
      case 591: // dotted_identifier -> identifier
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 592: // dotted_identifier -> dotted_identifier, tkPoint, identifier_or_keyword
{
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan);
		}
        break;
      case 593: // variable_as_type -> dotted_identifier
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;}
        break;
      case 594: // variable_as_type -> dotted_identifier, template_type_params
{ CurrentSemanticValue.ex = new ident_with_templateparams(ValueStack[ValueStack.Depth-2].ex as addressed_value, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan);   }
        break;
      case 595: // variable -> identifier
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 596: // variable -> operator_name_ident
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 597: // variable -> tkInherited, identifier
{ 
			CurrentSemanticValue.ex = new inherited_ident(ValueStack[ValueStack.Depth-1].id.name, CurrentLocationSpan);
		}
        break;
      case 598: // variable -> tkRoundOpen, expr, tkRoundClose
{
		    if (!parsertools.build_tree_for_brackets) 
            {
                ValueStack[ValueStack.Depth-2].ex.source_context = CurrentLocationSpan;
                CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex;
            } 
			else CurrentSemanticValue.ex = new bracket_expr(ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan);
        }
        break;
      case 599: // variable -> sizeof_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 600: // variable -> typeof_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 601: // variable -> literal_or_number, tkPoint, identifier_or_keyword
{ 
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 602: // variable -> variable, var_specifiers
{
			CurrentSemanticValue.ex = NewVariable(ValueStack[ValueStack.Depth-2].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
        }
        break;
      case 603: // var_specifiers -> tkSquareOpen, expr_list, tkSquareClose
{ 
			CurrentSemanticValue.ex = new indexer(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);  
		}
        break;
      case 604: // var_specifiers -> tkRoundOpen, optional_expr_list, tkRoundClose
{ 
			CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);  
		}
        break;
      case 605: // var_specifiers -> tkPoint, identifier_keyword_operatorname
{ 
			CurrentSemanticValue.ex = new dot_node(null, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan);  
		}
        break;
      case 606: // var_specifiers -> tkDeref
{ 
			CurrentSemanticValue.ex = new roof_dereference();  
			CurrentSemanticValue.ex.source_context = CurrentLocationSpan;
		}
        break;
      case 607: // var_specifiers -> tkAmpersend, template_type_params
{ 
			CurrentSemanticValue.ex = new ident_with_templateparams(null, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan);  
		}
        break;
      case 608: // optional_expr_list -> expr_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 609: // optional_expr_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 610: // elem_list -> elem_list1
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 611: // elem_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 612: // elem_list1 -> elem
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 613: // elem_list1 -> elem_list1, tkComma, elem
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 614: // elem -> expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 615: // elem -> expr, tkDotDot, expr
{ CurrentSemanticValue.ex = new diapason_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); }
        break;
      case 616: // one_literal -> tkStringLiteral
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].stn as literal; }
        break;
      case 617: // one_literal -> tkAsciiChar
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].stn as literal; }
        break;
      case 618: // literal -> literal_list
{ 
			CurrentSemanticValue.ex = NewLiteral(ValueStack[ValueStack.Depth-1].stn as literal_const_line);
        }
        break;
      case 619: // literal_list -> one_literal
{ 
			CurrentSemanticValue.stn = new literal_const_line(ValueStack[ValueStack.Depth-1].ex as literal, CurrentLocationSpan);
        }
        break;
      case 620: // literal_list -> literal_list, one_literal
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as literal_const_line).Add(ValueStack[ValueStack.Depth-1].ex as literal, CurrentLocationSpan);
        }
        break;
      case 621: // operator_name_ident -> tkOperator, overload_operator
{ 
			CurrentSemanticValue.ex = new operator_name_ident((ValueStack[ValueStack.Depth-1].op as op_type_node).text, (ValueStack[ValueStack.Depth-1].op as op_type_node).type, CurrentLocationSpan);
		}
        break;
      case 622: // optional_method_modificators -> tkSemiColon
{ 
			CurrentSemanticValue.stn = new procedure_attributes_list(new procedure_attribute(proc_attribute.attr_overload),CurrentLocationSpan); 
		}
        break;
      case 623: // optional_method_modificators -> tkSemiColon, meth_modificators, tkSemiColon
{ 
			parsertools.AddModifier((procedure_attributes_list)ValueStack[ValueStack.Depth-2].stn, proc_attribute.attr_overload); 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; 
		}
        break;
      case 624: // optional_method_modificators1 -> /* empty */
{ 
			CurrentSemanticValue.stn = new procedure_attributes_list(new procedure_attribute(proc_attribute.attr_overload),CurrentLocationSpan); 
		}
        break;
      case 625: // optional_method_modificators1 -> tkSemiColon, meth_modificators
{ 
			parsertools.AddModifier((procedure_attributes_list)ValueStack[ValueStack.Depth-1].stn, proc_attribute.attr_overload); 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 626: // meth_modificators -> meth_modificator
{ 
			CurrentSemanticValue.stn = new procedure_attributes_list(ValueStack[ValueStack.Depth-1].id as procedure_attribute, CurrentLocationSpan); 
		}
        break;
      case 627: // meth_modificators -> meth_modificators, tkSemiColon, meth_modificator
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as procedure_attributes_list).Add(ValueStack[ValueStack.Depth-1].id as procedure_attribute, CurrentLocationSpan);  
		}
        break;
      case 628: // identifier -> tkIdentifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 629: // identifier -> property_specifier_directives
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 630: // identifier -> non_reserved
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 631: // identifier_or_keyword -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 632: // identifier_or_keyword -> keyword
{ CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); }
        break;
      case 633: // identifier_or_keyword -> reserved_keyword
{ CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); }
        break;
      case 634: // identifier_keyword_operatorname -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 635: // identifier_keyword_operatorname -> keyword
{ CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); }
        break;
      case 636: // identifier_keyword_operatorname -> operator_name_ident
{ CurrentSemanticValue.id = (ident)ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 637: // meth_modificator -> tkAbstract
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 638: // meth_modificator -> tkOverload
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 639: // meth_modificator -> tkReintroduce
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 640: // meth_modificator -> tkOverride
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 641: // meth_modificator -> tkVirtual
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 642: // property_specifier_directives -> tkRead
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 643: // property_specifier_directives -> tkWrite
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 644: // non_reserved -> tkName
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 645: // non_reserved -> tkNew
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 646: // visibility_specifier -> tkInternal
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 647: // visibility_specifier -> tkPublic
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 648: // visibility_specifier -> tkProtected
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 649: // visibility_specifier -> tkPrivate
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 650: // keyword -> visibility_specifier
{ 
			CurrentSemanticValue.ti = new token_info(ValueStack[ValueStack.Depth-1].id.name, CurrentLocationSpan);  
		}
        break;
      case 651: // keyword -> tkSealed
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 652: // keyword -> tkTemplate
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 653: // keyword -> tkOr
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 654: // keyword -> tkTypeOf
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 655: // keyword -> tkSizeOf
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 656: // keyword -> tkDefault
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 657: // keyword -> tkWhere
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 658: // keyword -> tkXor
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 659: // keyword -> tkAnd
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 660: // keyword -> tkDiv
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 661: // keyword -> tkMod
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 662: // keyword -> tkShl
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 663: // keyword -> tkShr
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 664: // keyword -> tkNot
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 665: // keyword -> tkAs
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 666: // keyword -> tkIn
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 667: // keyword -> tkIs
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 668: // keyword -> tkArray
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 669: // keyword -> tkSequence
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 670: // keyword -> tkBegin
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 671: // keyword -> tkCase
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 672: // keyword -> tkClass
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 673: // keyword -> tkConst
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 674: // keyword -> tkConstructor
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 675: // keyword -> tkDestructor
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 676: // keyword -> tkDownto
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 677: // keyword -> tkDo
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 678: // keyword -> tkElse
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 679: // keyword -> tkExcept
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 680: // keyword -> tkFile
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 681: // keyword -> tkAuto
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 682: // keyword -> tkFinalization
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 683: // keyword -> tkFinally
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 684: // keyword -> tkFor
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 685: // keyword -> tkForeach
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 686: // keyword -> tkFunction
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 687: // keyword -> tkIf
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 688: // keyword -> tkImplementation
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 689: // keyword -> tkInherited
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 690: // keyword -> tkInitialization
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 691: // keyword -> tkInterface
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 692: // keyword -> tkProcedure
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 693: // keyword -> tkProperty
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 694: // keyword -> tkRaise
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 695: // keyword -> tkRecord
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 696: // keyword -> tkRepeat
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 697: // keyword -> tkSet
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 698: // keyword -> tkTry
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 699: // keyword -> tkType
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 700: // keyword -> tkThen
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 701: // keyword -> tkTo
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 702: // keyword -> tkUntil
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 703: // keyword -> tkUses
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 704: // keyword -> tkVar
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 705: // keyword -> tkWhile
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 706: // keyword -> tkWith
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 707: // keyword -> tkNil
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 708: // keyword -> tkGoto
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 709: // keyword -> tkOf
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 710: // keyword -> tkLabel
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 711: // keyword -> tkProgram
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 712: // keyword -> tkUnit
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 713: // keyword -> tkLibrary
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 714: // keyword -> tkExternal
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 715: // keyword -> tkParams
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 716: // reserved_keyword -> tkOperator
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 717: // reserved_keyword -> tkEnd
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 718: // overload_operator -> tkMinus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 719: // overload_operator -> tkPlus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 720: // overload_operator -> tkSlash
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 721: // overload_operator -> tkStar
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 722: // overload_operator -> tkEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 723: // overload_operator -> tkGreater
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 724: // overload_operator -> tkGreaterEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 725: // overload_operator -> tkLower
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 726: // overload_operator -> tkLowerEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 727: // overload_operator -> tkNotEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 728: // overload_operator -> tkOr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 729: // overload_operator -> tkXor
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 730: // overload_operator -> tkAnd
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 731: // overload_operator -> tkDiv
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 732: // overload_operator -> tkMod
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 733: // overload_operator -> tkShl
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 734: // overload_operator -> tkShr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 735: // overload_operator -> tkNot
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 736: // overload_operator -> tkIn
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 737: // overload_operator -> tkImplicit
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 738: // overload_operator -> tkExplicit
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 739: // overload_operator -> assign_operator
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 740: // assign_operator -> tkAssign
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 741: // assign_operator -> tkPlusEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 742: // assign_operator -> tkMinusEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 743: // assign_operator -> tkMultEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 744: // assign_operator -> tkDivEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 745: // func_decl_lambda -> identifier, tkArrow, lambda_function_body
{
			var idList = new ident_list(ValueStack[ValueStack.Depth-3].id, LocationStack[LocationStack.Depth-3]); 
			var formalPars = new formal_parameters(new typed_parameters(idList, new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null), parametr_kind.none, null, LocationStack[LocationStack.Depth-3]), LocationStack[LocationStack.Depth-3]);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null), ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 746: // func_decl_lambda -> tkRoundOpen, tkRoundClose, lambda_type_ref, tkArrow, 
                //                     lambda_function_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 747: // func_decl_lambda -> tkRoundOpen, identifier, tkColon, fptype, tkRoundClose, 
                //                     lambda_type_ref, tkArrow, lambda_function_body
{
			var idList = new ident_list(ValueStack[ValueStack.Depth-7].id, LocationStack[LocationStack.Depth-7]); 
            var loc = LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5]);
			var formalPars = new formal_parameters(new typed_parameters(idList, ValueStack[ValueStack.Depth-5].td, parametr_kind.none, null, loc), loc);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 748: // func_decl_lambda -> tkRoundOpen, identifier, tkSemiColon, full_lambda_fp_list, 
                //                     tkRoundClose, lambda_type_ref, tkArrow, 
                //                     lambda_function_body
{
			var idList = new ident_list(ValueStack[ValueStack.Depth-7].id, LocationStack[LocationStack.Depth-7]);
			var formalPars = new formal_parameters(new typed_parameters(idList, new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null), parametr_kind.none, null, LocationStack[LocationStack.Depth-7]), LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5]));
			for (int i = 0; i < (ValueStack[ValueStack.Depth-5].stn as formal_parameters).params_list.Count; i++)
				formalPars.Add((ValueStack[ValueStack.Depth-5].stn as formal_parameters).params_list[i]);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 749: // func_decl_lambda -> tkRoundOpen, identifier, tkColon, fptype, tkSemiColon, 
                //                     full_lambda_fp_list, tkRoundClose, lambda_type_ref, 
                //                     tkArrow, lambda_function_body
{
			var idList = new ident_list(ValueStack[ValueStack.Depth-9].id, LocationStack[LocationStack.Depth-9]);
            var loc = LexLocation.MergeAll(LocationStack[LocationStack.Depth-9],LocationStack[LocationStack.Depth-8],LocationStack[LocationStack.Depth-7]);
			var formalPars = new formal_parameters(new typed_parameters(idList, ValueStack[ValueStack.Depth-7].td, parametr_kind.none, null, loc), LexLocation.MergeAll(LocationStack[LocationStack.Depth-9],LocationStack[LocationStack.Depth-8],LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5]));
			for (int i = 0; i < (ValueStack[ValueStack.Depth-5].stn as formal_parameters).params_list.Count; i++)
				formalPars.Add((ValueStack[ValueStack.Depth-5].stn as formal_parameters).params_list[i]);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 750: // func_decl_lambda -> tkRoundOpen, identifier, tkComma, lambda_simple_fp_sect, 
                //                     tkRoundClose, lambda_type_ref, tkArrow, 
                //                     lambda_function_body
{
            var typed_pars = ValueStack[ValueStack.Depth-5].stn as typed_parameters;
			if (typed_pars.vars_type is lambda_inferred_type)
			{
				var formal_pars = new formal_parameters();
				var idd = ValueStack[ValueStack.Depth-7].id as ident;
				var lambda_inf_type = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
				var new_typed_pars = new typed_parameters(new ident_list(idd, idd.source_context), lambda_inf_type, parametr_kind.none, null, idd.source_context);
				formal_pars.Add(new_typed_pars);
				foreach (var id in typed_pars.idents.idents)
				{
					lambda_inf_type = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
					new_typed_pars = new typed_parameters(new ident_list(id, id.source_context), lambda_inf_type, parametr_kind.none, null, id.source_context);
					formal_pars.Add(new_typed_pars);
				}
				formal_pars.source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5]);
				CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formal_pars, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
			}
			else
			{		
				var loc = LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5]);
				var idList = new ident_list(ValueStack[ValueStack.Depth-7].id, loc);
				var otherFormalPars = ValueStack[ValueStack.Depth-5].stn as typed_parameters;
				for (int j = 0; j < otherFormalPars.idents.idents.Count; j++)
					idList.idents.Add(otherFormalPars.idents.idents[j]);
				var parsType = otherFormalPars.vars_type;
				var formalPars = new formal_parameters(new typed_parameters(idList, parsType, parametr_kind.none, null, loc), loc);
				CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
			}
		}
        break;
      case 751: // func_decl_lambda -> tkRoundOpen, identifier, tkComma, lambda_simple_fp_sect, 
                //                     tkSemiColon, full_lambda_fp_list, tkRoundClose, 
                //                     lambda_type_ref, tkArrow, lambda_function_body
{
            var typed_pars = ValueStack[ValueStack.Depth-7].stn as typed_parameters;
			if (typed_pars.vars_type is lambda_inferred_type)
			{
				var formal_pars = new formal_parameters();
				var idd = ValueStack[ValueStack.Depth-9].id as ident;
				var lambda_inf_type = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
				var new_typed_pars = new typed_parameters(new ident_list(idd, idd.source_context), lambda_inf_type, parametr_kind.none, null, idd.source_context);
				formal_pars.Add(new_typed_pars);
				foreach (var id in typed_pars.idents.idents)
				{
					lambda_inf_type = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
					new_typed_pars = new typed_parameters(new ident_list(id, id.source_context), lambda_inf_type, parametr_kind.none, null, id.source_context);
					formal_pars.Add(new_typed_pars);
				}
				for (int i = 0; i < (ValueStack[ValueStack.Depth-5].stn as formal_parameters).params_list.Count; i++)
					formal_pars.Add((ValueStack[ValueStack.Depth-5].stn as formal_parameters).params_list[i]);		
					
				formal_pars.source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-9],LocationStack[LocationStack.Depth-8],LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5]);
				CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formal_pars, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
			}
			else
			{			
				var loc = LexLocation.MergeAll(LocationStack[LocationStack.Depth-9],LocationStack[LocationStack.Depth-8],LocationStack[LocationStack.Depth-7]);
				var idList = new ident_list(ValueStack[ValueStack.Depth-9].id, loc);
				var otherFormalPars = ValueStack[ValueStack.Depth-7].stn as typed_parameters;
				for (int j = 0; j < otherFormalPars.idents.idents.Count; j++)
					idList.idents.Add(otherFormalPars.idents.idents[j]);
				var parsType = otherFormalPars.vars_type;
				var formalPars = new formal_parameters(new typed_parameters(idList, parsType, parametr_kind.none, null, loc), LexLocation.MergeAll(LocationStack[LocationStack.Depth-9],LocationStack[LocationStack.Depth-8],LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5]));
				for (int i = 0; i < (ValueStack[ValueStack.Depth-5].stn as formal_parameters).params_list.Count; i++)
					formalPars.Add((ValueStack[ValueStack.Depth-5].stn as formal_parameters).params_list[i]);
				CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
			}
		}
        break;
      case 752: // func_decl_lambda -> expl_func_decl_lambda
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 753: // expl_func_decl_lambda -> tkFunction, lambda_type_ref, tkArrow, 
                //                          lambda_function_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 754: // expl_func_decl_lambda -> tkFunction, tkRoundOpen, tkRoundClose, lambda_type_ref, 
                //                          tkArrow, lambda_function_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 755: // expl_func_decl_lambda -> tkFunction, tkRoundOpen, full_lambda_fp_list, 
                //                          tkRoundClose, lambda_type_ref, tkArrow, 
                //                          lambda_function_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 756: // expl_func_decl_lambda -> tkProcedure, tkArrow, lambda_procedure_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, null, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 757: // expl_func_decl_lambda -> tkProcedure, tkRoundOpen, tkRoundClose, tkArrow, 
                //                          lambda_procedure_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, null, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 758: // expl_func_decl_lambda -> tkProcedure, tkRoundOpen, full_lambda_fp_list, 
                //                          tkRoundClose, tkArrow, lambda_procedure_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), ValueStack[ValueStack.Depth-4].stn as formal_parameters, null, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 759: // full_lambda_fp_list -> lambda_simple_fp_sect
{
			var typed_pars = ValueStack[ValueStack.Depth-1].stn as typed_parameters;
			if (typed_pars.vars_type is lambda_inferred_type)
			{
				CurrentSemanticValue.stn = new formal_parameters();
				foreach (var id in typed_pars.idents.idents)
				{
					var lambda_inf_type = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
					var new_typed_pars = new typed_parameters(new ident_list(id, id.source_context), lambda_inf_type, parametr_kind.none, null, id.source_context);
					(CurrentSemanticValue.stn as formal_parameters).Add(new_typed_pars);
				}
				CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
			}
			else
			{
				CurrentSemanticValue.stn = new formal_parameters(typed_pars, CurrentLocationSpan);
			}
		}
        break;
      case 760: // full_lambda_fp_list -> full_lambda_fp_list, tkSemiColon, lambda_simple_fp_sect
{
			CurrentSemanticValue.stn =(ValueStack[ValueStack.Depth-3].stn as formal_parameters).Add(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
		}
        break;
      case 761: // lambda_simple_fp_sect -> ident_list, lambda_type_ref
{
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-2].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.none, null, CurrentLocationSpan);
		}
        break;
      case 762: // lambda_type_ref -> /* empty */
{
			CurrentSemanticValue.td = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
		}
        break;
      case 763: // lambda_type_ref -> tkColon, fptype
{
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
		}
        break;
      case 764: // lambda_function_body -> expr_l1
{
			CurrentSemanticValue.stn = NewLambdaBody(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 765: // lambda_function_body -> compound_stmt
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 766: // lambda_procedure_body -> proc_call
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 767: // lambda_procedure_body -> compound_stmt
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
