// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-G8V08V4
// DateTime: 24.11.2018 8:10:22
// UserName: ?????????
// Input file <ABCPascal.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using PascalABCCompiler.SyntaxTree;
using PascalABCSavParser;
using PascalABCCompiler.ParserTools;
using PascalABCCompiler.Errors;
using System.Linq;

namespace GPPGParserScanner
{
public enum Tokens {
    error=1,EOF=2,tkDirectiveName=3,tkAmpersend=4,tkColon=5,tkDotDot=6,
    tkPoint=7,tkRoundOpen=8,tkRoundClose=9,tkSemiColon=10,tkSquareOpen=11,tkSquareClose=12,
    tkQuestion=13,tkQuestionPoint=14,tkDoubleQuestion=15,tkQuestionSquareOpen=16,tkSizeOf=17,tkTypeOf=18,
    tkWhere=19,tkArray=20,tkCase=21,tkClass=22,tkAuto=23,tkStatic=24,
    tkConst=25,tkConstructor=26,tkDestructor=27,tkElse=28,tkExcept=29,tkFile=30,
    tkFor=31,tkForeach=32,tkFunction=33,tkMatch=34,tkWhen=35,tkIf=36,
    tkImplementation=37,tkInherited=38,tkInterface=39,tkProcedure=40,tkOperator=41,tkProperty=42,
    tkRaise=43,tkRecord=44,tkSet=45,tkType=46,tkThen=47,tkUses=48,
    tkVar=49,tkWhile=50,tkWith=51,tkNil=52,tkGoto=53,tkOf=54,
    tkLabel=55,tkLock=56,tkProgram=57,tkEvent=58,tkDefault=59,tkTemplate=60,
    tkPacked=61,tkExports=62,tkResourceString=63,tkThreadvar=64,tkSealed=65,tkPartial=66,
    tkTo=67,tkDownto=68,tkLoop=69,tkSequence=70,tkYield=71,tkNew=72,
    tkOn=73,tkName=74,tkPrivate=75,tkProtected=76,tkPublic=77,tkInternal=78,
    tkRead=79,tkWrite=80,tkParseModeExpression=81,tkParseModeStatement=82,tkParseModeType=83,tkBegin=84,
    tkEnd=85,tkAsmBody=86,tkILCode=87,tkError=88,INVISIBLE=89,tkRepeat=90,
    tkUntil=91,tkDo=92,tkComma=93,tkFinally=94,tkTry=95,tkInitialization=96,
    tkFinalization=97,tkUnit=98,tkLibrary=99,tkExternal=100,tkParams=101,tkNamespace=102,
    tkAssign=103,tkPlusEqual=104,tkMinusEqual=105,tkMultEqual=106,tkDivEqual=107,tkMinus=108,
    tkPlus=109,tkSlash=110,tkStar=111,tkStarStar=112,tkEqual=113,tkGreater=114,
    tkGreaterEqual=115,tkLower=116,tkLowerEqual=117,tkNotEqual=118,tkCSharpStyleOr=119,tkArrow=120,
    tkOr=121,tkXor=122,tkAnd=123,tkDiv=124,tkMod=125,tkShl=126,
    tkShr=127,tkNot=128,tkAs=129,tkIn=130,tkIs=131,tkImplicit=132,
    tkExplicit=133,tkAddressOf=134,tkDeref=135,tkIdentifier=136,tkStringLiteral=137,tkFormatStringLiteral=138,
    tkAsciiChar=139,tkAbstract=140,tkForward=141,tkOverload=142,tkReintroduce=143,tkOverride=144,
    tkVirtual=145,tkExtensionMethod=146,tkInteger=147,tkFloat=148,tkHex=149};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<PascalABCSavParser.Union,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public partial class GPPGParser: ShiftReduceParser<PascalABCSavParser.Union, LexLocation>
{
  // Verbatim content from ABCPascal.y
// ��� ���������� ����������� � ����� GPPGParser, �������������� ����� ������, ������������ �������� gppg
    public syntax_tree_node root; // �������� ���� ��������������� ������ 

    public List<Error> errors;
    public string current_file_name;
    public int max_errors = 10;
    public PT parsertools;
    public List<compiler_directive> CompilerDirectives;
	public ParserLambdaHelper lambdaHelper = new ParserLambdaHelper();
	
    public GPPGParser(AbstractScanner<PascalABCSavParser.Union, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from ABCPascal.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[897];
  private static State[] states = new State[1482];
  private static string[] nonTerms = new string[] {
      "parse_goal", "unit_key_word", "class_or_static", "assignment", "optional_array_initializer", 
      "attribute_declarations", "ot_visibility_specifier", "one_attribute", "attribute_variable", 
      "const_factor", "const_variable_2", "const_term", "const_variable", "literal_or_number", 
      "unsigned_number", "variable_or_literal_or_number", "program_block", "optional_var", 
      "class_attribute", "class_attributes", "class_attributes1", "member_list_section", 
      "optional_component_list_seq_end", "const_decl", "only_const_decl", "const_decl_sect", 
      "object_type", "record_type", "member_list", "method_decl_list", "field_or_const_definition_list", 
      "case_stmt", "case_list", "program_decl_sect_list", "int_decl_sect_list1", 
      "inclass_decl_sect_list1", "interface_decl_sect_list", "decl_sect_list", 
      "decl_sect_list1", "inclass_decl_sect_list", "field_or_const_definition", 
      "abc_decl_sect", "decl_sect", "int_decl_sect", "type_decl", "simple_type_decl", 
      "simple_field_or_const_definition", "res_str_decl_sect", "method_decl_withattr", 
      "method_or_property_decl", "property_definition", "fp_sect", "default_expr", 
      "tuple", "expr_as_stmt", "exception_block", "external_block", "exception_handler", 
      "exception_handler_list", "exception_identifier", "typed_const_list1", 
      "typed_const_list", "optional_expr_list", "elem_list", "optional_expr_list_with_bracket", 
      "expr_list", "const_elem_list1", "case_label_list", "const_elem_list", 
      "optional_const_func_expr_list", "elem_list1", "enumeration_id", "expr_l1_list", 
      "enumeration_id_list", "const_simple_expr", "term", "simple_term", "typed_const", 
      "typed_const_plus", "typed_var_init_expression", "expr", "expr_with_func_decl_lambda", 
      "const_expr", "elem", "range_expr", "const_elem", "array_const", "factor", 
      "relop_expr", "expr_dq", "expr_l1", "expr_l1_func_decl_lambda", "simple_expr", 
      "range_term", "range_factor", "external_directive_ident", "init_const_expr", 
      "case_label", "variable", "var_reference", "optional_read_expr", "simple_expr_or_nothing", 
      "var_question_point", "for_cycle_type", "format_expr", "format_const_expr", 
      "const_expr_or_nothing", "foreach_stmt", "for_stmt", "loop_stmt", "yield_stmt", 
      "yield_sequence_stmt", "fp_list", "fp_sect_list", "file_type", "sequence_type", 
      "var_address", "goto_stmt", "func_name_ident", "param_name", "const_field_name", 
      "func_name_with_template_args", "identifier_or_keyword", "unit_name", "exception_variable", 
      "const_name", "func_meth_name_ident", "label_name", "type_decl_identifier", 
      "template_identifier_with_equal", "program_param", "identifier", "identifier_keyword_operatorname", 
      "func_class_name_ident", "visibility_specifier", "property_specifier_directives", 
      "non_reserved", "if_stmt", "initialization_part", "template_arguments", 
      "label_list", "ident_or_keyword_pointseparator_list", "ident_list", "param_name_list", 
      "inherited_message", "implementation_part", "interface_part", "abc_interface_part", 
      "simple_type_list", "literal", "one_literal", "literal_list", "label_decl_sect", 
      "lock_stmt", "func_name", "proc_name", "optional_proc_name", "qualified_identifier", 
      "new_expr", "allowable_expr_as_stmt", "parts", "inclass_block", "block", 
      "proc_func_external_block", "exception_class_type_identifier", "simple_type_identifier", 
      "base_class_name", "base_classes_names_list", "optional_base_classes", 
      "one_compiler_directive", "optional_head_compiler_directives", "head_compiler_directives", 
      "program_heading_2", "optional_tk_point", "program_param_list", "optional_semicolon", 
      "operator_name_ident", "const_relop", "const_addop", "assign_operator", 
      "const_mulop", "relop", "addop", "mulop", "sign", "overload_operator", 
      "typecast_op", "property_specifiers", "write_property_specifiers", "read_property_specifiers", 
      "array_defaultproperty", "meth_modificators", "optional_method_modificators", 
      "optional_method_modificators1", "meth_modificator", "property_modificator", 
      "proc_call", "proc_func_constr_destr_decl", "proc_func_decl", "inclass_proc_func_decl", 
      "inclass_proc_func_decl_noclass", "constr_destr_decl", "inclass_constr_destr_decl", 
      "method_decl", "proc_func_constr_destr_decl_with_attr", "proc_func_decl_noclass", 
      "method_header", "proc_type_decl", "procedural_type_kind", "proc_header", 
      "procedural_type", "constr_destr_header", "proc_func_header", "func_header", 
      "method_procfunc_header", "int_func_header", "int_proc_header", "property_interface", 
      "program_file", "program_header", "parameter_decl", "parameter_decl_list", 
      "property_parameter_list", "const_set", "question_expr", "question_constexpr", 
      "record_const", "const_field_list_1", "const_field_list", "const_field", 
      "repeat_stmt", "raise_stmt", "pointer_type", "attribute_declaration", "one_or_some_attribute", 
      "stmt_list", "else_case", "exception_block_else_branch", "compound_stmt", 
      "string_type", "sizeof_expr", "simple_property_definition", "stmt_or_expression", 
      "unlabelled_stmt", "stmt", "case_item", "set_type", "as_is_expr", "as_is_constexpr", 
      "is_expr", "as_expr", "power_expr", "power_constexpr", "unsized_array_type", 
      "simple_type_or_", "simple_type", "simple_type_question", "foreach_stmt_ident_dype_opt", 
      "fptype", "type_ref", "fptype_noproctype", "array_type", "template_param", 
      "template_empty_param", "structured_type", "unpacked_structured_type", 
      "empty_template_type_reference", "simple_or_template_type_reference", "type_ref_or_secific", 
      "for_stmt_decl_or_assign", "type_decl_type", "type_ref_and_secific_list", 
      "type_decl_sect", "try_handler", "class_or_interface_keyword", "optional_tk_do", 
      "keyword", "reserved_keyword", "typeof_expr", "simple_fp_sect", "template_param_list", 
      "template_empty_param_list", "template_type_params", "template_type_empty_params", 
      "template_type", "try_stmt", "uses_clause", "used_units_list", "unit_file", 
      "used_unit_name", "unit_header", "var_decl_sect", "var_decl", "var_decl_part", 
      "field_definition", "var_stmt", "where_part", "where_part_list", "optional_where_section", 
      "while_stmt", "with_stmt", "variable_as_type", "dotted_identifier", "func_decl_lambda", 
      "expl_func_decl_lambda", "lambda_type_ref", "lambda_type_ref_noproctype", 
      "full_lambda_fp_list", "lambda_simple_fp_sect", "lambda_function_body", 
      "lambda_procedure_body", "common_lambda_body", "optional_full_lambda_fp_list", 
      "field_in_unnamed_object", "list_fields_in_unnamed_object", "func_class_name_ident_list", 
      "rem_lambda", "variable_list", "var_ident_list", "tkAssignOrEqual", "pattern", 
      "pattern_optional_var", "match_with", "pattern_case", "pattern_cases", 
      "pattern_out_param", "pattern_out_param_optional_var", "pattern_out_param_list", 
      "pattern_out_param_list_optional_var", "$accept", };

  static GPPGParser() {
    states[0] = new State(new int[]{57,1389,11,608,81,1464,83,1469,82,1476,3,-25,48,-25,84,-25,55,-25,25,-25,63,-25,46,-25,49,-25,58,-25,40,-25,33,-25,24,-25,22,-25,26,-25,27,-25,98,-199,99,-199,102,-199},new int[]{-1,1,-219,3,-220,4,-289,1401,-6,1402,-234,919,-161,1463});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{3,1385,48,-12,84,-12,55,-12,25,-12,63,-12,46,-12,49,-12,58,-12,11,-12,40,-12,33,-12,24,-12,22,-12,26,-12,27,-12},new int[]{-171,5,-172,1383,-170,1388});
    states[5] = new State(-36,new int[]{-287,6});
    states[6] = new State(new int[]{48,14,55,-60,25,-60,63,-60,46,-60,49,-60,58,-60,11,-60,40,-60,33,-60,24,-60,22,-60,26,-60,27,-60,84,-60},new int[]{-17,7,-34,114,-38,1320,-39,1321});
    states[7] = new State(new int[]{7,9,10,10,5,11,93,12,6,13,2,-24},new int[]{-174,8});
    states[8] = new State(-18);
    states[9] = new State(-19);
    states[10] = new State(-20);
    states[11] = new State(-21);
    states[12] = new State(-22);
    states[13] = new State(-23);
    states[14] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,78,32,77,33,76,34,75,35,65,36,60,37,121,38,18,39,17,40,59,41,19,42,122,43,123,44,124,45,125,46,126,47,127,48,128,49,129,50,130,51,131,52,20,53,70,54,84,55,21,56,22,57,25,58,26,59,27,60,68,61,92,62,28,63,29,64,30,65,23,66,97,67,94,68,31,69,32,70,33,71,36,72,37,73,38,74,96,75,39,76,40,77,42,78,43,79,44,80,90,81,45,82,95,83,46,84,24,85,47,86,67,87,91,88,48,89,49,90,50,91,51,92,52,93,53,94,54,95,55,96,57,97,98,98,99,99,102,100,100,101,101,102,58,103,71,104,34,105,35,106,41,108,85,109},new int[]{-288,15,-290,113,-142,19,-123,112,-132,22,-136,24,-137,27,-277,30,-135,31,-278,107});
    states[15] = new State(new int[]{10,16,93,17});
    states[16] = new State(-37);
    states[17] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,78,32,77,33,76,34,75,35,65,36,60,37,121,38,18,39,17,40,59,41,19,42,122,43,123,44,124,45,125,46,126,47,127,48,128,49,129,50,130,51,131,52,20,53,70,54,84,55,21,56,22,57,25,58,26,59,27,60,68,61,92,62,28,63,29,64,30,65,23,66,97,67,94,68,31,69,32,70,33,71,36,72,37,73,38,74,96,75,39,76,40,77,42,78,43,79,44,80,90,81,45,82,95,83,46,84,24,85,47,86,67,87,91,88,48,89,49,90,50,91,51,92,52,93,53,94,54,95,55,96,57,97,98,98,99,99,102,100,100,101,101,102,58,103,71,104,34,105,35,106,41,108,85,109},new int[]{-290,18,-142,19,-123,112,-132,22,-136,24,-137,27,-277,30,-135,31,-278,107});
    states[18] = new State(-39);
    states[19] = new State(new int[]{7,20,130,110,10,-40,93,-40});
    states[20] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,78,32,77,33,76,34,75,35,65,36,60,37,121,38,18,39,17,40,59,41,19,42,122,43,123,44,124,45,125,46,126,47,127,48,128,49,129,50,130,51,131,52,20,53,70,54,84,55,21,56,22,57,25,58,26,59,27,60,68,61,92,62,28,63,29,64,30,65,23,66,97,67,94,68,31,69,32,70,33,71,36,72,37,73,38,74,96,75,39,76,40,77,42,78,43,79,44,80,90,81,45,82,95,83,46,84,24,85,47,86,67,87,91,88,48,89,49,90,50,91,51,92,52,93,53,94,54,95,55,96,57,97,98,98,99,99,102,100,100,101,101,102,58,103,71,104,34,105,35,106,41,108,85,109},new int[]{-123,21,-132,22,-136,24,-137,27,-277,30,-135,31,-278,107});
    states[21] = new State(-35);
    states[22] = new State(-732);
    states[23] = new State(-729);
    states[24] = new State(-730);
    states[25] = new State(-747);
    states[26] = new State(-748);
    states[27] = new State(-731);
    states[28] = new State(-749);
    states[29] = new State(-750);
    states[30] = new State(-733);
    states[31] = new State(-755);
    states[32] = new State(-751);
    states[33] = new State(-752);
    states[34] = new State(-753);
    states[35] = new State(-754);
    states[36] = new State(-756);
    states[37] = new State(-757);
    states[38] = new State(-758);
    states[39] = new State(-759);
    states[40] = new State(-760);
    states[41] = new State(-761);
    states[42] = new State(-762);
    states[43] = new State(-763);
    states[44] = new State(-764);
    states[45] = new State(-765);
    states[46] = new State(-766);
    states[47] = new State(-767);
    states[48] = new State(-768);
    states[49] = new State(-769);
    states[50] = new State(-770);
    states[51] = new State(-771);
    states[52] = new State(-772);
    states[53] = new State(-773);
    states[54] = new State(-774);
    states[55] = new State(-775);
    states[56] = new State(-776);
    states[57] = new State(-777);
    states[58] = new State(-778);
    states[59] = new State(-779);
    states[60] = new State(-780);
    states[61] = new State(-781);
    states[62] = new State(-782);
    states[63] = new State(-783);
    states[64] = new State(-784);
    states[65] = new State(-785);
    states[66] = new State(-786);
    states[67] = new State(-787);
    states[68] = new State(-788);
    states[69] = new State(-789);
    states[70] = new State(-790);
    states[71] = new State(-791);
    states[72] = new State(-792);
    states[73] = new State(-793);
    states[74] = new State(-794);
    states[75] = new State(-795);
    states[76] = new State(-796);
    states[77] = new State(-797);
    states[78] = new State(-798);
    states[79] = new State(-799);
    states[80] = new State(-800);
    states[81] = new State(-801);
    states[82] = new State(-802);
    states[83] = new State(-803);
    states[84] = new State(-804);
    states[85] = new State(-805);
    states[86] = new State(-806);
    states[87] = new State(-807);
    states[88] = new State(-808);
    states[89] = new State(-809);
    states[90] = new State(-810);
    states[91] = new State(-811);
    states[92] = new State(-812);
    states[93] = new State(-813);
    states[94] = new State(-814);
    states[95] = new State(-815);
    states[96] = new State(-816);
    states[97] = new State(-817);
    states[98] = new State(-818);
    states[99] = new State(-819);
    states[100] = new State(-820);
    states[101] = new State(-821);
    states[102] = new State(-822);
    states[103] = new State(-823);
    states[104] = new State(-824);
    states[105] = new State(-825);
    states[106] = new State(-826);
    states[107] = new State(-734);
    states[108] = new State(-827);
    states[109] = new State(-828);
    states[110] = new State(new int[]{137,111});
    states[111] = new State(-41);
    states[112] = new State(-34);
    states[113] = new State(-38);
    states[114] = new State(new int[]{84,116},new int[]{-239,115});
    states[115] = new State(-32);
    states[116] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,661,149,155,148,662,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473},new int[]{-236,117,-245,659,-244,121,-4,122,-100,123,-117,337,-99,344,-132,660,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751,-128,860});
    states[117] = new State(new int[]{85,118,10,119});
    states[118] = new State(-509);
    states[119] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,661,149,155,148,662,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473,91,-473,94,-473,29,-473,97,-473},new int[]{-245,120,-244,121,-4,122,-100,123,-117,337,-99,344,-132,660,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751,-128,860});
    states[120] = new State(-511);
    states[121] = new State(-471);
    states[122] = new State(-474);
    states[123] = new State(new int[]{103,382,104,383,105,384,106,385,107,386,85,-507,10,-507,91,-507,94,-507,29,-507,97,-507,28,-507,93,-507,12,-507,9,-507,92,-507,80,-507,79,-507,2,-507,78,-507,77,-507,76,-507,75,-507},new int[]{-180,124});
    states[124] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,501,17,247,18,252,5,570,33,622,40,826},new int[]{-82,125,-81,126,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,351,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569,-304,620,-305,621});
    states[125] = new State(-501);
    states[126] = new State(-571);
    states[127] = new State(new int[]{13,128,85,-573,10,-573,91,-573,94,-573,29,-573,97,-573,28,-573,93,-573,12,-573,9,-573,92,-573,80,-573,79,-573,2,-573,78,-573,77,-573,76,-573,75,-573,6,-573});
    states[128] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,129,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[129] = new State(new int[]{5,130,13,128});
    states[130] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,131,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[131] = new State(new int[]{13,128,85,-584,10,-584,91,-584,94,-584,29,-584,97,-584,28,-584,93,-584,12,-584,9,-584,92,-584,80,-584,79,-584,2,-584,78,-584,77,-584,76,-584,75,-584,5,-584,6,-584,47,-584,54,-584,134,-584,136,-584,74,-584,72,-584,41,-584,38,-584,8,-584,17,-584,18,-584,137,-584,139,-584,138,-584,147,-584,149,-584,148,-584,53,-584,84,-584,36,-584,21,-584,90,-584,50,-584,31,-584,51,-584,95,-584,43,-584,32,-584,49,-584,56,-584,71,-584,69,-584,34,-584,67,-584,68,-584});
    states[132] = new State(new int[]{15,133,13,-575,85,-575,10,-575,91,-575,94,-575,29,-575,97,-575,28,-575,93,-575,12,-575,9,-575,92,-575,80,-575,79,-575,2,-575,78,-575,77,-575,76,-575,75,-575,5,-575,6,-575,47,-575,54,-575,134,-575,136,-575,74,-575,72,-575,41,-575,38,-575,8,-575,17,-575,18,-575,137,-575,139,-575,138,-575,147,-575,149,-575,148,-575,53,-575,84,-575,36,-575,21,-575,90,-575,50,-575,31,-575,51,-575,95,-575,43,-575,32,-575,49,-575,56,-575,71,-575,69,-575,34,-575,67,-575,68,-575});
    states[133] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-89,134,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567});
    states[134] = new State(new int[]{113,291,118,292,116,293,114,294,117,295,115,296,130,297,15,-580,13,-580,85,-580,10,-580,91,-580,94,-580,29,-580,97,-580,28,-580,93,-580,12,-580,9,-580,92,-580,80,-580,79,-580,2,-580,78,-580,77,-580,76,-580,75,-580,5,-580,6,-580,47,-580,54,-580,134,-580,136,-580,74,-580,72,-580,41,-580,38,-580,8,-580,17,-580,18,-580,137,-580,139,-580,138,-580,147,-580,149,-580,148,-580,53,-580,84,-580,36,-580,21,-580,90,-580,50,-580,31,-580,51,-580,95,-580,43,-580,32,-580,49,-580,56,-580,71,-580,69,-580,34,-580,67,-580,68,-580},new int[]{-182,135});
    states[135] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-93,136,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,574,-251,567});
    states[136] = new State(new int[]{109,303,108,304,121,305,122,306,119,307,113,-602,118,-602,116,-602,114,-602,117,-602,115,-602,130,-602,15,-602,13,-602,85,-602,10,-602,91,-602,94,-602,29,-602,97,-602,28,-602,93,-602,12,-602,9,-602,92,-602,80,-602,79,-602,2,-602,78,-602,77,-602,76,-602,75,-602,5,-602,6,-602,47,-602,54,-602,134,-602,136,-602,74,-602,72,-602,41,-602,38,-602,8,-602,17,-602,18,-602,137,-602,139,-602,138,-602,147,-602,149,-602,148,-602,53,-602,84,-602,36,-602,21,-602,90,-602,50,-602,31,-602,51,-602,95,-602,43,-602,32,-602,49,-602,56,-602,71,-602,69,-602,34,-602,67,-602,68,-602},new int[]{-183,137});
    states[137] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-76,138,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,574,-251,567});
    states[138] = new State(new int[]{131,309,129,311,111,313,110,314,124,315,125,316,126,317,127,318,123,319,5,-640,109,-640,108,-640,121,-640,122,-640,119,-640,113,-640,118,-640,116,-640,114,-640,117,-640,115,-640,130,-640,15,-640,13,-640,85,-640,10,-640,91,-640,94,-640,29,-640,97,-640,28,-640,93,-640,12,-640,9,-640,92,-640,80,-640,79,-640,2,-640,78,-640,77,-640,76,-640,75,-640,6,-640,47,-640,54,-640,134,-640,136,-640,74,-640,72,-640,41,-640,38,-640,8,-640,17,-640,18,-640,137,-640,139,-640,138,-640,147,-640,149,-640,148,-640,53,-640,84,-640,36,-640,21,-640,90,-640,50,-640,31,-640,51,-640,95,-640,43,-640,32,-640,49,-640,56,-640,71,-640,69,-640,34,-640,67,-640,68,-640},new int[]{-184,139});
    states[139] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,29,41,358,38,388,8,390,17,247,18,252},new int[]{-88,140,-252,141,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-77,521});
    states[140] = new State(new int[]{131,-657,129,-657,111,-657,110,-657,124,-657,125,-657,126,-657,127,-657,123,-657,5,-657,109,-657,108,-657,121,-657,122,-657,119,-657,113,-657,118,-657,116,-657,114,-657,117,-657,115,-657,130,-657,15,-657,13,-657,85,-657,10,-657,91,-657,94,-657,29,-657,97,-657,28,-657,93,-657,12,-657,9,-657,92,-657,80,-657,79,-657,2,-657,78,-657,77,-657,76,-657,75,-657,6,-657,47,-657,54,-657,134,-657,136,-657,74,-657,72,-657,41,-657,38,-657,8,-657,17,-657,18,-657,137,-657,139,-657,138,-657,147,-657,149,-657,148,-657,53,-657,84,-657,36,-657,21,-657,90,-657,50,-657,31,-657,51,-657,95,-657,43,-657,32,-657,49,-657,56,-657,71,-657,69,-657,34,-657,67,-657,68,-657,112,-652});
    states[141] = new State(-658);
    states[142] = new State(-669);
    states[143] = new State(new int[]{7,144,131,-670,129,-670,111,-670,110,-670,124,-670,125,-670,126,-670,127,-670,123,-670,5,-670,109,-670,108,-670,121,-670,122,-670,119,-670,113,-670,118,-670,116,-670,114,-670,117,-670,115,-670,130,-670,15,-670,13,-670,85,-670,10,-670,91,-670,94,-670,29,-670,97,-670,28,-670,93,-670,12,-670,9,-670,92,-670,80,-670,79,-670,2,-670,78,-670,77,-670,76,-670,75,-670,112,-670,6,-670,47,-670,54,-670,134,-670,136,-670,74,-670,72,-670,41,-670,38,-670,8,-670,17,-670,18,-670,137,-670,139,-670,138,-670,147,-670,149,-670,148,-670,53,-670,84,-670,36,-670,21,-670,90,-670,50,-670,31,-670,51,-670,95,-670,43,-670,32,-670,49,-670,56,-670,71,-670,69,-670,34,-670,67,-670,68,-670,11,-693});
    states[144] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,78,32,77,33,76,34,75,35,65,36,60,37,121,38,18,39,17,40,59,41,19,42,122,43,123,44,124,45,125,46,126,47,127,48,128,49,129,50,130,51,131,52,20,53,70,54,84,55,21,56,22,57,25,58,26,59,27,60,68,61,92,62,28,63,29,64,30,65,23,66,97,67,94,68,31,69,32,70,33,71,36,72,37,73,38,74,96,75,39,76,40,77,42,78,43,79,44,80,90,81,45,82,95,83,46,84,24,85,47,86,67,87,91,88,48,89,49,90,50,91,51,92,52,93,53,94,54,95,55,96,57,97,98,98,99,99,102,100,100,101,101,102,58,103,71,104,34,105,35,106,41,108,85,109},new int[]{-123,145,-132,22,-136,24,-137,27,-277,30,-135,31,-278,107});
    states[145] = new State(-700);
    states[146] = new State(-677);
    states[147] = new State(new int[]{137,149,139,150,7,-718,11,-718,131,-718,129,-718,111,-718,110,-718,124,-718,125,-718,126,-718,127,-718,123,-718,5,-718,109,-718,108,-718,121,-718,122,-718,119,-718,113,-718,118,-718,116,-718,114,-718,117,-718,115,-718,130,-718,15,-718,13,-718,85,-718,10,-718,91,-718,94,-718,29,-718,97,-718,28,-718,93,-718,12,-718,9,-718,92,-718,80,-718,79,-718,2,-718,78,-718,77,-718,76,-718,75,-718,112,-718,6,-718,47,-718,54,-718,134,-718,136,-718,74,-718,72,-718,41,-718,38,-718,8,-718,17,-718,18,-718,138,-718,147,-718,149,-718,148,-718,53,-718,84,-718,36,-718,21,-718,90,-718,50,-718,31,-718,51,-718,95,-718,43,-718,32,-718,49,-718,56,-718,71,-718,69,-718,34,-718,67,-718,68,-718,120,-718,103,-718,4,-718,135,-718},new int[]{-151,148});
    states[148] = new State(-721);
    states[149] = new State(-716);
    states[150] = new State(-717);
    states[151] = new State(-720);
    states[152] = new State(-719);
    states[153] = new State(-678);
    states[154] = new State(-176);
    states[155] = new State(-177);
    states[156] = new State(-178);
    states[157] = new State(-671);
    states[158] = new State(new int[]{8,159});
    states[159] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-268,160,-166,162,-132,196,-136,24,-137,27});
    states[160] = new State(new int[]{9,161});
    states[161] = new State(-667);
    states[162] = new State(new int[]{7,163,4,166,116,168,9,-587,129,-587,131,-587,111,-587,110,-587,124,-587,125,-587,126,-587,127,-587,123,-587,109,-587,108,-587,121,-587,122,-587,113,-587,118,-587,114,-587,117,-587,115,-587,130,-587,13,-587,6,-587,93,-587,12,-587,5,-587,85,-587,10,-587,91,-587,94,-587,29,-587,97,-587,28,-587,92,-587,80,-587,79,-587,2,-587,78,-587,77,-587,76,-587,75,-587,11,-587,8,-587,119,-587,15,-587,47,-587,54,-587,134,-587,136,-587,74,-587,72,-587,41,-587,38,-587,17,-587,18,-587,137,-587,139,-587,138,-587,147,-587,149,-587,148,-587,53,-587,84,-587,36,-587,21,-587,90,-587,50,-587,31,-587,51,-587,95,-587,43,-587,32,-587,49,-587,56,-587,71,-587,69,-587,34,-587,67,-587,68,-587,112,-587},new int[]{-283,165});
    states[163] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,78,32,77,33,76,34,75,35,65,36,60,37,121,38,18,39,17,40,59,41,19,42,122,43,123,44,124,45,125,46,126,47,127,48,128,49,129,50,130,51,131,52,20,53,70,54,84,55,21,56,22,57,25,58,26,59,27,60,68,61,92,62,28,63,29,64,30,65,23,66,97,67,94,68,31,69,32,70,33,71,36,72,37,73,38,74,96,75,39,76,40,77,42,78,43,79,44,80,90,81,45,82,95,83,46,84,24,85,47,86,67,87,91,88,48,89,49,90,50,91,51,92,52,93,53,94,54,95,55,96,57,97,98,98,99,99,102,100,100,101,101,102,58,103,71,104,34,105,35,106,41,108,85,109},new int[]{-123,164,-132,22,-136,24,-137,27,-277,30,-135,31,-278,107});
    states[164] = new State(-247);
    states[165] = new State(-588);
    states[166] = new State(new int[]{116,168},new int[]{-283,167});
    states[167] = new State(-589);
    states[168] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-281,169,-263,266,-256,173,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-265,585,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,586,-209,550,-208,551,-285,587});
    states[169] = new State(new int[]{114,170,93,171});
    states[170] = new State(-221);
    states[171] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-263,172,-256,173,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-265,585,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,586,-209,550,-208,551,-285,587});
    states[172] = new State(-225);
    states[173] = new State(new int[]{13,174,114,-229,93,-229,113,-229,9,-229,10,-229,120,-229,103,-229,85,-229,91,-229,94,-229,29,-229,97,-229,28,-229,12,-229,92,-229,80,-229,79,-229,2,-229,78,-229,77,-229,76,-229,75,-229,130,-229});
    states[174] = new State(-230);
    states[175] = new State(new int[]{6,1318,109,1307,108,1308,121,1309,122,1310,13,-234,114,-234,93,-234,113,-234,9,-234,10,-234,120,-234,103,-234,85,-234,91,-234,94,-234,29,-234,97,-234,28,-234,12,-234,92,-234,80,-234,79,-234,2,-234,78,-234,77,-234,76,-234,75,-234,130,-234},new int[]{-179,176});
    states[176] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152},new int[]{-94,177,-95,268,-166,438,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151});
    states[177] = new State(new int[]{111,218,110,219,124,220,125,221,126,222,127,223,123,224,6,-238,109,-238,108,-238,121,-238,122,-238,13,-238,114,-238,93,-238,113,-238,9,-238,10,-238,120,-238,103,-238,85,-238,91,-238,94,-238,29,-238,97,-238,28,-238,12,-238,92,-238,80,-238,79,-238,2,-238,78,-238,77,-238,76,-238,75,-238,130,-238},new int[]{-181,178});
    states[178] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152},new int[]{-95,179,-166,438,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151});
    states[179] = new State(new int[]{8,180,111,-240,110,-240,124,-240,125,-240,126,-240,127,-240,123,-240,6,-240,109,-240,108,-240,121,-240,122,-240,13,-240,114,-240,93,-240,113,-240,9,-240,10,-240,120,-240,103,-240,85,-240,91,-240,94,-240,29,-240,97,-240,28,-240,12,-240,92,-240,80,-240,79,-240,2,-240,78,-240,77,-240,76,-240,75,-240,130,-240});
    states[180] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335,9,-171},new int[]{-69,181,-67,183,-86,420,-83,186,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434});
    states[181] = new State(new int[]{9,182});
    states[182] = new State(-245);
    states[183] = new State(new int[]{93,184,9,-170,12,-170});
    states[184] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-86,185,-83,186,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434});
    states[185] = new State(-173);
    states[186] = new State(new int[]{13,187,6,1291,93,-174,9,-174,12,-174,5,-174});
    states[187] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-83,188,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434});
    states[188] = new State(new int[]{5,189,13,187});
    states[189] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-83,190,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434});
    states[190] = new State(new int[]{13,187,6,-116,93,-116,9,-116,12,-116,5,-116,85,-116,10,-116,91,-116,94,-116,29,-116,97,-116,28,-116,92,-116,80,-116,79,-116,2,-116,78,-116,77,-116,76,-116,75,-116});
    states[191] = new State(new int[]{109,1307,108,1308,121,1309,122,1310,113,1311,118,1312,116,1313,114,1314,117,1315,115,1316,130,1317,13,-113,6,-113,93,-113,9,-113,12,-113,5,-113,85,-113,10,-113,91,-113,94,-113,29,-113,97,-113,28,-113,92,-113,80,-113,79,-113,2,-113,78,-113,77,-113,76,-113,75,-113},new int[]{-179,192,-178,1305});
    states[192] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-12,193,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433});
    states[193] = new State(new int[]{129,216,131,217,111,218,110,219,124,220,125,221,126,222,127,223,123,224,109,-125,108,-125,121,-125,122,-125,113,-125,118,-125,116,-125,114,-125,117,-125,115,-125,130,-125,13,-125,6,-125,93,-125,9,-125,12,-125,5,-125,85,-125,10,-125,91,-125,94,-125,29,-125,97,-125,28,-125,92,-125,80,-125,79,-125,2,-125,78,-125,77,-125,76,-125,75,-125},new int[]{-187,194,-181,197});
    states[194] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-268,195,-166,162,-132,196,-136,24,-137,27});
    states[195] = new State(-130);
    states[196] = new State(-246);
    states[197] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-10,198,-253,1304,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431});
    states[198] = new State(new int[]{112,199,129,-135,131,-135,111,-135,110,-135,124,-135,125,-135,126,-135,127,-135,123,-135,109,-135,108,-135,121,-135,122,-135,113,-135,118,-135,116,-135,114,-135,117,-135,115,-135,130,-135,13,-135,6,-135,93,-135,9,-135,12,-135,5,-135,85,-135,10,-135,91,-135,94,-135,29,-135,97,-135,28,-135,92,-135,80,-135,79,-135,2,-135,78,-135,77,-135,76,-135,75,-135});
    states[199] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-10,200,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431});
    states[200] = new State(-131);
    states[201] = new State(new int[]{4,203,11,205,7,1297,135,1299,8,1300,112,-144,129,-144,131,-144,111,-144,110,-144,124,-144,125,-144,126,-144,127,-144,123,-144,109,-144,108,-144,121,-144,122,-144,113,-144,118,-144,116,-144,114,-144,117,-144,115,-144,130,-144,13,-144,6,-144,93,-144,9,-144,12,-144,5,-144,85,-144,10,-144,91,-144,94,-144,29,-144,97,-144,28,-144,92,-144,80,-144,79,-144,2,-144,78,-144,77,-144,76,-144,75,-144},new int[]{-11,202});
    states[202] = new State(-161);
    states[203] = new State(new int[]{116,168},new int[]{-283,204});
    states[204] = new State(-162);
    states[205] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335,5,1293,12,-171},new int[]{-106,206,-69,208,-83,210,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434,-67,183,-86,420});
    states[206] = new State(new int[]{12,207});
    states[207] = new State(-163);
    states[208] = new State(new int[]{12,209});
    states[209] = new State(-167);
    states[210] = new State(new int[]{5,211,13,187,6,1291,93,-174,12,-174});
    states[211] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335,5,-623,12,-623},new int[]{-107,212,-83,1290,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434});
    states[212] = new State(new int[]{5,213,12,-628});
    states[213] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-83,214,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434});
    states[214] = new State(new int[]{13,187,12,-630});
    states[215] = new State(new int[]{129,216,131,217,111,218,110,219,124,220,125,221,126,222,127,223,123,224,109,-124,108,-124,121,-124,122,-124,113,-124,118,-124,116,-124,114,-124,117,-124,115,-124,130,-124,13,-124,6,-124,93,-124,9,-124,12,-124,5,-124,85,-124,10,-124,91,-124,94,-124,29,-124,97,-124,28,-124,92,-124,80,-124,79,-124,2,-124,78,-124,77,-124,76,-124,75,-124},new int[]{-187,194,-181,197});
    states[216] = new State(-646);
    states[217] = new State(-647);
    states[218] = new State(-137);
    states[219] = new State(-138);
    states[220] = new State(-139);
    states[221] = new State(-140);
    states[222] = new State(-141);
    states[223] = new State(-142);
    states[224] = new State(-143);
    states[225] = new State(new int[]{112,199,129,-132,131,-132,111,-132,110,-132,124,-132,125,-132,126,-132,127,-132,123,-132,109,-132,108,-132,121,-132,122,-132,113,-132,118,-132,116,-132,114,-132,117,-132,115,-132,130,-132,13,-132,6,-132,93,-132,9,-132,12,-132,5,-132,85,-132,10,-132,91,-132,94,-132,29,-132,97,-132,28,-132,92,-132,80,-132,79,-132,2,-132,78,-132,77,-132,76,-132,75,-132});
    states[226] = new State(-155);
    states[227] = new State(new int[]{22,1279,136,23,79,25,80,26,74,28,72,29,16,-750,8,-750,7,-750,135,-750,4,-750,14,-750,103,-750,104,-750,105,-750,106,-750,107,-750,85,-750,10,-750,11,-750,5,-750,91,-750,94,-750,29,-750,97,-750,120,-750,131,-750,129,-750,111,-750,110,-750,124,-750,125,-750,126,-750,127,-750,123,-750,109,-750,108,-750,121,-750,122,-750,119,-750,113,-750,118,-750,116,-750,114,-750,117,-750,115,-750,130,-750,15,-750,13,-750,28,-750,93,-750,12,-750,9,-750,92,-750,2,-750,78,-750,77,-750,76,-750,75,-750,112,-750,6,-750,47,-750,54,-750,134,-750,41,-750,38,-750,17,-750,18,-750,137,-750,139,-750,138,-750,147,-750,149,-750,148,-750,53,-750,84,-750,36,-750,21,-750,90,-750,50,-750,31,-750,51,-750,95,-750,43,-750,32,-750,49,-750,56,-750,71,-750,69,-750,34,-750,67,-750,68,-750},new int[]{-268,228,-166,162,-132,196,-136,24,-137,27});
    states[228] = new State(new int[]{11,230,8,617,85,-599,10,-599,91,-599,94,-599,29,-599,97,-599,131,-599,129,-599,111,-599,110,-599,124,-599,125,-599,126,-599,127,-599,123,-599,5,-599,109,-599,108,-599,121,-599,122,-599,119,-599,113,-599,118,-599,116,-599,114,-599,117,-599,115,-599,130,-599,15,-599,13,-599,28,-599,93,-599,12,-599,9,-599,92,-599,80,-599,79,-599,2,-599,78,-599,77,-599,76,-599,75,-599,6,-599,47,-599,54,-599,134,-599,136,-599,74,-599,72,-599,41,-599,38,-599,17,-599,18,-599,137,-599,139,-599,138,-599,147,-599,149,-599,148,-599,53,-599,84,-599,36,-599,21,-599,90,-599,50,-599,31,-599,51,-599,95,-599,43,-599,32,-599,49,-599,56,-599,71,-599,69,-599,34,-599,67,-599,68,-599,112,-599},new int[]{-65,229});
    states[229] = new State(-592);
    states[230] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,501,17,247,18,252,5,570,33,622,40,826,12,-709},new int[]{-63,231,-66,348,-82,500,-81,126,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,351,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569,-304,620,-305,621});
    states[231] = new State(new int[]{12,232});
    states[232] = new State(new int[]{8,234,85,-591,10,-591,91,-591,94,-591,29,-591,97,-591,131,-591,129,-591,111,-591,110,-591,124,-591,125,-591,126,-591,127,-591,123,-591,5,-591,109,-591,108,-591,121,-591,122,-591,119,-591,113,-591,118,-591,116,-591,114,-591,117,-591,115,-591,130,-591,15,-591,13,-591,28,-591,93,-591,12,-591,9,-591,92,-591,80,-591,79,-591,2,-591,78,-591,77,-591,76,-591,75,-591,6,-591,47,-591,54,-591,134,-591,136,-591,74,-591,72,-591,41,-591,38,-591,17,-591,18,-591,137,-591,139,-591,138,-591,147,-591,149,-591,148,-591,53,-591,84,-591,36,-591,21,-591,90,-591,50,-591,31,-591,51,-591,95,-591,43,-591,32,-591,49,-591,56,-591,71,-591,69,-591,34,-591,67,-591,68,-591,112,-591},new int[]{-5,233});
    states[233] = new State(-593);
    states[234] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,810,128,427,109,334,108,335,59,158,9,-185},new int[]{-62,235,-61,237,-79,813,-78,240,-83,241,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434,-87,821,-227,822,-53,814});
    states[235] = new State(new int[]{9,236});
    states[236] = new State(-590);
    states[237] = new State(new int[]{93,238,9,-186});
    states[238] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,810,128,427,109,334,108,335,59,158},new int[]{-79,239,-78,240,-83,241,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434,-87,821,-227,822,-53,814});
    states[239] = new State(-188);
    states[240] = new State(-401);
    states[241] = new State(new int[]{13,187,93,-179,9,-179,85,-179,10,-179,91,-179,94,-179,29,-179,97,-179,28,-179,12,-179,92,-179,80,-179,79,-179,2,-179,78,-179,77,-179,76,-179,75,-179});
    states[242] = new State(-156);
    states[243] = new State(-157);
    states[244] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-132,245,-136,24,-137,27});
    states[245] = new State(-158);
    states[246] = new State(-159);
    states[247] = new State(new int[]{8,248});
    states[248] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-268,249,-166,162,-132,196,-136,24,-137,27});
    states[249] = new State(new int[]{9,250});
    states[250] = new State(-581);
    states[251] = new State(-160);
    states[252] = new State(new int[]{8,253});
    states[253] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-268,254,-267,256,-166,258,-132,196,-136,24,-137,27});
    states[254] = new State(new int[]{9,255});
    states[255] = new State(-582);
    states[256] = new State(new int[]{9,257});
    states[257] = new State(-583);
    states[258] = new State(new int[]{7,163,4,259,116,261,118,1277,9,-587},new int[]{-283,165,-284,1278});
    states[259] = new State(new int[]{116,261,118,1277},new int[]{-283,167,-284,260});
    states[260] = new State(-586);
    states[261] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576,114,-228,93,-228},new int[]{-281,169,-282,262,-263,266,-256,173,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-265,585,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,586,-209,550,-208,551,-285,587,-264,1276});
    states[262] = new State(new int[]{114,263,93,264});
    states[263] = new State(-223);
    states[264] = new State(-228,new int[]{-264,265});
    states[265] = new State(-227);
    states[266] = new State(-224);
    states[267] = new State(new int[]{111,218,110,219,124,220,125,221,126,222,127,223,123,224,6,-237,109,-237,108,-237,121,-237,122,-237,13,-237,114,-237,93,-237,113,-237,9,-237,10,-237,120,-237,103,-237,85,-237,91,-237,94,-237,29,-237,97,-237,28,-237,12,-237,92,-237,80,-237,79,-237,2,-237,78,-237,77,-237,76,-237,75,-237,130,-237},new int[]{-181,178});
    states[268] = new State(new int[]{8,180,111,-239,110,-239,124,-239,125,-239,126,-239,127,-239,123,-239,6,-239,109,-239,108,-239,121,-239,122,-239,13,-239,114,-239,93,-239,113,-239,9,-239,10,-239,120,-239,103,-239,85,-239,91,-239,94,-239,29,-239,97,-239,28,-239,12,-239,92,-239,80,-239,79,-239,2,-239,78,-239,77,-239,76,-239,75,-239,130,-239});
    states[269] = new State(new int[]{7,163,120,270,116,168,8,-241,111,-241,110,-241,124,-241,125,-241,126,-241,127,-241,123,-241,6,-241,109,-241,108,-241,121,-241,122,-241,13,-241,114,-241,93,-241,113,-241,9,-241,10,-241,103,-241,85,-241,91,-241,94,-241,29,-241,97,-241,28,-241,12,-241,92,-241,80,-241,79,-241,2,-241,78,-241,77,-241,76,-241,75,-241,130,-241},new int[]{-283,616});
    states[270] = new State(new int[]{8,272,136,23,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-263,271,-256,173,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-265,585,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,586,-209,550,-208,551,-285,587});
    states[271] = new State(-276);
    states[272] = new State(new int[]{9,273,136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-74,278,-72,284,-260,287,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[273] = new State(new int[]{120,274,114,-280,93,-280,113,-280,9,-280,10,-280,103,-280,85,-280,91,-280,94,-280,29,-280,97,-280,28,-280,12,-280,92,-280,80,-280,79,-280,2,-280,78,-280,77,-280,76,-280,75,-280,130,-280});
    states[274] = new State(new int[]{8,276,136,23,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-263,275,-256,173,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-265,585,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,586,-209,550,-208,551,-285,587});
    states[275] = new State(-278);
    states[276] = new State(new int[]{9,277,136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-74,278,-72,284,-260,287,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[277] = new State(new int[]{120,274,114,-282,93,-282,113,-282,9,-282,10,-282,103,-282,85,-282,91,-282,94,-282,29,-282,97,-282,28,-282,12,-282,92,-282,80,-282,79,-282,2,-282,78,-282,77,-282,76,-282,75,-282,130,-282});
    states[278] = new State(new int[]{9,279,93,936});
    states[279] = new State(new int[]{120,280,13,-236,114,-236,93,-236,113,-236,9,-236,10,-236,103,-236,85,-236,91,-236,94,-236,29,-236,97,-236,28,-236,12,-236,92,-236,80,-236,79,-236,2,-236,78,-236,77,-236,76,-236,75,-236,130,-236});
    states[280] = new State(new int[]{8,282,136,23,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-263,281,-256,173,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-265,585,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,586,-209,550,-208,551,-285,587});
    states[281] = new State(-279);
    states[282] = new State(new int[]{9,283,136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-74,278,-72,284,-260,287,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[283] = new State(new int[]{120,274,114,-283,93,-283,113,-283,9,-283,10,-283,103,-283,85,-283,91,-283,94,-283,29,-283,97,-283,28,-283,12,-283,92,-283,80,-283,79,-283,2,-283,78,-283,77,-283,76,-283,75,-283,130,-283});
    states[284] = new State(new int[]{93,285});
    states[285] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-72,286,-260,287,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[286] = new State(-248);
    states[287] = new State(new int[]{113,288,93,-250,9,-250});
    states[288] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-81,289,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[289] = new State(-251);
    states[290] = new State(new int[]{113,291,118,292,116,293,114,294,117,295,115,296,130,297,15,-579,13,-579,85,-579,10,-579,91,-579,94,-579,29,-579,97,-579,28,-579,93,-579,12,-579,9,-579,92,-579,80,-579,79,-579,2,-579,78,-579,77,-579,76,-579,75,-579,5,-579,6,-579,47,-579,54,-579,134,-579,136,-579,74,-579,72,-579,41,-579,38,-579,8,-579,17,-579,18,-579,137,-579,139,-579,138,-579,147,-579,149,-579,148,-579,53,-579,84,-579,36,-579,21,-579,90,-579,50,-579,31,-579,51,-579,95,-579,43,-579,32,-579,49,-579,56,-579,71,-579,69,-579,34,-579,67,-579,68,-579},new int[]{-182,135});
    states[291] = new State(-632);
    states[292] = new State(-633);
    states[293] = new State(-634);
    states[294] = new State(-635);
    states[295] = new State(-636);
    states[296] = new State(-637);
    states[297] = new State(-638);
    states[298] = new State(new int[]{5,299,109,303,108,304,121,305,122,306,119,307,113,-601,118,-601,116,-601,114,-601,117,-601,115,-601,130,-601,15,-601,13,-601,85,-601,10,-601,91,-601,94,-601,29,-601,97,-601,28,-601,93,-601,12,-601,9,-601,92,-601,80,-601,79,-601,2,-601,78,-601,77,-601,76,-601,75,-601,6,-601},new int[]{-183,137});
    states[299] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,-621,85,-621,10,-621,91,-621,94,-621,29,-621,97,-621,28,-621,93,-621,12,-621,9,-621,92,-621,2,-621,78,-621,77,-621,76,-621,75,-621,6,-621},new int[]{-102,300,-93,575,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,574,-251,567});
    states[300] = new State(new int[]{5,301,85,-624,10,-624,91,-624,94,-624,29,-624,97,-624,28,-624,93,-624,12,-624,9,-624,92,-624,80,-624,79,-624,2,-624,78,-624,77,-624,76,-624,75,-624,6,-624});
    states[301] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-93,302,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,574,-251,567});
    states[302] = new State(new int[]{109,303,108,304,121,305,122,306,119,307,85,-626,10,-626,91,-626,94,-626,29,-626,97,-626,28,-626,93,-626,12,-626,9,-626,92,-626,80,-626,79,-626,2,-626,78,-626,77,-626,76,-626,75,-626,6,-626},new int[]{-183,137});
    states[303] = new State(-641);
    states[304] = new State(-642);
    states[305] = new State(-643);
    states[306] = new State(-644);
    states[307] = new State(-645);
    states[308] = new State(new int[]{131,309,129,311,111,313,110,314,124,315,125,316,126,317,127,318,123,319,5,-639,109,-639,108,-639,121,-639,122,-639,119,-639,113,-639,118,-639,116,-639,114,-639,117,-639,115,-639,130,-639,15,-639,13,-639,85,-639,10,-639,91,-639,94,-639,29,-639,97,-639,28,-639,93,-639,12,-639,9,-639,92,-639,80,-639,79,-639,2,-639,78,-639,77,-639,76,-639,75,-639,6,-639,47,-639,54,-639,134,-639,136,-639,74,-639,72,-639,41,-639,38,-639,8,-639,17,-639,18,-639,137,-639,139,-639,138,-639,147,-639,149,-639,148,-639,53,-639,84,-639,36,-639,21,-639,90,-639,50,-639,31,-639,51,-639,95,-639,43,-639,32,-639,49,-639,56,-639,71,-639,69,-639,34,-639,67,-639,68,-639},new int[]{-184,139});
    states[309] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-268,310,-166,162,-132,196,-136,24,-137,27});
    states[310] = new State(-651);
    states[311] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-268,312,-166,162,-132,196,-136,24,-137,27});
    states[312] = new State(-650);
    states[313] = new State(-660);
    states[314] = new State(-661);
    states[315] = new State(-662);
    states[316] = new State(-663);
    states[317] = new State(-664);
    states[318] = new State(-665);
    states[319] = new State(-666);
    states[320] = new State(new int[]{131,-654,129,-654,111,-654,110,-654,124,-654,125,-654,126,-654,127,-654,123,-654,5,-654,109,-654,108,-654,121,-654,122,-654,119,-654,113,-654,118,-654,116,-654,114,-654,117,-654,115,-654,130,-654,15,-654,13,-654,85,-654,10,-654,91,-654,94,-654,29,-654,97,-654,28,-654,93,-654,12,-654,9,-654,92,-654,80,-654,79,-654,2,-654,78,-654,77,-654,76,-654,75,-654,6,-654,47,-654,54,-654,134,-654,136,-654,74,-654,72,-654,41,-654,38,-654,8,-654,17,-654,18,-654,137,-654,139,-654,138,-654,147,-654,149,-654,148,-654,53,-654,84,-654,36,-654,21,-654,90,-654,50,-654,31,-654,51,-654,95,-654,43,-654,32,-654,49,-654,56,-654,71,-654,69,-654,34,-654,67,-654,68,-654,112,-652});
    states[321] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570,12,-711},new int[]{-64,322,-71,324,-84,1275,-81,327,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[322] = new State(new int[]{12,323});
    states[323] = new State(-672);
    states[324] = new State(new int[]{93,325,12,-710});
    states[325] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-84,326,-81,327,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[326] = new State(-713);
    states[327] = new State(new int[]{6,328,93,-714,12,-714});
    states[328] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-81,329,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[329] = new State(-715);
    states[330] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,29,41,358,38,388,8,390,17,247,18,252},new int[]{-88,331,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518});
    states[331] = new State(-673);
    states[332] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,29,41,358,38,388,8,390,17,247,18,252},new int[]{-88,333,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518});
    states[333] = new State(-674);
    states[334] = new State(-153);
    states[335] = new State(-154);
    states[336] = new State(-675);
    states[337] = new State(new int[]{134,1274,136,23,79,25,80,26,74,28,72,29,41,358,38,388,8,390,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156},new int[]{-99,338,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636});
    states[338] = new State(new int[]{16,339,8,345,7,970,135,972,4,973,103,-681,104,-681,105,-681,106,-681,107,-681,85,-681,10,-681,91,-681,94,-681,29,-681,97,-681,131,-681,129,-681,111,-681,110,-681,124,-681,125,-681,126,-681,127,-681,123,-681,5,-681,109,-681,108,-681,121,-681,122,-681,119,-681,113,-681,118,-681,116,-681,114,-681,117,-681,115,-681,130,-681,15,-681,13,-681,28,-681,93,-681,12,-681,9,-681,92,-681,80,-681,79,-681,2,-681,78,-681,77,-681,76,-681,75,-681,112,-681,6,-681,47,-681,54,-681,134,-681,136,-681,74,-681,72,-681,41,-681,38,-681,17,-681,18,-681,137,-681,139,-681,138,-681,147,-681,149,-681,148,-681,53,-681,84,-681,36,-681,21,-681,90,-681,50,-681,31,-681,51,-681,95,-681,43,-681,32,-681,49,-681,56,-681,71,-681,69,-681,34,-681,67,-681,68,-681,11,-692});
    states[339] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-105,340,-93,342,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,574,-251,567});
    states[340] = new State(new int[]{12,341});
    states[341] = new State(-702);
    states[342] = new State(new int[]{5,299,109,303,108,304,121,305,122,306,119,307},new int[]{-183,137});
    states[343] = new State(-684);
    states[344] = new State(new int[]{16,339,8,345,7,970,135,972,4,973,14,976,103,-682,104,-682,105,-682,106,-682,107,-682,85,-682,10,-682,91,-682,94,-682,29,-682,97,-682,131,-682,129,-682,111,-682,110,-682,124,-682,125,-682,126,-682,127,-682,123,-682,5,-682,109,-682,108,-682,121,-682,122,-682,119,-682,113,-682,118,-682,116,-682,114,-682,117,-682,115,-682,130,-682,15,-682,13,-682,28,-682,93,-682,12,-682,9,-682,92,-682,80,-682,79,-682,2,-682,78,-682,77,-682,76,-682,75,-682,112,-682,6,-682,47,-682,54,-682,134,-682,136,-682,74,-682,72,-682,41,-682,38,-682,17,-682,18,-682,137,-682,139,-682,138,-682,147,-682,149,-682,148,-682,53,-682,84,-682,36,-682,21,-682,90,-682,50,-682,31,-682,51,-682,95,-682,43,-682,32,-682,49,-682,56,-682,71,-682,69,-682,34,-682,67,-682,68,-682,11,-692});
    states[345] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,501,17,247,18,252,5,570,33,622,40,826,9,-709},new int[]{-63,346,-66,348,-82,500,-81,126,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,351,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569,-304,620,-305,621});
    states[346] = new State(new int[]{9,347});
    states[347] = new State(-703);
    states[348] = new State(new int[]{93,349,12,-708,9,-708});
    states[349] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,501,17,247,18,252,5,570,33,622,40,826},new int[]{-82,350,-81,126,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,351,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569,-304,620,-305,621});
    states[350] = new State(-568);
    states[351] = new State(new int[]{120,352,16,-694,8,-694,7,-694,135,-694,4,-694,14,-694,131,-694,129,-694,111,-694,110,-694,124,-694,125,-694,126,-694,127,-694,123,-694,5,-694,109,-694,108,-694,121,-694,122,-694,119,-694,113,-694,118,-694,116,-694,114,-694,117,-694,115,-694,130,-694,15,-694,13,-694,85,-694,10,-694,91,-694,94,-694,29,-694,97,-694,28,-694,93,-694,12,-694,9,-694,92,-694,80,-694,79,-694,2,-694,78,-694,77,-694,76,-694,75,-694,112,-694,11,-694});
    states[352] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,84,116,36,629,50,669,90,664,31,674,32,700,69,732,21,647,95,690,56,740,71,791,43,697},new int[]{-310,353,-91,354,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-312,626,-239,627,-138,628,-300,727,-231,728,-109,729,-108,730,-110,731,-32,787,-286,788,-154,789,-111,790,-232,792});
    states[353] = new State(-857);
    states[354] = new State(new int[]{13,128,85,-892,10,-892,91,-892,94,-892,29,-892,97,-892,28,-892,93,-892,12,-892,9,-892,92,-892,80,-892,79,-892,2,-892,78,-892,77,-892,76,-892,75,-892});
    states[355] = new State(new int[]{109,303,108,304,121,305,122,306,119,307,113,-601,118,-601,116,-601,114,-601,117,-601,115,-601,130,-601,15,-601,5,-601,13,-601,85,-601,10,-601,91,-601,94,-601,29,-601,97,-601,28,-601,93,-601,12,-601,9,-601,92,-601,80,-601,79,-601,2,-601,78,-601,77,-601,76,-601,75,-601,6,-601,47,-601,54,-601,134,-601,136,-601,74,-601,72,-601,41,-601,38,-601,8,-601,17,-601,18,-601,137,-601,139,-601,138,-601,147,-601,149,-601,148,-601,53,-601,84,-601,36,-601,21,-601,90,-601,50,-601,31,-601,51,-601,95,-601,43,-601,32,-601,49,-601,56,-601,71,-601,69,-601,34,-601,67,-601,68,-601},new int[]{-183,137});
    states[356] = new State(-694);
    states[357] = new State(-695);
    states[358] = new State(new int[]{108,360,109,361,110,362,111,363,113,364,114,365,115,366,116,367,117,368,118,369,121,370,122,371,123,372,124,373,125,374,126,375,127,376,128,377,130,378,132,379,133,380,103,382,104,383,105,384,106,385,107,386,112,387},new int[]{-186,359,-180,381});
    states[359] = new State(-722);
    states[360] = new State(-829);
    states[361] = new State(-830);
    states[362] = new State(-831);
    states[363] = new State(-832);
    states[364] = new State(-833);
    states[365] = new State(-834);
    states[366] = new State(-835);
    states[367] = new State(-836);
    states[368] = new State(-837);
    states[369] = new State(-838);
    states[370] = new State(-839);
    states[371] = new State(-840);
    states[372] = new State(-841);
    states[373] = new State(-842);
    states[374] = new State(-843);
    states[375] = new State(-844);
    states[376] = new State(-845);
    states[377] = new State(-846);
    states[378] = new State(-847);
    states[379] = new State(-848);
    states[380] = new State(-849);
    states[381] = new State(-850);
    states[382] = new State(-852);
    states[383] = new State(-853);
    states[384] = new State(-854);
    states[385] = new State(-855);
    states[386] = new State(-856);
    states[387] = new State(-851);
    states[388] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-132,389,-136,24,-137,27});
    states[389] = new State(-696);
    states[390] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-81,391,-91,393,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[391] = new State(new int[]{9,392});
    states[392] = new State(-697);
    states[393] = new State(new int[]{93,394,13,128,9,-573});
    states[394] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-73,395,-91,944,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[395] = new State(new int[]{93,942,5,407,10,-876,9,-876},new int[]{-306,396});
    states[396] = new State(new int[]{10,399,9,-864},new int[]{-313,397});
    states[397] = new State(new int[]{9,398});
    states[398] = new State(-668);
    states[399] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-308,400,-309,841,-143,403,-132,717,-136,24,-137,27});
    states[400] = new State(new int[]{10,401,9,-865});
    states[401] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-309,402,-143,403,-132,717,-136,24,-137,27});
    states[402] = new State(-874);
    states[403] = new State(new int[]{93,405,5,407,10,-876,9,-876},new int[]{-306,404});
    states[404] = new State(-875);
    states[405] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-132,406,-136,24,-137,27});
    states[406] = new State(-332);
    states[407] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-259,408,-260,409,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[408] = new State(-877);
    states[409] = new State(-465);
    states[410] = new State(new int[]{13,411,113,-213,93,-213,9,-213,10,-213,120,-213,114,-213,103,-213,85,-213,91,-213,94,-213,29,-213,97,-213,28,-213,12,-213,92,-213,80,-213,79,-213,2,-213,78,-213,77,-213,76,-213,75,-213,130,-213});
    states[411] = new State(-212);
    states[412] = new State(new int[]{11,413,7,-729,120,-729,116,-729,8,-729,111,-729,110,-729,124,-729,125,-729,126,-729,127,-729,123,-729,6,-729,109,-729,108,-729,121,-729,122,-729,13,-729,113,-729,93,-729,9,-729,10,-729,114,-729,103,-729,85,-729,91,-729,94,-729,29,-729,97,-729,28,-729,12,-729,92,-729,80,-729,79,-729,2,-729,78,-729,77,-729,76,-729,75,-729,130,-729});
    states[413] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-83,414,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434});
    states[414] = new State(new int[]{12,415,13,187});
    states[415] = new State(-271);
    states[416] = new State(-145);
    states[417] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335,12,-171},new int[]{-69,418,-67,183,-86,420,-83,186,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434});
    states[418] = new State(new int[]{12,419});
    states[419] = new State(-152);
    states[420] = new State(-172);
    states[421] = new State(-146);
    states[422] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-10,423,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431});
    states[423] = new State(-147);
    states[424] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-83,425,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434});
    states[425] = new State(new int[]{9,426,13,187});
    states[426] = new State(-148);
    states[427] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-10,428,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431});
    states[428] = new State(-149);
    states[429] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-10,430,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431});
    states[430] = new State(-150);
    states[431] = new State(-151);
    states[432] = new State(-133);
    states[433] = new State(-134);
    states[434] = new State(-115);
    states[435] = new State(-242);
    states[436] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152},new int[]{-95,437,-166,438,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151});
    states[437] = new State(new int[]{8,180,111,-243,110,-243,124,-243,125,-243,126,-243,127,-243,123,-243,6,-243,109,-243,108,-243,121,-243,122,-243,13,-243,114,-243,93,-243,113,-243,9,-243,10,-243,120,-243,103,-243,85,-243,91,-243,94,-243,29,-243,97,-243,28,-243,12,-243,92,-243,80,-243,79,-243,2,-243,78,-243,77,-243,76,-243,75,-243,130,-243});
    states[438] = new State(new int[]{7,163,8,-241,111,-241,110,-241,124,-241,125,-241,126,-241,127,-241,123,-241,6,-241,109,-241,108,-241,121,-241,122,-241,13,-241,114,-241,93,-241,113,-241,9,-241,10,-241,120,-241,103,-241,85,-241,91,-241,94,-241,29,-241,97,-241,28,-241,12,-241,92,-241,80,-241,79,-241,2,-241,78,-241,77,-241,76,-241,75,-241,130,-241});
    states[439] = new State(-244);
    states[440] = new State(new int[]{9,441,136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-74,278,-72,284,-260,287,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[441] = new State(new int[]{120,274});
    states[442] = new State(-214);
    states[443] = new State(-215);
    states[444] = new State(-216);
    states[445] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-259,446,-260,409,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[446] = new State(-252);
    states[447] = new State(-217);
    states[448] = new State(-253);
    states[449] = new State(-255);
    states[450] = new State(new int[]{11,451,54,1272});
    states[451] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,933,12,-267,93,-267},new int[]{-149,452,-255,1271,-256,1270,-85,175,-94,267,-95,268,-166,438,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151});
    states[452] = new State(new int[]{12,453,93,1268});
    states[453] = new State(new int[]{54,454});
    states[454] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-260,455,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[455] = new State(-261);
    states[456] = new State(-262);
    states[457] = new State(-256);
    states[458] = new State(new int[]{8,1149,19,-303,11,-303,85,-303,78,-303,77,-303,76,-303,75,-303,25,-303,136,-303,79,-303,80,-303,74,-303,72,-303,58,-303,24,-303,22,-303,40,-303,33,-303,26,-303,27,-303,42,-303},new int[]{-169,459});
    states[459] = new State(new int[]{19,1140,11,-310,85,-310,78,-310,77,-310,76,-310,75,-310,25,-310,136,-310,79,-310,80,-310,74,-310,72,-310,58,-310,24,-310,22,-310,40,-310,33,-310,26,-310,27,-310,42,-310},new int[]{-299,460,-298,1138,-297,1160});
    states[460] = new State(new int[]{11,608,85,-327,78,-327,77,-327,76,-327,75,-327,25,-199,136,-199,79,-199,80,-199,74,-199,72,-199,58,-199,24,-199,22,-199,40,-199,33,-199,26,-199,27,-199,42,-199},new int[]{-22,461,-29,1118,-31,465,-41,1119,-6,1120,-234,919,-30,1225,-50,1227,-49,471,-51,1226});
    states[461] = new State(new int[]{85,462,78,1114,77,1115,76,1116,75,1117},new int[]{-7,463});
    states[462] = new State(-285);
    states[463] = new State(new int[]{11,608,85,-327,78,-327,77,-327,76,-327,75,-327,25,-199,136,-199,79,-199,80,-199,74,-199,72,-199,58,-199,24,-199,22,-199,40,-199,33,-199,26,-199,27,-199,42,-199},new int[]{-29,464,-31,465,-41,1119,-6,1120,-234,919,-30,1225,-50,1227,-49,471,-51,1226});
    states[464] = new State(-322);
    states[465] = new State(new int[]{10,467,85,-333,78,-333,77,-333,76,-333,75,-333},new int[]{-176,466});
    states[466] = new State(-328);
    states[467] = new State(new int[]{11,608,85,-334,78,-334,77,-334,76,-334,75,-334,25,-199,136,-199,79,-199,80,-199,74,-199,72,-199,58,-199,24,-199,22,-199,40,-199,33,-199,26,-199,27,-199,42,-199},new int[]{-41,468,-30,469,-6,1120,-234,919,-50,1227,-49,471,-51,1226});
    states[468] = new State(-336);
    states[469] = new State(new int[]{11,608,85,-330,78,-330,77,-330,76,-330,75,-330,24,-199,22,-199,40,-199,33,-199,26,-199,27,-199,42,-199},new int[]{-50,470,-49,471,-6,472,-234,919,-51,1226});
    states[470] = new State(-339);
    states[471] = new State(-340);
    states[472] = new State(new int[]{24,1187,22,1188,40,1133,33,1168,26,1202,27,1209,11,608,42,1216},new int[]{-207,473,-234,474,-204,475,-242,476,-3,477,-215,1189,-213,1062,-210,1132,-214,1167,-212,1190,-200,1213,-201,1214,-203,1215});
    states[473] = new State(-349);
    states[474] = new State(-198);
    states[475] = new State(-350);
    states[476] = new State(-368);
    states[477] = new State(new int[]{26,479,42,1020,40,1133,33,1168},new int[]{-215,478,-201,1019,-213,1062,-210,1132,-214,1167});
    states[478] = new State(-353);
    states[479] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,41,358,8,-363,103,-363,10,-363},new int[]{-157,480,-156,1002,-155,1003,-127,1004,-122,1005,-119,1006,-132,1011,-136,24,-137,27,-177,1012,-316,1014,-134,1018});
    states[480] = new State(new int[]{8,554,103,-449,10,-449},new int[]{-113,481});
    states[481] = new State(new int[]{103,483,10,991},new int[]{-193,482});
    states[482] = new State(-360);
    states[483] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473},new int[]{-244,484,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[484] = new State(new int[]{10,485});
    states[485] = new State(-408);
    states[486] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,85,-549,10,-549,91,-549,94,-549,29,-549,97,-549,28,-549,93,-549,12,-549,9,-549,92,-549,2,-549,78,-549,77,-549,76,-549,75,-549},new int[]{-132,389,-136,24,-137,27});
    states[487] = new State(new int[]{49,979,52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-81,391,-91,393,-99,488,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[488] = new State(new int[]{93,489,16,339,8,345,7,970,135,972,4,973,14,976,131,-682,129,-682,111,-682,110,-682,124,-682,125,-682,126,-682,127,-682,123,-682,5,-682,109,-682,108,-682,121,-682,122,-682,119,-682,113,-682,118,-682,116,-682,114,-682,117,-682,115,-682,130,-682,15,-682,13,-682,9,-682,112,-682,11,-692});
    states[489] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,41,358,38,388,8,390,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156},new int[]{-318,490,-99,975,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636});
    states[490] = new State(new int[]{9,491,93,968});
    states[491] = new State(new int[]{103,382,104,383,105,384,106,385,107,386},new int[]{-180,492});
    states[492] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-81,493,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[493] = new State(-502);
    states[494] = new State(-698);
    states[495] = new State(-699);
    states[496] = new State(new int[]{11,497});
    states[497] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,501,17,247,18,252,5,570,33,622,40,826},new int[]{-66,498,-82,500,-81,126,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,351,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569,-304,620,-305,621});
    states[498] = new State(new int[]{12,499,93,349});
    states[499] = new State(-701);
    states[500] = new State(-567);
    states[501] = new State(new int[]{9,945,52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-81,391,-91,502,-132,949,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[502] = new State(new int[]{93,503,13,128,9,-573});
    states[503] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-73,504,-91,944,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[504] = new State(new int[]{93,942,5,407,10,-876,9,-876},new int[]{-306,505});
    states[505] = new State(new int[]{10,399,9,-864},new int[]{-313,506});
    states[506] = new State(new int[]{9,507});
    states[507] = new State(new int[]{5,929,7,-668,131,-668,129,-668,111,-668,110,-668,124,-668,125,-668,126,-668,127,-668,123,-668,109,-668,108,-668,121,-668,122,-668,119,-668,113,-668,118,-668,116,-668,114,-668,117,-668,115,-668,130,-668,15,-668,13,-668,85,-668,10,-668,91,-668,94,-668,29,-668,97,-668,28,-668,93,-668,12,-668,9,-668,92,-668,80,-668,79,-668,2,-668,78,-668,77,-668,76,-668,75,-668,112,-668,120,-878},new int[]{-317,508,-307,509});
    states[508] = new State(-862);
    states[509] = new State(new int[]{120,510});
    states[510] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,84,116,36,629,50,669,90,664,31,674,32,700,69,732,21,647,95,690,56,740,71,791,43,697},new int[]{-310,511,-91,354,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-312,626,-239,627,-138,628,-300,727,-231,728,-109,729,-108,730,-110,731,-32,787,-286,788,-154,789,-111,790,-232,792});
    states[511] = new State(-866);
    states[512] = new State(new int[]{7,513,131,-676,129,-676,111,-676,110,-676,124,-676,125,-676,126,-676,127,-676,123,-676,5,-676,109,-676,108,-676,121,-676,122,-676,119,-676,113,-676,118,-676,116,-676,114,-676,117,-676,115,-676,130,-676,15,-676,13,-676,85,-676,10,-676,91,-676,94,-676,29,-676,97,-676,28,-676,93,-676,12,-676,9,-676,92,-676,80,-676,79,-676,2,-676,78,-676,77,-676,76,-676,75,-676,112,-676,6,-676,47,-676,54,-676,134,-676,136,-676,74,-676,72,-676,41,-676,38,-676,8,-676,17,-676,18,-676,137,-676,139,-676,138,-676,147,-676,149,-676,148,-676,53,-676,84,-676,36,-676,21,-676,90,-676,50,-676,31,-676,51,-676,95,-676,43,-676,32,-676,49,-676,56,-676,71,-676,69,-676,34,-676,67,-676,68,-676});
    states[513] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,78,32,77,33,76,34,75,35,65,36,60,37,121,38,18,39,17,40,59,41,19,42,122,43,123,44,124,45,125,46,126,47,127,48,128,49,129,50,130,51,131,52,20,53,70,54,84,55,21,56,22,57,25,58,26,59,27,60,68,61,92,62,28,63,29,64,30,65,23,66,97,67,94,68,31,69,32,70,33,71,36,72,37,73,38,74,96,75,39,76,40,77,42,78,43,79,44,80,90,81,45,82,95,83,46,84,24,85,47,86,67,87,91,88,48,89,49,90,50,91,51,92,52,93,53,94,54,95,55,96,57,97,98,98,99,99,102,100,100,101,101,102,58,103,71,104,34,105,35,106,41,358},new int[]{-133,514,-132,515,-136,24,-137,27,-277,516,-135,31,-177,517});
    states[514] = new State(-705);
    states[515] = new State(-735);
    states[516] = new State(-736);
    states[517] = new State(-737);
    states[518] = new State(-683);
    states[519] = new State(-655);
    states[520] = new State(-656);
    states[521] = new State(new int[]{112,522});
    states[522] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,29,41,358,38,388,8,390,17,247,18,252},new int[]{-88,523,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518});
    states[523] = new State(-653);
    states[524] = new State(-659);
    states[525] = new State(new int[]{8,526,131,-648,129,-648,111,-648,110,-648,124,-648,125,-648,126,-648,127,-648,123,-648,5,-648,109,-648,108,-648,121,-648,122,-648,119,-648,113,-648,118,-648,116,-648,114,-648,117,-648,115,-648,130,-648,15,-648,13,-648,85,-648,10,-648,91,-648,94,-648,29,-648,97,-648,28,-648,93,-648,12,-648,9,-648,92,-648,80,-648,79,-648,2,-648,78,-648,77,-648,76,-648,75,-648,6,-648,47,-648,54,-648,134,-648,136,-648,74,-648,72,-648,41,-648,38,-648,17,-648,18,-648,137,-648,139,-648,138,-648,147,-648,149,-648,148,-648,53,-648,84,-648,36,-648,21,-648,90,-648,50,-648,31,-648,51,-648,95,-648,43,-648,32,-648,49,-648,56,-648,71,-648,69,-648,34,-648,67,-648,68,-648});
    states[526] = new State(new int[]{49,531,136,23,79,25,80,26,74,28,72,29},new int[]{-328,527,-326,928,-321,921,-268,922,-166,162,-132,196,-136,24,-137,27});
    states[527] = new State(new int[]{9,528,10,529,93,926});
    states[528] = new State(-603);
    states[529] = new State(new int[]{49,531,136,23,79,25,80,26,74,28,72,29},new int[]{-326,530,-321,921,-268,922,-166,162,-132,196,-136,24,-137,27});
    states[530] = new State(-610);
    states[531] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-132,532,-136,24,-137,27});
    states[532] = new State(new int[]{5,533,9,-613,10,-613,93,-613});
    states[533] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-260,534,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[534] = new State(-612);
    states[535] = new State(-257);
    states[536] = new State(new int[]{54,537});
    states[537] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-260,538,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[538] = new State(-268);
    states[539] = new State(-258);
    states[540] = new State(new int[]{54,541,114,-270,93,-270,113,-270,9,-270,10,-270,120,-270,103,-270,85,-270,91,-270,94,-270,29,-270,97,-270,28,-270,12,-270,92,-270,80,-270,79,-270,2,-270,78,-270,77,-270,76,-270,75,-270,130,-270});
    states[541] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-260,542,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[542] = new State(-269);
    states[543] = new State(-259);
    states[544] = new State(new int[]{54,545});
    states[545] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-260,546,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[546] = new State(-260);
    states[547] = new State(new int[]{20,450,44,458,45,536,30,540,70,544},new int[]{-266,548,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543});
    states[548] = new State(-254);
    states[549] = new State(-218);
    states[550] = new State(-272);
    states[551] = new State(-273);
    states[552] = new State(new int[]{8,554,114,-449,93,-449,113,-449,9,-449,10,-449,120,-449,103,-449,85,-449,91,-449,94,-449,29,-449,97,-449,28,-449,12,-449,92,-449,80,-449,79,-449,2,-449,78,-449,77,-449,76,-449,75,-449,130,-449},new int[]{-113,553});
    states[553] = new State(-274);
    states[554] = new State(new int[]{9,555,11,608,136,-199,79,-199,80,-199,74,-199,72,-199,49,-199,25,-199,101,-199},new int[]{-114,556,-52,920,-6,560,-234,919});
    states[555] = new State(-450);
    states[556] = new State(new int[]{9,557,10,558});
    states[557] = new State(-451);
    states[558] = new State(new int[]{11,608,136,-199,79,-199,80,-199,74,-199,72,-199,49,-199,25,-199,101,-199},new int[]{-52,559,-6,560,-234,919});
    states[559] = new State(-453);
    states[560] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,49,592,25,598,101,604,11,608},new int[]{-280,561,-234,474,-144,562,-120,591,-132,590,-136,24,-137,27});
    states[561] = new State(-454);
    states[562] = new State(new int[]{5,563,93,588});
    states[563] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-259,564,-260,409,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[564] = new State(new int[]{103,565,9,-455,10,-455});
    states[565] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-81,566,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[566] = new State(-459);
    states[567] = new State(-649);
    states[568] = new State(-576);
    states[569] = new State(-574);
    states[570] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,-621,85,-621,10,-621,91,-621,94,-621,29,-621,97,-621,28,-621,93,-621,12,-621,9,-621,92,-621,2,-621,78,-621,77,-621,76,-621,75,-621,6,-621},new int[]{-102,571,-93,575,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,574,-251,567});
    states[571] = new State(new int[]{5,572,85,-625,10,-625,91,-625,94,-625,29,-625,97,-625,28,-625,93,-625,12,-625,9,-625,92,-625,80,-625,79,-625,2,-625,78,-625,77,-625,76,-625,75,-625,6,-625});
    states[572] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-93,573,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,574,-251,567});
    states[573] = new State(new int[]{109,303,108,304,121,305,122,306,119,307,85,-627,10,-627,91,-627,94,-627,29,-627,97,-627,28,-627,93,-627,12,-627,9,-627,92,-627,80,-627,79,-627,2,-627,78,-627,77,-627,76,-627,75,-627,6,-627},new int[]{-183,137});
    states[574] = new State(-648);
    states[575] = new State(new int[]{109,303,108,304,121,305,122,306,119,307,5,-620,85,-620,10,-620,91,-620,94,-620,29,-620,97,-620,28,-620,93,-620,12,-620,9,-620,92,-620,80,-620,79,-620,2,-620,78,-620,77,-620,76,-620,75,-620,6,-620},new int[]{-183,137});
    states[576] = new State(new int[]{8,554,5,-449},new int[]{-113,577});
    states[577] = new State(new int[]{5,578});
    states[578] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-259,579,-260,409,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[579] = new State(-275);
    states[580] = new State(new int[]{120,581,113,-219,93,-219,9,-219,10,-219,114,-219,103,-219,85,-219,91,-219,94,-219,29,-219,97,-219,28,-219,12,-219,92,-219,80,-219,79,-219,2,-219,78,-219,77,-219,76,-219,75,-219,130,-219});
    states[581] = new State(new int[]{8,583,136,23,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-263,582,-256,173,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-265,585,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,586,-209,550,-208,551,-285,587});
    states[582] = new State(-277);
    states[583] = new State(new int[]{9,584,136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-74,278,-72,284,-260,287,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[584] = new State(new int[]{120,274,114,-281,93,-281,113,-281,9,-281,10,-281,103,-281,85,-281,91,-281,94,-281,29,-281,97,-281,28,-281,12,-281,92,-281,80,-281,79,-281,2,-281,78,-281,77,-281,76,-281,75,-281,130,-281});
    states[585] = new State(-231);
    states[586] = new State(-232);
    states[587] = new State(new int[]{120,581,114,-233,93,-233,113,-233,9,-233,10,-233,103,-233,85,-233,91,-233,94,-233,29,-233,97,-233,28,-233,12,-233,92,-233,80,-233,79,-233,2,-233,78,-233,77,-233,76,-233,75,-233,130,-233});
    states[588] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-120,589,-132,590,-136,24,-137,27});
    states[589] = new State(-463);
    states[590] = new State(-464);
    states[591] = new State(-462);
    states[592] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-144,593,-120,591,-132,590,-136,24,-137,27});
    states[593] = new State(new int[]{5,594,93,588});
    states[594] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-259,595,-260,409,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[595] = new State(new int[]{103,596,9,-456,10,-456});
    states[596] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-81,597,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[597] = new State(-460);
    states[598] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-144,599,-120,591,-132,590,-136,24,-137,27});
    states[599] = new State(new int[]{5,600,93,588});
    states[600] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-259,601,-260,409,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[601] = new State(new int[]{103,602,9,-457,10,-457});
    states[602] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-81,603,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[603] = new State(-461);
    states[604] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-144,605,-120,591,-132,590,-136,24,-137,27});
    states[605] = new State(new int[]{5,606,93,588});
    states[606] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-259,607,-260,409,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[607] = new State(-458);
    states[608] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-235,609,-8,918,-9,613,-166,614,-132,913,-136,24,-137,27,-285,916});
    states[609] = new State(new int[]{12,610,93,611});
    states[610] = new State(-200);
    states[611] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-8,612,-9,613,-166,614,-132,913,-136,24,-137,27,-285,916});
    states[612] = new State(-202);
    states[613] = new State(-203);
    states[614] = new State(new int[]{7,163,8,617,116,168,12,-599,93,-599},new int[]{-65,615,-283,616});
    states[615] = new State(-686);
    states[616] = new State(-220);
    states[617] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,501,17,247,18,252,5,570,33,622,40,826,9,-709},new int[]{-63,618,-66,348,-82,500,-81,126,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,351,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569,-304,620,-305,621});
    states[618] = new State(new int[]{9,619});
    states[619] = new State(-600);
    states[620] = new State(-572);
    states[621] = new State(-863);
    states[622] = new State(new int[]{8,903,5,407,120,-876},new int[]{-306,623});
    states[623] = new State(new int[]{120,624});
    states[624] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,84,116,36,629,50,669,90,664,31,674,32,700,69,732,21,647,95,690,56,740,71,791,43,697},new int[]{-310,625,-91,354,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-312,626,-239,627,-138,628,-300,727,-231,728,-109,729,-108,730,-110,731,-32,787,-286,788,-154,789,-111,790,-232,792});
    states[625] = new State(-867);
    states[626] = new State(-893);
    states[627] = new State(-880);
    states[628] = new State(-881);
    states[629] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,630,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[630] = new State(new int[]{47,631,13,128});
    states[631] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473,91,-473,94,-473,29,-473,97,-473,28,-473,93,-473,12,-473,9,-473,92,-473,2,-473,78,-473,77,-473,76,-473,75,-473},new int[]{-244,632,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[632] = new State(new int[]{28,633,85,-512,10,-512,91,-512,94,-512,29,-512,97,-512,93,-512,12,-512,9,-512,92,-512,80,-512,79,-512,2,-512,78,-512,77,-512,76,-512,75,-512});
    states[633] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473,91,-473,94,-473,29,-473,97,-473,28,-473,93,-473,12,-473,9,-473,92,-473,2,-473,78,-473,77,-473,76,-473,75,-473},new int[]{-244,634,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[634] = new State(-513);
    states[635] = new State(new int[]{7,144,11,-693});
    states[636] = new State(new int[]{7,513});
    states[637] = new State(-475);
    states[638] = new State(-476);
    states[639] = new State(new int[]{147,641,148,642,136,23,79,25,80,26,74,28,72,29},new int[]{-128,640,-132,643,-136,24,-137,27});
    states[640] = new State(-508);
    states[641] = new State(-92);
    states[642] = new State(-93);
    states[643] = new State(-94);
    states[644] = new State(-477);
    states[645] = new State(-478);
    states[646] = new State(-479);
    states[647] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,648,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[648] = new State(new int[]{54,649,13,128});
    states[649] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335,28,657,85,-529},new int[]{-33,650,-237,900,-246,902,-68,893,-98,899,-86,898,-83,186,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434});
    states[650] = new State(new int[]{10,653,28,657,85,-529},new int[]{-237,651});
    states[651] = new State(new int[]{85,652});
    states[652] = new State(-520);
    states[653] = new State(new int[]{28,657,136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335,85,-529},new int[]{-237,654,-246,656,-68,893,-98,899,-86,898,-83,186,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434});
    states[654] = new State(new int[]{85,655});
    states[655] = new State(-521);
    states[656] = new State(-524);
    states[657] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,661,149,155,148,662,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473,85,-473},new int[]{-236,658,-245,659,-244,121,-4,122,-100,123,-117,337,-99,344,-132,660,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751,-128,860});
    states[658] = new State(new int[]{10,119,85,-530});
    states[659] = new State(-510);
    states[660] = new State(new int[]{16,-694,8,-694,7,-694,135,-694,4,-694,14,-694,103,-694,104,-694,105,-694,106,-694,107,-694,85,-694,10,-694,11,-694,91,-694,94,-694,29,-694,97,-694,5,-94});
    states[661] = new State(new int[]{7,-176,11,-176,5,-92});
    states[662] = new State(new int[]{7,-178,11,-178,5,-93});
    states[663] = new State(-480);
    states[664] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,661,149,155,148,662,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,91,-473,10,-473},new int[]{-236,665,-245,659,-244,121,-4,122,-100,123,-117,337,-99,344,-132,660,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751,-128,860});
    states[665] = new State(new int[]{91,666,10,119});
    states[666] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-81,667,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[667] = new State(-531);
    states[668] = new State(-481);
    states[669] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,670,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[670] = new State(new int[]{13,128,92,885,134,-534,136,-534,79,-534,80,-534,74,-534,72,-534,41,-534,38,-534,8,-534,17,-534,18,-534,137,-534,139,-534,138,-534,147,-534,149,-534,148,-534,53,-534,84,-534,36,-534,21,-534,90,-534,50,-534,31,-534,51,-534,95,-534,43,-534,32,-534,49,-534,56,-534,71,-534,69,-534,34,-534,85,-534,10,-534,91,-534,94,-534,29,-534,97,-534,28,-534,93,-534,12,-534,9,-534,2,-534,78,-534,77,-534,76,-534,75,-534},new int[]{-276,671});
    states[671] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473,91,-473,94,-473,29,-473,97,-473,28,-473,93,-473,12,-473,9,-473,92,-473,2,-473,78,-473,77,-473,76,-473,75,-473},new int[]{-244,672,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[672] = new State(-532);
    states[673] = new State(-482);
    states[674] = new State(new int[]{49,892,136,-543,79,-543,80,-543,74,-543,72,-543},new int[]{-18,675});
    states[675] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-132,676,-136,24,-137,27});
    states[676] = new State(new int[]{103,888,5,889},new int[]{-270,677});
    states[677] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,678,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[678] = new State(new int[]{13,128,67,886,68,887},new int[]{-104,679});
    states[679] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,680,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[680] = new State(new int[]{13,128,92,885,134,-534,136,-534,79,-534,80,-534,74,-534,72,-534,41,-534,38,-534,8,-534,17,-534,18,-534,137,-534,139,-534,138,-534,147,-534,149,-534,148,-534,53,-534,84,-534,36,-534,21,-534,90,-534,50,-534,31,-534,51,-534,95,-534,43,-534,32,-534,49,-534,56,-534,71,-534,69,-534,34,-534,85,-534,10,-534,91,-534,94,-534,29,-534,97,-534,28,-534,93,-534,12,-534,9,-534,2,-534,78,-534,77,-534,76,-534,75,-534},new int[]{-276,681});
    states[681] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473,91,-473,94,-473,29,-473,97,-473,28,-473,93,-473,12,-473,9,-473,92,-473,2,-473,78,-473,77,-473,76,-473,75,-473},new int[]{-244,682,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[682] = new State(-541);
    states[683] = new State(-483);
    states[684] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,501,17,247,18,252,5,570,33,622,40,826},new int[]{-66,685,-82,500,-81,126,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,351,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569,-304,620,-305,621});
    states[685] = new State(new int[]{92,686,93,349});
    states[686] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473,91,-473,94,-473,29,-473,97,-473,28,-473,93,-473,12,-473,9,-473,92,-473,2,-473,78,-473,77,-473,76,-473,75,-473},new int[]{-244,687,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[687] = new State(-548);
    states[688] = new State(-484);
    states[689] = new State(-485);
    states[690] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,661,149,155,148,662,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473,94,-473,29,-473},new int[]{-236,691,-245,659,-244,121,-4,122,-100,123,-117,337,-99,344,-132,660,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751,-128,860});
    states[691] = new State(new int[]{10,119,94,693,29,863},new int[]{-274,692});
    states[692] = new State(-550);
    states[693] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,661,149,155,148,662,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473},new int[]{-236,694,-245,659,-244,121,-4,122,-100,123,-117,337,-99,344,-132,660,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751,-128,860});
    states[694] = new State(new int[]{85,695,10,119});
    states[695] = new State(-551);
    states[696] = new State(-486);
    states[697] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570,85,-565,10,-565,91,-565,94,-565,29,-565,97,-565,28,-565,93,-565,12,-565,9,-565,92,-565,2,-565,78,-565,77,-565,76,-565,75,-565},new int[]{-81,698,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[698] = new State(-566);
    states[699] = new State(-487);
    states[700] = new State(new int[]{49,848,136,23,79,25,80,26,74,28,72,29},new int[]{-132,701,-136,24,-137,27});
    states[701] = new State(new int[]{5,846,130,-540},new int[]{-258,702});
    states[702] = new State(new int[]{130,703});
    states[703] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,704,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[704] = new State(new int[]{92,705,13,128});
    states[705] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473,91,-473,94,-473,29,-473,97,-473,28,-473,93,-473,12,-473,9,-473,92,-473,2,-473,78,-473,77,-473,76,-473,75,-473},new int[]{-244,706,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[706] = new State(-536);
    states[707] = new State(-488);
    states[708] = new State(new int[]{8,710,136,23,79,25,80,26,74,28,72,29},new int[]{-294,709,-143,718,-132,717,-136,24,-137,27});
    states[709] = new State(-498);
    states[710] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-132,711,-136,24,-137,27});
    states[711] = new State(new int[]{93,712});
    states[712] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-143,713,-132,717,-136,24,-137,27});
    states[713] = new State(new int[]{9,714,93,405});
    states[714] = new State(new int[]{103,715});
    states[715] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-81,716,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[716] = new State(-500);
    states[717] = new State(-331);
    states[718] = new State(new int[]{5,719,93,405,103,844});
    states[719] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-260,720,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[720] = new State(new int[]{103,842,113,843,85,-393,10,-393,91,-393,94,-393,29,-393,97,-393,28,-393,93,-393,12,-393,9,-393,92,-393,80,-393,79,-393,2,-393,78,-393,77,-393,76,-393,75,-393},new int[]{-320,721});
    states[721] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,793,128,427,109,334,108,335,59,158,33,622,40,826},new int[]{-80,722,-79,723,-78,240,-83,241,-75,191,-12,215,-10,225,-13,201,-132,724,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434,-87,821,-227,822,-53,814,-305,825});
    states[722] = new State(-395);
    states[723] = new State(-396);
    states[724] = new State(new int[]{120,725,4,-155,11,-155,7,-155,135,-155,8,-155,112,-155,129,-155,131,-155,111,-155,110,-155,124,-155,125,-155,126,-155,127,-155,123,-155,109,-155,108,-155,121,-155,122,-155,113,-155,118,-155,116,-155,114,-155,117,-155,115,-155,130,-155,13,-155,85,-155,10,-155,91,-155,94,-155,29,-155,97,-155,28,-155,93,-155,12,-155,9,-155,92,-155,80,-155,79,-155,2,-155,78,-155,77,-155,76,-155,75,-155});
    states[725] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,84,116,36,629,50,669,90,664,31,674,32,700,69,732,21,647,95,690,56,740,71,791,43,697},new int[]{-310,726,-91,354,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-312,626,-239,627,-138,628,-300,727,-231,728,-109,729,-108,730,-110,731,-32,787,-286,788,-154,789,-111,790,-232,792});
    states[726] = new State(-398);
    states[727] = new State(-882);
    states[728] = new State(-883);
    states[729] = new State(-884);
    states[730] = new State(-885);
    states[731] = new State(-886);
    states[732] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,733,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[733] = new State(new int[]{92,734,13,128});
    states[734] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473,91,-473,94,-473,29,-473,97,-473,28,-473,93,-473,12,-473,9,-473,92,-473,2,-473,78,-473,77,-473,76,-473,75,-473},new int[]{-244,735,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[735] = new State(-495);
    states[736] = new State(-489);
    states[737] = new State(-569);
    states[738] = new State(-570);
    states[739] = new State(-490);
    states[740] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,741,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[741] = new State(new int[]{92,742,13,128});
    states[742] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473,91,-473,94,-473,29,-473,97,-473,28,-473,93,-473,12,-473,9,-473,92,-473,2,-473,78,-473,77,-473,76,-473,75,-473},new int[]{-244,743,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[743] = new State(-535);
    states[744] = new State(-491);
    states[745] = new State(new int[]{70,747,52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,746,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[746] = new State(new int[]{13,128,85,-496,10,-496,91,-496,94,-496,29,-496,97,-496,28,-496,93,-496,12,-496,9,-496,92,-496,80,-496,79,-496,2,-496,78,-496,77,-496,76,-496,75,-496});
    states[747] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,748,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[748] = new State(new int[]{13,128,85,-497,10,-497,91,-497,94,-497,29,-497,97,-497,28,-497,93,-497,12,-497,9,-497,92,-497,80,-497,79,-497,2,-497,78,-497,77,-497,76,-497,75,-497});
    states[749] = new State(-492);
    states[750] = new State(-493);
    states[751] = new State(-494);
    states[752] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,753,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[753] = new State(new int[]{51,754,13,128});
    states[754] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-325,755,-324,786,-322,762,-268,769,-166,162,-132,196,-136,24,-137,27});
    states[755] = new State(new int[]{10,758,28,657,85,-529},new int[]{-237,756});
    states[756] = new State(new int[]{85,757});
    states[757] = new State(-514);
    states[758] = new State(new int[]{28,657,136,23,79,25,80,26,74,28,72,29,85,-529},new int[]{-237,759,-324,761,-322,762,-268,769,-166,162,-132,196,-136,24,-137,27});
    states[759] = new State(new int[]{85,760});
    states[760] = new State(-515);
    states[761] = new State(-517);
    states[762] = new State(new int[]{35,763,5,767});
    states[763] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,764,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[764] = new State(new int[]{5,765,13,128});
    states[765] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473,28,-473,85,-473},new int[]{-244,766,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[766] = new State(-518);
    states[767] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473,28,-473,85,-473},new int[]{-244,768,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[768] = new State(-519);
    states[769] = new State(new int[]{8,770});
    states[770] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,49,778},new int[]{-329,771,-327,785,-132,775,-136,24,-137,27,-322,782,-268,769,-166,162});
    states[771] = new State(new int[]{9,772,10,773,93,783});
    states[772] = new State(-605);
    states[773] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,49,778},new int[]{-327,774,-132,775,-136,24,-137,27,-322,782,-268,769,-166,162});
    states[774] = new State(-607);
    states[775] = new State(new int[]{5,776,9,-616,10,-616,93,-616,7,-246,4,-246,116,-246,8,-246});
    states[776] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-260,777,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[777] = new State(-615);
    states[778] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-132,779,-136,24,-137,27});
    states[779] = new State(new int[]{5,780,9,-618,10,-618,93,-618});
    states[780] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-260,781,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[781] = new State(-617);
    states[782] = new State(-619);
    states[783] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,49,778},new int[]{-327,784,-132,775,-136,24,-137,27,-322,782,-268,769,-166,162});
    states[784] = new State(-608);
    states[785] = new State(-606);
    states[786] = new State(-516);
    states[787] = new State(-887);
    states[788] = new State(-888);
    states[789] = new State(-889);
    states[790] = new State(-890);
    states[791] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,746,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[792] = new State(-891);
    states[793] = new State(new int[]{9,805,136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,810,128,427,109,334,108,335,59,158},new int[]{-83,794,-62,795,-227,799,-87,801,-229,803,-75,191,-12,215,-10,225,-13,201,-132,809,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434,-61,237,-79,813,-78,240,-53,814,-228,815,-230,824,-121,818});
    states[794] = new State(new int[]{9,426,13,187,93,-179});
    states[795] = new State(new int[]{9,796});
    states[796] = new State(new int[]{120,797,85,-182,10,-182,91,-182,94,-182,29,-182,97,-182,28,-182,93,-182,12,-182,9,-182,92,-182,80,-182,79,-182,2,-182,78,-182,77,-182,76,-182,75,-182});
    states[797] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,84,116,36,629,50,669,90,664,31,674,32,700,69,732,21,647,95,690,56,740,71,791,43,697},new int[]{-310,798,-91,354,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-312,626,-239,627,-138,628,-300,727,-231,728,-109,729,-108,730,-110,731,-32,787,-286,788,-154,789,-111,790,-232,792});
    states[798] = new State(-400);
    states[799] = new State(new int[]{9,800,93,-181});
    states[800] = new State(-183);
    states[801] = new State(new int[]{9,802,93,-180});
    states[802] = new State(-184);
    states[803] = new State(new int[]{9,804});
    states[804] = new State(-189);
    states[805] = new State(new int[]{5,407,120,-876},new int[]{-306,806});
    states[806] = new State(new int[]{120,807});
    states[807] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,84,116,36,629,50,669,90,664,31,674,32,700,69,732,21,647,95,690,56,740,71,791,43,697},new int[]{-310,808,-91,354,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-312,626,-239,627,-138,628,-300,727,-231,728,-109,729,-108,730,-110,731,-32,787,-286,788,-154,789,-111,790,-232,792});
    states[808] = new State(-399);
    states[809] = new State(new int[]{4,-155,11,-155,7,-155,135,-155,8,-155,112,-155,129,-155,131,-155,111,-155,110,-155,124,-155,125,-155,126,-155,127,-155,123,-155,109,-155,108,-155,121,-155,122,-155,113,-155,118,-155,116,-155,114,-155,117,-155,115,-155,130,-155,9,-155,13,-155,93,-155,5,-195});
    states[810] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,810,128,427,109,334,108,335,59,158,9,-185},new int[]{-83,794,-62,811,-227,799,-87,801,-229,803,-75,191,-12,215,-10,225,-13,201,-132,809,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434,-61,237,-79,813,-78,240,-53,814,-228,815,-230,824,-121,818});
    states[811] = new State(new int[]{9,812});
    states[812] = new State(-182);
    states[813] = new State(-187);
    states[814] = new State(-402);
    states[815] = new State(new int[]{10,816,9,-190});
    states[816] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,9,-191},new int[]{-230,817,-121,818,-132,823,-136,24,-137,27});
    states[817] = new State(-193);
    states[818] = new State(new int[]{5,819});
    states[819] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,810,128,427,109,334,108,335},new int[]{-78,820,-83,241,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434,-87,821,-227,822});
    states[820] = new State(-194);
    states[821] = new State(-180);
    states[822] = new State(-181);
    states[823] = new State(-195);
    states[824] = new State(-192);
    states[825] = new State(-397);
    states[826] = new State(new int[]{120,827,8,833});
    states[827] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,29,41,358,38,388,8,830,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,84,116,36,629,50,669,90,664,31,674,32,700,69,732,21,647,95,690,56,740,71,791,43,697},new int[]{-311,828,-197,829,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-4,831,-312,832,-239,627,-138,628,-300,727,-231,728,-109,729,-108,730,-110,731,-32,787,-286,788,-154,789,-111,790,-232,792});
    states[828] = new State(-870);
    states[829] = new State(-894);
    states[830] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-81,391,-91,393,-99,488,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[831] = new State(-895);
    states[832] = new State(-896);
    states[833] = new State(new int[]{9,834,136,23,79,25,80,26,74,28,72,29},new int[]{-308,837,-309,841,-143,403,-132,717,-136,24,-137,27});
    states[834] = new State(new int[]{120,835});
    states[835] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,29,41,358,38,388,8,830,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,84,116,36,629,50,669,90,664,31,674,32,700,69,732,21,647,95,690,56,740,71,791,43,697},new int[]{-311,836,-197,829,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-4,831,-312,832,-239,627,-138,628,-300,727,-231,728,-109,729,-108,730,-110,731,-32,787,-286,788,-154,789,-111,790,-232,792});
    states[836] = new State(-871);
    states[837] = new State(new int[]{9,838,10,401});
    states[838] = new State(new int[]{120,839});
    states[839] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,29,41,358,38,388,8,830,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,84,116,36,629,50,669,90,664,31,674,32,700,69,732,21,647,95,690,56,740,71,791,43,697},new int[]{-311,840,-197,829,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-4,831,-312,832,-239,627,-138,628,-300,727,-231,728,-109,729,-108,730,-110,731,-32,787,-286,788,-154,789,-111,790,-232,792});
    states[840] = new State(-872);
    states[841] = new State(-873);
    states[842] = new State(-391);
    states[843] = new State(-392);
    states[844] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-81,845,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[845] = new State(-394);
    states[846] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-260,847,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[847] = new State(-539);
    states[848] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-132,849,-136,24,-137,27});
    states[849] = new State(new int[]{5,850,130,856});
    states[850] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-260,851,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[851] = new State(new int[]{130,852});
    states[852] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,853,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[853] = new State(new int[]{92,854,13,128});
    states[854] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473,91,-473,94,-473,29,-473,97,-473,28,-473,93,-473,12,-473,9,-473,92,-473,2,-473,78,-473,77,-473,76,-473,75,-473},new int[]{-244,855,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[855] = new State(-537);
    states[856] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,857,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[857] = new State(new int[]{92,858,13,128});
    states[858] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473,91,-473,94,-473,29,-473,97,-473,28,-473,93,-473,12,-473,9,-473,92,-473,2,-473,78,-473,77,-473,76,-473,75,-473},new int[]{-244,859,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[859] = new State(-538);
    states[860] = new State(new int[]{5,861});
    states[861] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,661,149,155,148,662,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473,91,-473,94,-473,29,-473,97,-473},new int[]{-245,862,-244,121,-4,122,-100,123,-117,337,-99,344,-132,660,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751,-128,860});
    states[862] = new State(-472);
    states[863] = new State(new int[]{73,871,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,661,149,155,148,662,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473,85,-473},new int[]{-56,864,-59,866,-58,883,-236,884,-245,659,-244,121,-4,122,-100,123,-117,337,-99,344,-132,660,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751,-128,860});
    states[864] = new State(new int[]{85,865});
    states[865] = new State(-552);
    states[866] = new State(new int[]{10,868,28,881,85,-558},new int[]{-238,867});
    states[867] = new State(-553);
    states[868] = new State(new int[]{73,871,28,881,85,-558},new int[]{-58,869,-238,870});
    states[869] = new State(-557);
    states[870] = new State(-554);
    states[871] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-60,872,-165,875,-166,876,-132,877,-136,24,-137,27,-125,878});
    states[872] = new State(new int[]{92,873});
    states[873] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473,28,-473,85,-473},new int[]{-244,874,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[874] = new State(-560);
    states[875] = new State(-561);
    states[876] = new State(new int[]{7,163,92,-563});
    states[877] = new State(new int[]{7,-246,92,-246,5,-564});
    states[878] = new State(new int[]{5,879});
    states[879] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-165,880,-166,876,-132,196,-136,24,-137,27});
    states[880] = new State(-562);
    states[881] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,661,149,155,148,662,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473,85,-473},new int[]{-236,882,-245,659,-244,121,-4,122,-100,123,-117,337,-99,344,-132,660,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751,-128,860});
    states[882] = new State(new int[]{10,119,85,-559});
    states[883] = new State(-556);
    states[884] = new State(new int[]{10,119,85,-555});
    states[885] = new State(-533);
    states[886] = new State(-546);
    states[887] = new State(-547);
    states[888] = new State(-544);
    states[889] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-166,890,-132,196,-136,24,-137,27});
    states[890] = new State(new int[]{103,891,7,163});
    states[891] = new State(-545);
    states[892] = new State(-542);
    states[893] = new State(new int[]{5,894,93,896});
    states[894] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473,28,-473,85,-473},new int[]{-244,895,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[895] = new State(-525);
    states[896] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-98,897,-86,898,-83,186,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434});
    states[897] = new State(-527);
    states[898] = new State(-528);
    states[899] = new State(-526);
    states[900] = new State(new int[]{85,901});
    states[901] = new State(-522);
    states[902] = new State(-523);
    states[903] = new State(new int[]{9,904,136,23,79,25,80,26,74,28,72,29},new int[]{-308,908,-309,841,-143,403,-132,717,-136,24,-137,27});
    states[904] = new State(new int[]{5,407,120,-876},new int[]{-306,905});
    states[905] = new State(new int[]{120,906});
    states[906] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,84,116,36,629,50,669,90,664,31,674,32,700,69,732,21,647,95,690,56,740,71,791,43,697},new int[]{-310,907,-91,354,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-312,626,-239,627,-138,628,-300,727,-231,728,-109,729,-108,730,-110,731,-32,787,-286,788,-154,789,-111,790,-232,792});
    states[907] = new State(-868);
    states[908] = new State(new int[]{9,909,10,401});
    states[909] = new State(new int[]{5,407,120,-876},new int[]{-306,910});
    states[910] = new State(new int[]{120,911});
    states[911] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,84,116,36,629,50,669,90,664,31,674,32,700,69,732,21,647,95,690,56,740,71,791,43,697},new int[]{-310,912,-91,354,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-312,626,-239,627,-138,628,-300,727,-231,728,-109,729,-108,730,-110,731,-32,787,-286,788,-154,789,-111,790,-232,792});
    states[912] = new State(-869);
    states[913] = new State(new int[]{5,914,7,-246,8,-246,116,-246,12,-246,93,-246});
    states[914] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-9,915,-166,614,-132,196,-136,24,-137,27,-285,916});
    states[915] = new State(-204);
    states[916] = new State(new int[]{8,617,12,-599,93,-599},new int[]{-65,917});
    states[917] = new State(-687);
    states[918] = new State(-201);
    states[919] = new State(-197);
    states[920] = new State(-452);
    states[921] = new State(-614);
    states[922] = new State(new int[]{8,923});
    states[923] = new State(new int[]{49,531,136,23,79,25,80,26,74,28,72,29},new int[]{-328,924,-326,928,-321,921,-268,922,-166,162,-132,196,-136,24,-137,27});
    states[924] = new State(new int[]{9,925,10,529,93,926});
    states[925] = new State(-604);
    states[926] = new State(new int[]{49,531,136,23,79,25,80,26,74,28,72,29},new int[]{-326,927,-321,921,-268,922,-166,162,-132,196,-136,24,-137,27});
    states[927] = new State(-611);
    states[928] = new State(-609);
    states[929] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,933,135,445,20,450,44,458,45,536,30,540,70,544,61,547},new int[]{-261,930,-256,931,-85,175,-94,267,-95,268,-166,932,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-240,938,-233,939,-265,940,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-285,941});
    states[930] = new State(-879);
    states[931] = new State(-466);
    states[932] = new State(new int[]{7,163,116,168,8,-241,111,-241,110,-241,124,-241,125,-241,126,-241,127,-241,123,-241,6,-241,109,-241,108,-241,121,-241,122,-241,120,-241},new int[]{-283,616});
    states[933] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-74,934,-72,284,-260,287,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[934] = new State(new int[]{9,935,93,936});
    states[935] = new State(-236);
    states[936] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-72,937,-260,287,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[937] = new State(-249);
    states[938] = new State(-467);
    states[939] = new State(-468);
    states[940] = new State(-469);
    states[941] = new State(-470);
    states[942] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,943,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[943] = new State(new int[]{13,128,93,-112,5,-112,10,-112,9,-112});
    states[944] = new State(new int[]{13,128,93,-111,5,-111,10,-111,9,-111});
    states[945] = new State(new int[]{5,929,120,-878},new int[]{-307,946});
    states[946] = new State(new int[]{120,947});
    states[947] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,84,116,36,629,50,669,90,664,31,674,32,700,69,732,21,647,95,690,56,740,71,791,43,697},new int[]{-310,948,-91,354,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-312,626,-239,627,-138,628,-300,727,-231,728,-109,729,-108,730,-110,731,-32,787,-286,788,-154,789,-111,790,-232,792});
    states[948] = new State(-858);
    states[949] = new State(new int[]{5,950,10,962,16,-694,8,-694,7,-694,135,-694,4,-694,14,-694,131,-694,129,-694,111,-694,110,-694,124,-694,125,-694,126,-694,127,-694,123,-694,109,-694,108,-694,121,-694,122,-694,119,-694,113,-694,118,-694,116,-694,114,-694,117,-694,115,-694,130,-694,15,-694,93,-694,13,-694,9,-694,112,-694,11,-694});
    states[950] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-259,951,-260,409,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[951] = new State(new int[]{9,952,10,956});
    states[952] = new State(new int[]{5,929,120,-878},new int[]{-307,953});
    states[953] = new State(new int[]{120,954});
    states[954] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,84,116,36,629,50,669,90,664,31,674,32,700,69,732,21,647,95,690,56,740,71,791,43,697},new int[]{-310,955,-91,354,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-312,626,-239,627,-138,628,-300,727,-231,728,-109,729,-108,730,-110,731,-32,787,-286,788,-154,789,-111,790,-232,792});
    states[955] = new State(-859);
    states[956] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-308,957,-309,841,-143,403,-132,717,-136,24,-137,27});
    states[957] = new State(new int[]{9,958,10,401});
    states[958] = new State(new int[]{5,929,120,-878},new int[]{-307,959});
    states[959] = new State(new int[]{120,960});
    states[960] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,84,116,36,629,50,669,90,664,31,674,32,700,69,732,21,647,95,690,56,740,71,791,43,697},new int[]{-310,961,-91,354,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-312,626,-239,627,-138,628,-300,727,-231,728,-109,729,-108,730,-110,731,-32,787,-286,788,-154,789,-111,790,-232,792});
    states[961] = new State(-861);
    states[962] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-308,963,-309,841,-143,403,-132,717,-136,24,-137,27});
    states[963] = new State(new int[]{9,964,10,401});
    states[964] = new State(new int[]{5,929,120,-878},new int[]{-307,965});
    states[965] = new State(new int[]{120,966});
    states[966] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,84,116,36,629,50,669,90,664,31,674,32,700,69,732,21,647,95,690,56,740,71,791,43,697},new int[]{-310,967,-91,354,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-312,626,-239,627,-138,628,-300,727,-231,728,-109,729,-108,730,-110,731,-32,787,-286,788,-154,789,-111,790,-232,792});
    states[967] = new State(-860);
    states[968] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,41,358,38,388,8,390,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156},new int[]{-99,969,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636});
    states[969] = new State(new int[]{16,339,8,345,7,970,135,972,4,973,9,-504,93,-504,11,-692});
    states[970] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,78,32,77,33,76,34,75,35,65,36,60,37,121,38,18,39,17,40,59,41,19,42,122,43,123,44,124,45,125,46,126,47,127,48,128,49,129,50,130,51,131,52,20,53,70,54,84,55,21,56,22,57,25,58,26,59,27,60,68,61,92,62,28,63,29,64,30,65,23,66,97,67,94,68,31,69,32,70,33,71,36,72,37,73,38,74,96,75,39,76,40,77,42,78,43,79,44,80,90,81,45,82,95,83,46,84,24,85,47,86,67,87,91,88,48,89,49,90,50,91,51,92,52,93,53,94,54,95,55,96,57,97,98,98,99,99,102,100,100,101,101,102,58,103,71,104,34,105,35,106,41,358},new int[]{-133,971,-132,515,-136,24,-137,27,-277,516,-135,31,-177,517});
    states[971] = new State(-704);
    states[972] = new State(-706);
    states[973] = new State(new int[]{116,168},new int[]{-283,974});
    states[974] = new State(-707);
    states[975] = new State(new int[]{16,339,8,345,7,970,135,972,4,973,9,-503,93,-503,11,-692});
    states[976] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,41,358,38,388,8,390,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156},new int[]{-99,977,-103,978,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636});
    states[977] = new State(new int[]{16,339,8,345,7,970,135,972,4,973,14,976,103,-679,104,-679,105,-679,106,-679,107,-679,85,-679,10,-679,91,-679,94,-679,29,-679,97,-679,131,-679,129,-679,111,-679,110,-679,124,-679,125,-679,126,-679,127,-679,123,-679,5,-679,109,-679,108,-679,121,-679,122,-679,119,-679,113,-679,118,-679,116,-679,114,-679,117,-679,115,-679,130,-679,15,-679,13,-679,28,-679,93,-679,12,-679,9,-679,92,-679,80,-679,79,-679,2,-679,78,-679,77,-679,76,-679,75,-679,112,-679,6,-679,47,-679,54,-679,134,-679,136,-679,74,-679,72,-679,41,-679,38,-679,17,-679,18,-679,137,-679,139,-679,138,-679,147,-679,149,-679,148,-679,53,-679,84,-679,36,-679,21,-679,90,-679,50,-679,31,-679,51,-679,95,-679,43,-679,32,-679,49,-679,56,-679,71,-679,69,-679,34,-679,67,-679,68,-679,11,-692});
    states[978] = new State(-680);
    states[979] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-132,980,-136,24,-137,27});
    states[980] = new State(new int[]{93,981});
    states[981] = new State(new int[]{49,989},new int[]{-319,982});
    states[982] = new State(new int[]{9,983,93,986});
    states[983] = new State(new int[]{103,984});
    states[984] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-81,985,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[985] = new State(-499);
    states[986] = new State(new int[]{49,987});
    states[987] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-132,988,-136,24,-137,27});
    states[988] = new State(-506);
    states[989] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-132,990,-136,24,-137,27});
    states[990] = new State(-505);
    states[991] = new State(new int[]{140,995,142,996,143,997,144,998,146,999,145,1000,100,-723,84,-723,55,-723,25,-723,63,-723,46,-723,49,-723,58,-723,11,-723,24,-723,22,-723,40,-723,33,-723,26,-723,27,-723,42,-723,85,-723,78,-723,77,-723,76,-723,75,-723,19,-723,141,-723,37,-723},new int[]{-192,992,-195,1001});
    states[992] = new State(new int[]{10,993});
    states[993] = new State(new int[]{140,995,142,996,143,997,144,998,146,999,145,1000,100,-724,84,-724,55,-724,25,-724,63,-724,46,-724,49,-724,58,-724,11,-724,24,-724,22,-724,40,-724,33,-724,26,-724,27,-724,42,-724,85,-724,78,-724,77,-724,76,-724,75,-724,19,-724,141,-724,37,-724},new int[]{-195,994});
    states[994] = new State(-728);
    states[995] = new State(-738);
    states[996] = new State(-739);
    states[997] = new State(-740);
    states[998] = new State(-741);
    states[999] = new State(-742);
    states[1000] = new State(-743);
    states[1001] = new State(-727);
    states[1002] = new State(-362);
    states[1003] = new State(-426);
    states[1004] = new State(-427);
    states[1005] = new State(new int[]{8,-432,103,-432,10,-432,5,-432,7,-429});
    states[1006] = new State(new int[]{116,1008,8,-435,103,-435,10,-435,7,-435,5,-435},new int[]{-140,1007});
    states[1007] = new State(-436);
    states[1008] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-143,1009,-132,717,-136,24,-137,27});
    states[1009] = new State(new int[]{114,1010,93,405});
    states[1010] = new State(-309);
    states[1011] = new State(-437);
    states[1012] = new State(new int[]{116,1008,8,-433,103,-433,10,-433,5,-433},new int[]{-140,1013});
    states[1013] = new State(-434);
    states[1014] = new State(new int[]{7,1015});
    states[1015] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,41,358},new int[]{-127,1016,-134,1017,-122,1005,-119,1006,-132,1011,-136,24,-137,27,-177,1012});
    states[1016] = new State(-428);
    states[1017] = new State(-431);
    states[1018] = new State(-430);
    states[1019] = new State(-419);
    states[1020] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,78,32,77,33,76,34,75,35},new int[]{-158,1021,-132,1060,-136,24,-137,27,-135,1061});
    states[1021] = new State(new int[]{7,1045,11,1051,5,-376},new int[]{-218,1022,-223,1048});
    states[1022] = new State(new int[]{79,1034,80,1040,10,-383},new int[]{-188,1023});
    states[1023] = new State(new int[]{10,1024});
    states[1024] = new State(new int[]{59,1029,145,1031,144,1032,140,1033,11,-373,24,-373,22,-373,40,-373,33,-373,26,-373,27,-373,42,-373,85,-373,78,-373,77,-373,76,-373,75,-373},new int[]{-191,1025,-196,1026});
    states[1025] = new State(-371);
    states[1026] = new State(new int[]{10,1027});
    states[1027] = new State(new int[]{59,1029,11,-373,24,-373,22,-373,40,-373,33,-373,26,-373,27,-373,42,-373,85,-373,78,-373,77,-373,76,-373,75,-373},new int[]{-191,1028});
    states[1028] = new State(-372);
    states[1029] = new State(new int[]{10,1030});
    states[1030] = new State(-374);
    states[1031] = new State(-744);
    states[1032] = new State(-745);
    states[1033] = new State(-746);
    states[1034] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,501,17,247,18,252,5,570,33,622,40,826,10,-382},new int[]{-101,1035,-82,1039,-81,126,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,351,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569,-304,620,-305,621});
    states[1035] = new State(new int[]{80,1037,10,-386},new int[]{-189,1036});
    states[1036] = new State(-384);
    states[1037] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473},new int[]{-244,1038,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[1038] = new State(-387);
    states[1039] = new State(-381);
    states[1040] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473},new int[]{-244,1041,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[1041] = new State(new int[]{79,1043,10,-388},new int[]{-190,1042});
    states[1042] = new State(-385);
    states[1043] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,501,17,247,18,252,5,570,33,622,40,826,10,-382},new int[]{-101,1044,-82,1039,-81,126,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,351,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569,-304,620,-305,621});
    states[1044] = new State(-389);
    states[1045] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,78,32,77,33,76,34,75,35},new int[]{-132,1046,-135,1047,-136,24,-137,27});
    states[1046] = new State(-366);
    states[1047] = new State(-367);
    states[1048] = new State(new int[]{5,1049});
    states[1049] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-259,1050,-260,409,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[1050] = new State(-375);
    states[1051] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-222,1052,-221,1059,-143,1056,-132,717,-136,24,-137,27});
    states[1052] = new State(new int[]{12,1053,10,1054});
    states[1053] = new State(-377);
    states[1054] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-221,1055,-143,1056,-132,717,-136,24,-137,27});
    states[1055] = new State(-379);
    states[1056] = new State(new int[]{5,1057,93,405});
    states[1057] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-259,1058,-260,409,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[1058] = new State(-380);
    states[1059] = new State(-378);
    states[1060] = new State(-364);
    states[1061] = new State(-365);
    states[1062] = new State(new int[]{100,1193,11,-356,24,-356,22,-356,40,-356,33,-356,26,-356,27,-356,42,-356,85,-356,78,-356,77,-356,76,-356,75,-356,55,-63,25,-63,63,-63,46,-63,49,-63,58,-63,84,-63},new int[]{-162,1063,-40,1064,-36,1067,-57,1192});
    states[1063] = new State(-420);
    states[1064] = new State(new int[]{84,116},new int[]{-239,1065});
    states[1065] = new State(new int[]{10,1066});
    states[1066] = new State(-447);
    states[1067] = new State(new int[]{55,1070,25,1091,63,1095,46,1250,49,1256,58,1266,84,-62},new int[]{-42,1068,-153,1069,-26,1076,-48,1093,-273,1097,-292,1252});
    states[1068] = new State(-64);
    states[1069] = new State(-80);
    states[1070] = new State(new int[]{147,641,148,642,136,23,79,25,80,26,74,28,72,29},new int[]{-141,1071,-128,1075,-132,643,-136,24,-137,27});
    states[1071] = new State(new int[]{10,1072,93,1073});
    states[1072] = new State(-89);
    states[1073] = new State(new int[]{147,641,148,642,136,23,79,25,80,26,74,28,72,29},new int[]{-128,1074,-132,643,-136,24,-137,27});
    states[1074] = new State(-91);
    states[1075] = new State(-90);
    states[1076] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,55,-81,25,-81,63,-81,46,-81,49,-81,58,-81,84,-81},new int[]{-24,1077,-25,1078,-126,1080,-132,1090,-136,24,-137,27});
    states[1077] = new State(-96);
    states[1078] = new State(new int[]{10,1079});
    states[1079] = new State(-105);
    states[1080] = new State(new int[]{113,1081,5,1086});
    states[1081] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,1084,128,427,109,334,108,335},new int[]{-97,1082,-83,1083,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434,-87,1085});
    states[1082] = new State(-106);
    states[1083] = new State(new int[]{13,187,10,-108,85,-108,78,-108,77,-108,76,-108,75,-108});
    states[1084] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,810,128,427,109,334,108,335,59,158,9,-185},new int[]{-83,794,-62,811,-227,799,-87,801,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434,-61,237,-79,813,-78,240,-53,814});
    states[1085] = new State(-109);
    states[1086] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-260,1087,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[1087] = new State(new int[]{113,1088});
    states[1088] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,810,128,427,109,334,108,335},new int[]{-78,1089,-83,241,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434,-87,821,-227,822});
    states[1089] = new State(-107);
    states[1090] = new State(-110);
    states[1091] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-24,1092,-25,1078,-126,1080,-132,1090,-136,24,-137,27});
    states[1092] = new State(-95);
    states[1093] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,55,-82,25,-82,63,-82,46,-82,49,-82,58,-82,84,-82},new int[]{-24,1094,-25,1078,-126,1080,-132,1090,-136,24,-137,27});
    states[1094] = new State(-98);
    states[1095] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-24,1096,-25,1078,-126,1080,-132,1090,-136,24,-137,27});
    states[1096] = new State(-97);
    states[1097] = new State(new int[]{11,608,55,-83,25,-83,63,-83,46,-83,49,-83,58,-83,84,-83,136,-199,79,-199,80,-199,74,-199,72,-199},new int[]{-45,1098,-6,1099,-234,919});
    states[1098] = new State(-100);
    states[1099] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,11,608},new int[]{-46,1100,-234,474,-129,1101,-132,1242,-136,24,-137,27,-130,1247});
    states[1100] = new State(-196);
    states[1101] = new State(new int[]{113,1102});
    states[1102] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576,65,1236,66,1237,140,1238,23,1239,24,1240,22,-291,39,-291,60,-291},new int[]{-271,1103,-260,1105,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580,-27,1106,-20,1107,-21,1234,-19,1241});
    states[1103] = new State(new int[]{10,1104});
    states[1104] = new State(-205);
    states[1105] = new State(-210);
    states[1106] = new State(-211);
    states[1107] = new State(new int[]{22,1228,39,1229,60,1230},new int[]{-275,1108});
    states[1108] = new State(new int[]{8,1149,19,-303,11,-303,85,-303,78,-303,77,-303,76,-303,75,-303,25,-303,136,-303,79,-303,80,-303,74,-303,72,-303,58,-303,24,-303,22,-303,40,-303,33,-303,26,-303,27,-303,42,-303,10,-303},new int[]{-169,1109});
    states[1109] = new State(new int[]{19,1140,11,-310,85,-310,78,-310,77,-310,76,-310,75,-310,25,-310,136,-310,79,-310,80,-310,74,-310,72,-310,58,-310,24,-310,22,-310,40,-310,33,-310,26,-310,27,-310,42,-310,10,-310},new int[]{-299,1110,-298,1138,-297,1160});
    states[1110] = new State(new int[]{11,608,10,-301,85,-327,78,-327,77,-327,76,-327,75,-327,25,-199,136,-199,79,-199,80,-199,74,-199,72,-199,58,-199,24,-199,22,-199,40,-199,33,-199,26,-199,27,-199,42,-199},new int[]{-23,1111,-22,1112,-29,1118,-31,465,-41,1119,-6,1120,-234,919,-30,1225,-50,1227,-49,471,-51,1226});
    states[1111] = new State(-284);
    states[1112] = new State(new int[]{85,1113,78,1114,77,1115,76,1116,75,1117},new int[]{-7,463});
    states[1113] = new State(-302);
    states[1114] = new State(-323);
    states[1115] = new State(-324);
    states[1116] = new State(-325);
    states[1117] = new State(-326);
    states[1118] = new State(-321);
    states[1119] = new State(-335);
    states[1120] = new State(new int[]{25,1122,136,23,79,25,80,26,74,28,72,29,58,1126,24,1187,22,1188,11,608,40,1133,33,1168,26,1202,27,1209,42,1216},new int[]{-47,1121,-234,474,-207,473,-204,475,-242,476,-295,1124,-294,1125,-143,718,-132,717,-136,24,-137,27,-3,1130,-215,1189,-213,1062,-210,1132,-214,1167,-212,1190,-200,1213,-201,1214,-203,1215});
    states[1121] = new State(-337);
    states[1122] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-25,1123,-126,1080,-132,1090,-136,24,-137,27});
    states[1123] = new State(-342);
    states[1124] = new State(-343);
    states[1125] = new State(-347);
    states[1126] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-143,1127,-132,717,-136,24,-137,27});
    states[1127] = new State(new int[]{5,1128,93,405});
    states[1128] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-260,1129,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[1129] = new State(-348);
    states[1130] = new State(new int[]{26,479,42,1020,136,23,79,25,80,26,74,28,72,29,58,1126,40,1133,33,1168},new int[]{-295,1131,-215,478,-201,1019,-294,1125,-143,718,-132,717,-136,24,-137,27,-213,1062,-210,1132,-214,1167});
    states[1131] = new State(-344);
    states[1132] = new State(-357);
    states[1133] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,41,358},new int[]{-156,1134,-155,1003,-127,1004,-122,1005,-119,1006,-132,1011,-136,24,-137,27,-177,1012,-316,1014,-134,1018});
    states[1134] = new State(new int[]{8,554,10,-449,103,-449},new int[]{-113,1135});
    states[1135] = new State(new int[]{10,1165,103,-725},new int[]{-193,1136,-194,1161});
    states[1136] = new State(new int[]{19,1140,100,-310,84,-310,55,-310,25,-310,63,-310,46,-310,49,-310,58,-310,11,-310,24,-310,22,-310,40,-310,33,-310,26,-310,27,-310,42,-310,85,-310,78,-310,77,-310,76,-310,75,-310,141,-310,37,-310},new int[]{-299,1137,-298,1138,-297,1160});
    states[1137] = new State(-438);
    states[1138] = new State(new int[]{19,1140,11,-311,85,-311,78,-311,77,-311,76,-311,75,-311,25,-311,136,-311,79,-311,80,-311,74,-311,72,-311,58,-311,24,-311,22,-311,40,-311,33,-311,26,-311,27,-311,42,-311,10,-311,100,-311,84,-311,55,-311,63,-311,46,-311,49,-311,141,-311,37,-311},new int[]{-297,1139});
    states[1139] = new State(-313);
    states[1140] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-143,1141,-132,717,-136,24,-137,27});
    states[1141] = new State(new int[]{5,1142,93,405});
    states[1142] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,1148,45,536,30,540,70,544,61,547,40,552,33,576,22,1157,26,1158},new int[]{-272,1143,-269,1159,-260,1147,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[1143] = new State(new int[]{10,1144,93,1145});
    states[1144] = new State(-314);
    states[1145] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,1148,45,536,30,540,70,544,61,547,40,552,33,576,22,1157,26,1158},new int[]{-269,1146,-260,1147,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[1146] = new State(-316);
    states[1147] = new State(-317);
    states[1148] = new State(new int[]{8,1149,10,-319,93,-319,19,-303,11,-303,85,-303,78,-303,77,-303,76,-303,75,-303,25,-303,136,-303,79,-303,80,-303,74,-303,72,-303,58,-303,24,-303,22,-303,40,-303,33,-303,26,-303,27,-303,42,-303},new int[]{-169,459});
    states[1149] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-168,1150,-167,1156,-166,1154,-132,196,-136,24,-137,27,-285,1155});
    states[1150] = new State(new int[]{9,1151,93,1152});
    states[1151] = new State(-304);
    states[1152] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-167,1153,-166,1154,-132,196,-136,24,-137,27,-285,1155});
    states[1153] = new State(-306);
    states[1154] = new State(new int[]{7,163,116,168,9,-307,93,-307},new int[]{-283,616});
    states[1155] = new State(-308);
    states[1156] = new State(-305);
    states[1157] = new State(-318);
    states[1158] = new State(-320);
    states[1159] = new State(-315);
    states[1160] = new State(-312);
    states[1161] = new State(new int[]{103,1162});
    states[1162] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473},new int[]{-244,1163,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[1163] = new State(new int[]{10,1164});
    states[1164] = new State(-423);
    states[1165] = new State(new int[]{140,995,142,996,143,997,144,998,146,999,145,1000,19,-723,100,-723,84,-723,55,-723,25,-723,63,-723,46,-723,49,-723,58,-723,11,-723,24,-723,22,-723,40,-723,33,-723,26,-723,27,-723,42,-723,85,-723,78,-723,77,-723,76,-723,75,-723,141,-723},new int[]{-192,1166,-195,1001});
    states[1166] = new State(new int[]{10,993,103,-726});
    states[1167] = new State(-358);
    states[1168] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,41,358},new int[]{-155,1169,-127,1004,-122,1005,-119,1006,-132,1011,-136,24,-137,27,-177,1012,-316,1014,-134,1018});
    states[1169] = new State(new int[]{8,554,5,-449,10,-449,103,-449},new int[]{-113,1170});
    states[1170] = new State(new int[]{5,1173,10,1165,103,-725},new int[]{-193,1171,-194,1183});
    states[1171] = new State(new int[]{19,1140,100,-310,84,-310,55,-310,25,-310,63,-310,46,-310,49,-310,58,-310,11,-310,24,-310,22,-310,40,-310,33,-310,26,-310,27,-310,42,-310,85,-310,78,-310,77,-310,76,-310,75,-310,141,-310,37,-310},new int[]{-299,1172,-298,1138,-297,1160});
    states[1172] = new State(-439);
    states[1173] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-259,1174,-260,409,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[1174] = new State(new int[]{10,1165,103,-725},new int[]{-193,1175,-194,1177});
    states[1175] = new State(new int[]{19,1140,100,-310,84,-310,55,-310,25,-310,63,-310,46,-310,49,-310,58,-310,11,-310,24,-310,22,-310,40,-310,33,-310,26,-310,27,-310,42,-310,85,-310,78,-310,77,-310,76,-310,75,-310,141,-310,37,-310},new int[]{-299,1176,-298,1138,-297,1160});
    states[1176] = new State(-440);
    states[1177] = new State(new int[]{103,1178});
    states[1178] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,501,17,247,18,252,33,622,40,826},new int[]{-92,1179,-91,1181,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,351,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-304,1182,-305,621});
    states[1179] = new State(new int[]{10,1180});
    states[1180] = new State(-421);
    states[1181] = new State(new int[]{13,128,10,-577});
    states[1182] = new State(-578);
    states[1183] = new State(new int[]{103,1184});
    states[1184] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,501,17,247,18,252,33,622,40,826},new int[]{-92,1185,-91,1181,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,351,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-304,1182,-305,621});
    states[1185] = new State(new int[]{10,1186});
    states[1186] = new State(-422);
    states[1187] = new State(-345);
    states[1188] = new State(-346);
    states[1189] = new State(-354);
    states[1190] = new State(new int[]{100,1193,11,-355,24,-355,22,-355,40,-355,33,-355,26,-355,27,-355,42,-355,85,-355,78,-355,77,-355,76,-355,75,-355,55,-63,25,-63,63,-63,46,-63,49,-63,58,-63,84,-63},new int[]{-162,1191,-40,1064,-36,1067,-57,1192});
    states[1191] = new State(-406);
    states[1192] = new State(-448);
    states[1193] = new State(new int[]{10,1201,136,23,79,25,80,26,74,28,72,29,137,149,139,150,138,152},new int[]{-96,1194,-132,1198,-136,24,-137,27,-150,1199,-152,147,-151,151});
    states[1194] = new State(new int[]{74,1195,10,1200});
    states[1195] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,137,149,139,150,138,152},new int[]{-96,1196,-132,1198,-136,24,-137,27,-150,1199,-152,147,-151,151});
    states[1196] = new State(new int[]{10,1197});
    states[1197] = new State(-441);
    states[1198] = new State(-444);
    states[1199] = new State(-445);
    states[1200] = new State(-442);
    states[1201] = new State(-443);
    states[1202] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,41,358,8,-363,103,-363,10,-363},new int[]{-157,1203,-156,1002,-155,1003,-127,1004,-122,1005,-119,1006,-132,1011,-136,24,-137,27,-177,1012,-316,1014,-134,1018});
    states[1203] = new State(new int[]{8,554,103,-449,10,-449},new int[]{-113,1204});
    states[1204] = new State(new int[]{103,1206,10,991},new int[]{-193,1205});
    states[1205] = new State(-359);
    states[1206] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473},new int[]{-244,1207,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[1207] = new State(new int[]{10,1208});
    states[1208] = new State(-407);
    states[1209] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,41,358,8,-363,10,-363},new int[]{-157,1210,-156,1002,-155,1003,-127,1004,-122,1005,-119,1006,-132,1011,-136,24,-137,27,-177,1012,-316,1014,-134,1018});
    states[1210] = new State(new int[]{8,554,10,-449},new int[]{-113,1211});
    states[1211] = new State(new int[]{10,991},new int[]{-193,1212});
    states[1212] = new State(-361);
    states[1213] = new State(-351);
    states[1214] = new State(-418);
    states[1215] = new State(-352);
    states[1216] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,78,32,77,33,76,34,75,35},new int[]{-158,1217,-132,1060,-136,24,-137,27,-135,1061});
    states[1217] = new State(new int[]{7,1045,11,1051,5,-376},new int[]{-218,1218,-223,1048});
    states[1218] = new State(new int[]{79,1034,80,1040,10,-383},new int[]{-188,1219});
    states[1219] = new State(new int[]{10,1220});
    states[1220] = new State(new int[]{59,1029,145,1031,144,1032,140,1033,11,-373,24,-373,22,-373,40,-373,33,-373,26,-373,27,-373,42,-373,85,-373,78,-373,77,-373,76,-373,75,-373},new int[]{-191,1221,-196,1222});
    states[1221] = new State(-369);
    states[1222] = new State(new int[]{10,1223});
    states[1223] = new State(new int[]{59,1029,11,-373,24,-373,22,-373,40,-373,33,-373,26,-373,27,-373,42,-373,85,-373,78,-373,77,-373,76,-373,75,-373},new int[]{-191,1224});
    states[1224] = new State(-370);
    states[1225] = new State(new int[]{11,608,85,-329,78,-329,77,-329,76,-329,75,-329,24,-199,22,-199,40,-199,33,-199,26,-199,27,-199,42,-199},new int[]{-50,470,-49,471,-6,472,-234,919,-51,1226});
    states[1226] = new State(-341);
    states[1227] = new State(-338);
    states[1228] = new State(-295);
    states[1229] = new State(-296);
    states[1230] = new State(new int[]{22,1231,44,1232,39,1233,8,-297,19,-297,11,-297,85,-297,78,-297,77,-297,76,-297,75,-297,25,-297,136,-297,79,-297,80,-297,74,-297,72,-297,58,-297,24,-297,40,-297,33,-297,26,-297,27,-297,42,-297,10,-297});
    states[1231] = new State(-298);
    states[1232] = new State(-299);
    states[1233] = new State(-300);
    states[1234] = new State(new int[]{65,1236,66,1237,140,1238,23,1239,24,1240,22,-292,39,-292,60,-292},new int[]{-19,1235});
    states[1235] = new State(-294);
    states[1236] = new State(-286);
    states[1237] = new State(-287);
    states[1238] = new State(-288);
    states[1239] = new State(-289);
    states[1240] = new State(-290);
    states[1241] = new State(-293);
    states[1242] = new State(new int[]{116,1244,113,-207},new int[]{-140,1243});
    states[1243] = new State(-208);
    states[1244] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-143,1245,-132,717,-136,24,-137,27});
    states[1245] = new State(new int[]{115,1246,114,1010,93,405});
    states[1246] = new State(-209);
    states[1247] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576,65,1236,66,1237,140,1238,23,1239,24,1240,22,-291,39,-291,60,-291},new int[]{-271,1248,-260,1105,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580,-27,1106,-20,1107,-21,1234,-19,1241});
    states[1248] = new State(new int[]{10,1249});
    states[1249] = new State(-206);
    states[1250] = new State(new int[]{11,608,136,-199,79,-199,80,-199,74,-199,72,-199},new int[]{-45,1251,-6,1099,-234,919});
    states[1251] = new State(-99);
    states[1252] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,55,-84,25,-84,63,-84,46,-84,49,-84,58,-84,84,-84},new int[]{-293,1253,-294,1254,-143,718,-132,717,-136,24,-137,27});
    states[1253] = new State(-103);
    states[1254] = new State(new int[]{10,1255});
    states[1255] = new State(-390);
    states[1256] = new State(new int[]{8,1258,136,23,79,25,80,26,74,28,72,29},new int[]{-293,1257,-294,1254,-143,718,-132,717,-136,24,-137,27});
    states[1257] = new State(-101);
    states[1258] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-132,1259,-136,24,-137,27});
    states[1259] = new State(new int[]{93,1260});
    states[1260] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-143,1261,-132,717,-136,24,-137,27});
    states[1261] = new State(new int[]{9,1262,93,405});
    states[1262] = new State(new int[]{103,1263});
    states[1263] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-91,1264,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568});
    states[1264] = new State(new int[]{10,1265,13,128});
    states[1265] = new State(-104);
    states[1266] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-293,1267,-294,1254,-143,718,-132,717,-136,24,-137,27});
    states[1267] = new State(-102);
    states[1268] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,933,12,-267,93,-267},new int[]{-255,1269,-256,1270,-85,175,-94,267,-95,268,-166,438,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151});
    states[1269] = new State(-265);
    states[1270] = new State(-266);
    states[1271] = new State(-264);
    states[1272] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-260,1273,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[1273] = new State(-263);
    states[1274] = new State(-685);
    states[1275] = new State(-712);
    states[1276] = new State(-226);
    states[1277] = new State(-222);
    states[1278] = new State(-585);
    states[1279] = new State(new int[]{8,1280});
    states[1280] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,41,358,38,388,8,390,17,247,18,252},new int[]{-315,1281,-314,1289,-132,1285,-136,24,-137,27,-89,1288,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567});
    states[1281] = new State(new int[]{9,1282,93,1283});
    states[1282] = new State(-594);
    states[1283] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,41,358,38,388,8,390,17,247,18,252},new int[]{-314,1284,-132,1285,-136,24,-137,27,-89,1288,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567});
    states[1284] = new State(-598);
    states[1285] = new State(new int[]{103,1286,16,-694,8,-694,7,-694,135,-694,4,-694,14,-694,131,-694,129,-694,111,-694,110,-694,124,-694,125,-694,126,-694,127,-694,123,-694,109,-694,108,-694,121,-694,122,-694,119,-694,113,-694,118,-694,116,-694,114,-694,117,-694,115,-694,130,-694,9,-694,93,-694,112,-694,11,-694});
    states[1286] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252},new int[]{-89,1287,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567});
    states[1287] = new State(new int[]{113,291,118,292,116,293,114,294,117,295,115,296,130,297,9,-595,93,-595},new int[]{-182,135});
    states[1288] = new State(new int[]{113,291,118,292,116,293,114,294,117,295,115,296,130,297,9,-596,93,-596},new int[]{-182,135});
    states[1289] = new State(-597);
    states[1290] = new State(new int[]{13,187,5,-622,12,-622});
    states[1291] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-83,1292,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434});
    states[1292] = new State(new int[]{13,187,93,-175,9,-175,12,-175,5,-175});
    states[1293] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335,5,-623,12,-623},new int[]{-107,1294,-83,1290,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434});
    states[1294] = new State(new int[]{5,1295,12,-629});
    states[1295] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-83,1296,-75,191,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433,-226,434});
    states[1296] = new State(new int[]{13,187,12,-631});
    states[1297] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,78,32,77,33,76,34,75,35,65,36,60,37,121,38,18,39,17,40,59,41,19,42,122,43,123,44,124,45,125,46,126,47,127,48,128,49,129,50,130,51,131,52,20,53,70,54,84,55,21,56,22,57,25,58,26,59,27,60,68,61,92,62,28,63,29,64,30,65,23,66,97,67,94,68,31,69,32,70,33,71,36,72,37,73,38,74,96,75,39,76,40,77,42,78,43,79,44,80,90,81,45,82,95,83,46,84,24,85,47,86,67,87,91,88,48,89,49,90,50,91,51,92,52,93,53,94,54,95,55,96,57,97,98,98,99,99,102,100,100,101,101,102,58,103,71,104,34,105,35,106,41,108,85,109},new int[]{-123,1298,-132,22,-136,24,-137,27,-277,30,-135,31,-278,107});
    states[1298] = new State(-164);
    states[1299] = new State(-165);
    states[1300] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,501,17,247,18,252,5,570,33,622,40,826,9,-169},new int[]{-70,1301,-66,1303,-82,500,-81,126,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,351,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569,-304,620,-305,621});
    states[1301] = new State(new int[]{9,1302});
    states[1302] = new State(-166);
    states[1303] = new State(new int[]{93,349,9,-168});
    states[1304] = new State(-136);
    states[1305] = new State(new int[]{136,23,79,25,80,26,74,28,72,227,137,149,139,150,138,152,147,154,149,155,148,156,38,244,17,247,18,252,11,417,52,421,134,422,8,424,128,427,109,334,108,335},new int[]{-75,1306,-12,215,-10,225,-13,201,-132,226,-136,24,-137,27,-150,242,-152,147,-151,151,-15,243,-241,246,-279,251,-224,416,-185,429,-159,431,-249,432,-253,433});
    states[1306] = new State(new int[]{109,1307,108,1308,121,1309,122,1310,13,-114,6,-114,93,-114,9,-114,12,-114,5,-114,85,-114,10,-114,91,-114,94,-114,29,-114,97,-114,28,-114,92,-114,80,-114,79,-114,2,-114,78,-114,77,-114,76,-114,75,-114},new int[]{-179,192});
    states[1307] = new State(-126);
    states[1308] = new State(-127);
    states[1309] = new State(-128);
    states[1310] = new State(-129);
    states[1311] = new State(-117);
    states[1312] = new State(-118);
    states[1313] = new State(-119);
    states[1314] = new State(-120);
    states[1315] = new State(-121);
    states[1316] = new State(-122);
    states[1317] = new State(-123);
    states[1318] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152},new int[]{-85,1319,-94,267,-95,268,-166,438,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151});
    states[1319] = new State(new int[]{109,1307,108,1308,121,1309,122,1310,13,-235,114,-235,93,-235,113,-235,9,-235,10,-235,120,-235,103,-235,85,-235,91,-235,94,-235,29,-235,97,-235,28,-235,12,-235,92,-235,80,-235,79,-235,2,-235,78,-235,77,-235,76,-235,75,-235,130,-235},new int[]{-179,176});
    states[1320] = new State(-33);
    states[1321] = new State(new int[]{55,1070,25,1091,63,1095,46,1250,49,1256,58,1266,11,608,84,-59,85,-59,96,-59,40,-199,33,-199,24,-199,22,-199,26,-199,27,-199},new int[]{-43,1322,-153,1323,-26,1324,-48,1325,-273,1326,-292,1327,-205,1328,-6,1329,-234,919});
    states[1322] = new State(-61);
    states[1323] = new State(-71);
    states[1324] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,55,-72,25,-72,63,-72,46,-72,49,-72,58,-72,11,-72,40,-72,33,-72,24,-72,22,-72,26,-72,27,-72,84,-72,85,-72,96,-72},new int[]{-24,1077,-25,1078,-126,1080,-132,1090,-136,24,-137,27});
    states[1325] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,55,-73,25,-73,63,-73,46,-73,49,-73,58,-73,11,-73,40,-73,33,-73,24,-73,22,-73,26,-73,27,-73,84,-73,85,-73,96,-73},new int[]{-24,1094,-25,1078,-126,1080,-132,1090,-136,24,-137,27});
    states[1326] = new State(new int[]{11,608,55,-74,25,-74,63,-74,46,-74,49,-74,58,-74,40,-74,33,-74,24,-74,22,-74,26,-74,27,-74,84,-74,85,-74,96,-74,136,-199,79,-199,80,-199,74,-199,72,-199},new int[]{-45,1098,-6,1099,-234,919});
    states[1327] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,55,-75,25,-75,63,-75,46,-75,49,-75,58,-75,11,-75,40,-75,33,-75,24,-75,22,-75,26,-75,27,-75,84,-75,85,-75,96,-75},new int[]{-293,1253,-294,1254,-143,718,-132,717,-136,24,-137,27});
    states[1328] = new State(-76);
    states[1329] = new State(new int[]{40,1342,33,1349,24,1187,22,1188,26,1377,27,1209,11,608},new int[]{-198,1330,-234,474,-199,1331,-206,1332,-213,1333,-210,1132,-214,1167,-3,1366,-202,1374,-212,1375});
    states[1330] = new State(-79);
    states[1331] = new State(-77);
    states[1332] = new State(-409);
    states[1333] = new State(new int[]{141,1335,100,1193,55,-60,25,-60,63,-60,46,-60,49,-60,58,-60,11,-60,40,-60,33,-60,24,-60,22,-60,26,-60,27,-60,84,-60},new int[]{-164,1334,-163,1337,-38,1338,-39,1321,-57,1341});
    states[1334] = new State(-411);
    states[1335] = new State(new int[]{10,1336});
    states[1336] = new State(-417);
    states[1337] = new State(-424);
    states[1338] = new State(new int[]{84,116},new int[]{-239,1339});
    states[1339] = new State(new int[]{10,1340});
    states[1340] = new State(-446);
    states[1341] = new State(-425);
    states[1342] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,41,358},new int[]{-156,1343,-155,1003,-127,1004,-122,1005,-119,1006,-132,1011,-136,24,-137,27,-177,1012,-316,1014,-134,1018});
    states[1343] = new State(new int[]{8,554,10,-449,103,-449},new int[]{-113,1344});
    states[1344] = new State(new int[]{10,1165,103,-725},new int[]{-193,1136,-194,1345});
    states[1345] = new State(new int[]{103,1346});
    states[1346] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473},new int[]{-244,1347,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[1347] = new State(new int[]{10,1348});
    states[1348] = new State(-416);
    states[1349] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,41,358},new int[]{-155,1350,-127,1004,-122,1005,-119,1006,-132,1011,-136,24,-137,27,-177,1012,-316,1014,-134,1018});
    states[1350] = new State(new int[]{8,554,5,-449,10,-449,103,-449},new int[]{-113,1351});
    states[1351] = new State(new int[]{5,1352,10,1165,103,-725},new int[]{-193,1171,-194,1360});
    states[1352] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-259,1353,-260,409,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[1353] = new State(new int[]{10,1165,103,-725},new int[]{-193,1175,-194,1354});
    states[1354] = new State(new int[]{103,1355});
    states[1355] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,501,17,247,18,252,33,622,40,826},new int[]{-91,1356,-304,1358,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,351,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-305,621});
    states[1356] = new State(new int[]{10,1357,13,128});
    states[1357] = new State(-412);
    states[1358] = new State(new int[]{10,1359});
    states[1359] = new State(-414);
    states[1360] = new State(new int[]{103,1361});
    states[1361] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,501,17,247,18,252,33,622,40,826},new int[]{-91,1362,-304,1364,-90,132,-89,290,-93,355,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,351,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-305,621});
    states[1362] = new State(new int[]{10,1363,13,128});
    states[1363] = new State(-413);
    states[1364] = new State(new int[]{10,1365});
    states[1365] = new State(-415);
    states[1366] = new State(new int[]{26,1368,40,1342,33,1349},new int[]{-206,1367,-213,1333,-210,1132,-214,1167});
    states[1367] = new State(-410);
    states[1368] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,41,358,8,-363,103,-363,10,-363},new int[]{-157,1369,-156,1002,-155,1003,-127,1004,-122,1005,-119,1006,-132,1011,-136,24,-137,27,-177,1012,-316,1014,-134,1018});
    states[1369] = new State(new int[]{8,554,103,-449,10,-449},new int[]{-113,1370});
    states[1370] = new State(new int[]{103,1371,10,991},new int[]{-193,482});
    states[1371] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473},new int[]{-244,1372,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[1372] = new State(new int[]{10,1373});
    states[1373] = new State(-405);
    states[1374] = new State(-78);
    states[1375] = new State(-60,new int[]{-163,1376,-38,1338,-39,1321});
    states[1376] = new State(-403);
    states[1377] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,41,358,8,-363,103,-363,10,-363},new int[]{-157,1378,-156,1002,-155,1003,-127,1004,-122,1005,-119,1006,-132,1011,-136,24,-137,27,-177,1012,-316,1014,-134,1018});
    states[1378] = new State(new int[]{8,554,103,-449,10,-449},new int[]{-113,1379});
    states[1379] = new State(new int[]{103,1380,10,991},new int[]{-193,1205});
    states[1380] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,154,149,155,148,156,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,10,-473},new int[]{-244,1381,-4,122,-100,123,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751});
    states[1381] = new State(new int[]{10,1382});
    states[1382] = new State(-404);
    states[1383] = new State(new int[]{3,1385,48,-13,84,-13,55,-13,25,-13,63,-13,46,-13,49,-13,58,-13,11,-13,40,-13,33,-13,24,-13,22,-13,26,-13,27,-13,39,-13,85,-13,96,-13},new int[]{-170,1384});
    states[1384] = new State(-15);
    states[1385] = new State(new int[]{136,1386,137,1387});
    states[1386] = new State(-16);
    states[1387] = new State(-17);
    states[1388] = new State(-14);
    states[1389] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-132,1390,-136,24,-137,27});
    states[1390] = new State(new int[]{10,1392,8,1393},new int[]{-173,1391});
    states[1391] = new State(-26);
    states[1392] = new State(-27);
    states[1393] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-175,1394,-131,1400,-132,1399,-136,24,-137,27});
    states[1394] = new State(new int[]{9,1395,93,1397});
    states[1395] = new State(new int[]{10,1396});
    states[1396] = new State(-28);
    states[1397] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-131,1398,-132,1399,-136,24,-137,27});
    states[1398] = new State(-30);
    states[1399] = new State(-31);
    states[1400] = new State(-29);
    states[1401] = new State(-3);
    states[1402] = new State(new int[]{98,1457,99,1458,102,1459,11,608},new int[]{-291,1403,-234,474,-2,1452});
    states[1403] = new State(new int[]{39,1424,48,-36,55,-36,25,-36,63,-36,46,-36,49,-36,58,-36,11,-36,40,-36,33,-36,24,-36,22,-36,26,-36,27,-36,85,-36,96,-36,84,-36},new int[]{-147,1404,-148,1421,-287,1450});
    states[1404] = new State(new int[]{37,1418},new int[]{-146,1405});
    states[1405] = new State(new int[]{85,1408,96,1409,84,1415},new int[]{-139,1406});
    states[1406] = new State(new int[]{7,1407});
    states[1407] = new State(-42);
    states[1408] = new State(-52);
    states[1409] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,661,149,155,148,662,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,97,-473,10,-473},new int[]{-236,1410,-245,659,-244,121,-4,122,-100,123,-117,337,-99,344,-132,660,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751,-128,860});
    states[1410] = new State(new int[]{85,1411,97,1412,10,119});
    states[1411] = new State(-53);
    states[1412] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,661,149,155,148,662,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473},new int[]{-236,1413,-245,659,-244,121,-4,122,-100,123,-117,337,-99,344,-132,660,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751,-128,860});
    states[1413] = new State(new int[]{85,1414,10,119});
    states[1414] = new State(-54);
    states[1415] = new State(new int[]{134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,486,8,487,17,247,18,252,137,149,139,150,138,152,147,661,149,155,148,662,53,639,84,116,36,629,21,647,90,664,50,669,31,674,51,684,95,690,43,697,32,700,49,708,56,740,71,745,69,732,34,752,85,-473,10,-473},new int[]{-236,1416,-245,659,-244,121,-4,122,-100,123,-117,337,-99,344,-132,660,-136,24,-137,27,-177,357,-241,494,-279,495,-14,635,-150,146,-152,147,-151,151,-15,153,-16,496,-54,636,-103,518,-197,637,-118,638,-239,644,-138,645,-32,646,-231,663,-300,668,-109,673,-301,683,-145,688,-286,689,-232,696,-108,699,-296,707,-55,736,-160,737,-159,738,-154,739,-111,744,-112,749,-110,750,-323,751,-128,860});
    states[1416] = new State(new int[]{85,1417,10,119});
    states[1417] = new State(-55);
    states[1418] = new State(-36,new int[]{-287,1419});
    states[1419] = new State(new int[]{48,14,55,-60,25,-60,63,-60,46,-60,49,-60,58,-60,11,-60,40,-60,33,-60,24,-60,22,-60,26,-60,27,-60,85,-60,96,-60,84,-60},new int[]{-38,1420,-39,1321});
    states[1420] = new State(-50);
    states[1421] = new State(new int[]{85,1408,96,1409,84,1415},new int[]{-139,1422});
    states[1422] = new State(new int[]{7,1423});
    states[1423] = new State(-43);
    states[1424] = new State(-36,new int[]{-287,1425});
    states[1425] = new State(new int[]{48,14,25,-57,63,-57,46,-57,49,-57,58,-57,11,-57,40,-57,33,-57,37,-57},new int[]{-37,1426,-35,1427});
    states[1426] = new State(-49);
    states[1427] = new State(new int[]{25,1091,63,1095,46,1250,49,1256,58,1266,11,608,37,-56,40,-199,33,-199},new int[]{-44,1428,-26,1429,-48,1430,-273,1431,-292,1432,-217,1433,-6,1434,-234,919,-216,1449});
    states[1428] = new State(-58);
    states[1429] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,25,-65,63,-65,46,-65,49,-65,58,-65,11,-65,40,-65,33,-65,37,-65},new int[]{-24,1077,-25,1078,-126,1080,-132,1090,-136,24,-137,27});
    states[1430] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,25,-66,63,-66,46,-66,49,-66,58,-66,11,-66,40,-66,33,-66,37,-66},new int[]{-24,1094,-25,1078,-126,1080,-132,1090,-136,24,-137,27});
    states[1431] = new State(new int[]{11,608,25,-67,63,-67,46,-67,49,-67,58,-67,40,-67,33,-67,37,-67,136,-199,79,-199,80,-199,74,-199,72,-199},new int[]{-45,1098,-6,1099,-234,919});
    states[1432] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,25,-68,63,-68,46,-68,49,-68,58,-68,11,-68,40,-68,33,-68,37,-68},new int[]{-293,1253,-294,1254,-143,718,-132,717,-136,24,-137,27});
    states[1433] = new State(-69);
    states[1434] = new State(new int[]{40,1441,11,608,33,1444},new int[]{-210,1435,-234,474,-214,1438});
    states[1435] = new State(new int[]{141,1436,25,-85,63,-85,46,-85,49,-85,58,-85,11,-85,40,-85,33,-85,37,-85});
    states[1436] = new State(new int[]{10,1437});
    states[1437] = new State(-86);
    states[1438] = new State(new int[]{141,1439,25,-87,63,-87,46,-87,49,-87,58,-87,11,-87,40,-87,33,-87,37,-87});
    states[1439] = new State(new int[]{10,1440});
    states[1440] = new State(-88);
    states[1441] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,41,358},new int[]{-156,1442,-155,1003,-127,1004,-122,1005,-119,1006,-132,1011,-136,24,-137,27,-177,1012,-316,1014,-134,1018});
    states[1442] = new State(new int[]{8,554,10,-449},new int[]{-113,1443});
    states[1443] = new State(new int[]{10,991},new int[]{-193,1136});
    states[1444] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,41,358},new int[]{-155,1445,-127,1004,-122,1005,-119,1006,-132,1011,-136,24,-137,27,-177,1012,-316,1014,-134,1018});
    states[1445] = new State(new int[]{8,554,5,-449,10,-449},new int[]{-113,1446});
    states[1446] = new State(new int[]{5,1447,10,991},new int[]{-193,1171});
    states[1447] = new State(new int[]{136,412,79,25,80,26,74,28,72,29,147,154,149,155,148,156,109,334,108,335,137,149,139,150,138,152,8,440,135,445,20,450,44,458,45,536,30,540,70,544,61,547,40,552,33,576},new int[]{-259,1448,-260,409,-256,410,-85,175,-94,267,-95,268,-166,269,-132,196,-136,24,-137,27,-15,435,-185,436,-150,439,-152,147,-151,151,-257,442,-240,443,-233,444,-265,447,-266,448,-262,449,-254,456,-28,457,-247,535,-115,539,-116,543,-211,549,-209,550,-208,551,-285,580});
    states[1448] = new State(new int[]{10,991},new int[]{-193,1175});
    states[1449] = new State(-70);
    states[1450] = new State(new int[]{48,14,55,-60,25,-60,63,-60,46,-60,49,-60,58,-60,11,-60,40,-60,33,-60,24,-60,22,-60,26,-60,27,-60,85,-60,96,-60,84,-60},new int[]{-38,1451,-39,1321});
    states[1451] = new State(-51);
    states[1452] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-124,1453,-132,1456,-136,24,-137,27});
    states[1453] = new State(new int[]{10,1454});
    states[1454] = new State(new int[]{3,1385,39,-12,85,-12,96,-12,84,-12,48,-12,55,-12,25,-12,63,-12,46,-12,49,-12,58,-12,11,-12,40,-12,33,-12,24,-12,22,-12,26,-12,27,-12},new int[]{-171,1455,-172,1383,-170,1388});
    states[1455] = new State(-44);
    states[1456] = new State(-48);
    states[1457] = new State(-46);
    states[1458] = new State(-47);
    states[1459] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,78,32,77,33,76,34,75,35,65,36,60,37,121,38,18,39,17,40,59,41,19,42,122,43,123,44,124,45,125,46,126,47,127,48,128,49,129,50,130,51,131,52,20,53,70,54,84,55,21,56,22,57,25,58,26,59,27,60,68,61,92,62,28,63,29,64,30,65,23,66,97,67,94,68,31,69,32,70,33,71,36,72,37,73,38,74,96,75,39,76,40,77,42,78,43,79,44,80,90,81,45,82,95,83,46,84,24,85,47,86,67,87,91,88,48,89,49,90,50,91,51,92,52,93,53,94,54,95,55,96,57,97,98,98,99,99,102,100,100,101,101,102,58,103,71,104,34,105,35,106,41,108,85,109},new int[]{-142,1460,-123,112,-132,22,-136,24,-137,27,-277,30,-135,31,-278,107});
    states[1460] = new State(new int[]{10,1461,7,20});
    states[1461] = new State(new int[]{3,1385,39,-12,85,-12,96,-12,84,-12,48,-12,55,-12,25,-12,63,-12,46,-12,49,-12,58,-12,11,-12,40,-12,33,-12,24,-12,22,-12,26,-12,27,-12},new int[]{-171,1462,-172,1383,-170,1388});
    states[1462] = new State(-45);
    states[1463] = new State(-4);
    states[1464] = new State(new int[]{46,1466,52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,390,17,247,18,252,5,570},new int[]{-81,1465,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,336,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569});
    states[1465] = new State(-5);
    states[1466] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-129,1467,-132,1468,-136,24,-137,27});
    states[1467] = new State(-6);
    states[1468] = new State(new int[]{116,1008,2,-207},new int[]{-140,1243});
    states[1469] = new State(new int[]{136,23,79,25,80,26,74,28,72,29},new int[]{-302,1470,-303,1471,-132,1475,-136,24,-137,27});
    states[1470] = new State(-7);
    states[1471] = new State(new int[]{7,1472,116,168,2,-690},new int[]{-283,1474});
    states[1472] = new State(new int[]{136,23,79,25,80,26,74,28,72,29,78,32,77,33,76,34,75,35,65,36,60,37,121,38,18,39,17,40,59,41,19,42,122,43,123,44,124,45,125,46,126,47,127,48,128,49,129,50,130,51,131,52,20,53,70,54,84,55,21,56,22,57,25,58,26,59,27,60,68,61,92,62,28,63,29,64,30,65,23,66,97,67,94,68,31,69,32,70,33,71,36,72,37,73,38,74,96,75,39,76,40,77,42,78,43,79,44,80,90,81,45,82,95,83,46,84,24,85,47,86,67,87,91,88,48,89,49,90,50,91,51,92,52,93,53,94,54,95,55,96,57,97,98,98,99,99,102,100,100,101,101,102,58,103,71,104,34,105,35,106,41,108,85,109},new int[]{-123,1473,-132,22,-136,24,-137,27,-277,30,-135,31,-278,107});
    states[1473] = new State(-689);
    states[1474] = new State(-691);
    states[1475] = new State(-688);
    states[1476] = new State(new int[]{52,142,137,149,139,150,138,152,147,154,149,155,148,156,59,158,11,321,128,330,109,334,108,335,134,343,136,23,79,25,80,26,74,28,72,227,41,358,38,388,8,487,17,247,18,252,5,570,49,708},new int[]{-243,1477,-81,1478,-91,127,-90,132,-89,290,-93,298,-76,308,-88,320,-14,143,-150,146,-152,147,-151,151,-15,153,-53,157,-185,332,-100,1479,-117,337,-99,344,-132,356,-136,24,-137,27,-177,357,-241,494,-279,495,-16,496,-54,512,-103,518,-159,519,-252,520,-77,521,-248,524,-250,525,-251,567,-225,568,-105,569,-4,1480,-296,1481});
    states[1477] = new State(-8);
    states[1478] = new State(-9);
    states[1479] = new State(new int[]{103,382,104,383,105,384,106,385,107,386,131,-675,129,-675,111,-675,110,-675,124,-675,125,-675,126,-675,127,-675,123,-675,5,-675,109,-675,108,-675,121,-675,122,-675,119,-675,113,-675,118,-675,116,-675,114,-675,117,-675,115,-675,130,-675,15,-675,13,-675,2,-675,112,-675},new int[]{-180,124});
    states[1480] = new State(-10);
    states[1481] = new State(-11);

    rules[1] = new Rule(-330, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-219});
    rules[3] = new Rule(-1, new int[]{-289});
    rules[4] = new Rule(-1, new int[]{-161});
    rules[5] = new Rule(-161, new int[]{81,-81});
    rules[6] = new Rule(-161, new int[]{81,46,-129});
    rules[7] = new Rule(-161, new int[]{83,-302});
    rules[8] = new Rule(-161, new int[]{82,-243});
    rules[9] = new Rule(-243, new int[]{-81});
    rules[10] = new Rule(-243, new int[]{-4});
    rules[11] = new Rule(-243, new int[]{-296});
    rules[12] = new Rule(-171, new int[]{});
    rules[13] = new Rule(-171, new int[]{-172});
    rules[14] = new Rule(-172, new int[]{-170});
    rules[15] = new Rule(-172, new int[]{-172,-170});
    rules[16] = new Rule(-170, new int[]{3,136});
    rules[17] = new Rule(-170, new int[]{3,137});
    rules[18] = new Rule(-219, new int[]{-220,-171,-287,-17,-174});
    rules[19] = new Rule(-174, new int[]{7});
    rules[20] = new Rule(-174, new int[]{10});
    rules[21] = new Rule(-174, new int[]{5});
    rules[22] = new Rule(-174, new int[]{93});
    rules[23] = new Rule(-174, new int[]{6});
    rules[24] = new Rule(-174, new int[]{});
    rules[25] = new Rule(-220, new int[]{});
    rules[26] = new Rule(-220, new int[]{57,-132,-173});
    rules[27] = new Rule(-173, new int[]{10});
    rules[28] = new Rule(-173, new int[]{8,-175,9,10});
    rules[29] = new Rule(-175, new int[]{-131});
    rules[30] = new Rule(-175, new int[]{-175,93,-131});
    rules[31] = new Rule(-131, new int[]{-132});
    rules[32] = new Rule(-17, new int[]{-34,-239});
    rules[33] = new Rule(-34, new int[]{-38});
    rules[34] = new Rule(-142, new int[]{-123});
    rules[35] = new Rule(-142, new int[]{-142,7,-123});
    rules[36] = new Rule(-287, new int[]{});
    rules[37] = new Rule(-287, new int[]{-287,48,-288,10});
    rules[38] = new Rule(-288, new int[]{-290});
    rules[39] = new Rule(-288, new int[]{-288,93,-290});
    rules[40] = new Rule(-290, new int[]{-142});
    rules[41] = new Rule(-290, new int[]{-142,130,137});
    rules[42] = new Rule(-289, new int[]{-6,-291,-147,-146,-139,7});
    rules[43] = new Rule(-289, new int[]{-6,-291,-148,-139,7});
    rules[44] = new Rule(-291, new int[]{-2,-124,10,-171});
    rules[45] = new Rule(-291, new int[]{102,-142,10,-171});
    rules[46] = new Rule(-2, new int[]{98});
    rules[47] = new Rule(-2, new int[]{99});
    rules[48] = new Rule(-124, new int[]{-132});
    rules[49] = new Rule(-147, new int[]{39,-287,-37});
    rules[50] = new Rule(-146, new int[]{37,-287,-38});
    rules[51] = new Rule(-148, new int[]{-287,-38});
    rules[52] = new Rule(-139, new int[]{85});
    rules[53] = new Rule(-139, new int[]{96,-236,85});
    rules[54] = new Rule(-139, new int[]{96,-236,97,-236,85});
    rules[55] = new Rule(-139, new int[]{84,-236,85});
    rules[56] = new Rule(-37, new int[]{-35});
    rules[57] = new Rule(-35, new int[]{});
    rules[58] = new Rule(-35, new int[]{-35,-44});
    rules[59] = new Rule(-38, new int[]{-39});
    rules[60] = new Rule(-39, new int[]{});
    rules[61] = new Rule(-39, new int[]{-39,-43});
    rules[62] = new Rule(-40, new int[]{-36});
    rules[63] = new Rule(-36, new int[]{});
    rules[64] = new Rule(-36, new int[]{-36,-42});
    rules[65] = new Rule(-44, new int[]{-26});
    rules[66] = new Rule(-44, new int[]{-48});
    rules[67] = new Rule(-44, new int[]{-273});
    rules[68] = new Rule(-44, new int[]{-292});
    rules[69] = new Rule(-44, new int[]{-217});
    rules[70] = new Rule(-44, new int[]{-216});
    rules[71] = new Rule(-43, new int[]{-153});
    rules[72] = new Rule(-43, new int[]{-26});
    rules[73] = new Rule(-43, new int[]{-48});
    rules[74] = new Rule(-43, new int[]{-273});
    rules[75] = new Rule(-43, new int[]{-292});
    rules[76] = new Rule(-43, new int[]{-205});
    rules[77] = new Rule(-198, new int[]{-199});
    rules[78] = new Rule(-198, new int[]{-202});
    rules[79] = new Rule(-205, new int[]{-6,-198});
    rules[80] = new Rule(-42, new int[]{-153});
    rules[81] = new Rule(-42, new int[]{-26});
    rules[82] = new Rule(-42, new int[]{-48});
    rules[83] = new Rule(-42, new int[]{-273});
    rules[84] = new Rule(-42, new int[]{-292});
    rules[85] = new Rule(-217, new int[]{-6,-210});
    rules[86] = new Rule(-217, new int[]{-6,-210,141,10});
    rules[87] = new Rule(-216, new int[]{-6,-214});
    rules[88] = new Rule(-216, new int[]{-6,-214,141,10});
    rules[89] = new Rule(-153, new int[]{55,-141,10});
    rules[90] = new Rule(-141, new int[]{-128});
    rules[91] = new Rule(-141, new int[]{-141,93,-128});
    rules[92] = new Rule(-128, new int[]{147});
    rules[93] = new Rule(-128, new int[]{148});
    rules[94] = new Rule(-128, new int[]{-132});
    rules[95] = new Rule(-26, new int[]{25,-24});
    rules[96] = new Rule(-26, new int[]{-26,-24});
    rules[97] = new Rule(-48, new int[]{63,-24});
    rules[98] = new Rule(-48, new int[]{-48,-24});
    rules[99] = new Rule(-273, new int[]{46,-45});
    rules[100] = new Rule(-273, new int[]{-273,-45});
    rules[101] = new Rule(-292, new int[]{49,-293});
    rules[102] = new Rule(-292, new int[]{58,-293});
    rules[103] = new Rule(-292, new int[]{-292,-293});
    rules[104] = new Rule(-292, new int[]{49,8,-132,93,-143,9,103,-91,10});
    rules[105] = new Rule(-24, new int[]{-25,10});
    rules[106] = new Rule(-25, new int[]{-126,113,-97});
    rules[107] = new Rule(-25, new int[]{-126,5,-260,113,-78});
    rules[108] = new Rule(-97, new int[]{-83});
    rules[109] = new Rule(-97, new int[]{-87});
    rules[110] = new Rule(-126, new int[]{-132});
    rules[111] = new Rule(-73, new int[]{-91});
    rules[112] = new Rule(-73, new int[]{-73,93,-91});
    rules[113] = new Rule(-83, new int[]{-75});
    rules[114] = new Rule(-83, new int[]{-75,-178,-75});
    rules[115] = new Rule(-83, new int[]{-226});
    rules[116] = new Rule(-226, new int[]{-83,13,-83,5,-83});
    rules[117] = new Rule(-178, new int[]{113});
    rules[118] = new Rule(-178, new int[]{118});
    rules[119] = new Rule(-178, new int[]{116});
    rules[120] = new Rule(-178, new int[]{114});
    rules[121] = new Rule(-178, new int[]{117});
    rules[122] = new Rule(-178, new int[]{115});
    rules[123] = new Rule(-178, new int[]{130});
    rules[124] = new Rule(-75, new int[]{-12});
    rules[125] = new Rule(-75, new int[]{-75,-179,-12});
    rules[126] = new Rule(-179, new int[]{109});
    rules[127] = new Rule(-179, new int[]{108});
    rules[128] = new Rule(-179, new int[]{121});
    rules[129] = new Rule(-179, new int[]{122});
    rules[130] = new Rule(-249, new int[]{-12,-187,-268});
    rules[131] = new Rule(-253, new int[]{-10,112,-10});
    rules[132] = new Rule(-12, new int[]{-10});
    rules[133] = new Rule(-12, new int[]{-249});
    rules[134] = new Rule(-12, new int[]{-253});
    rules[135] = new Rule(-12, new int[]{-12,-181,-10});
    rules[136] = new Rule(-12, new int[]{-12,-181,-253});
    rules[137] = new Rule(-181, new int[]{111});
    rules[138] = new Rule(-181, new int[]{110});
    rules[139] = new Rule(-181, new int[]{124});
    rules[140] = new Rule(-181, new int[]{125});
    rules[141] = new Rule(-181, new int[]{126});
    rules[142] = new Rule(-181, new int[]{127});
    rules[143] = new Rule(-181, new int[]{123});
    rules[144] = new Rule(-10, new int[]{-13});
    rules[145] = new Rule(-10, new int[]{-224});
    rules[146] = new Rule(-10, new int[]{52});
    rules[147] = new Rule(-10, new int[]{134,-10});
    rules[148] = new Rule(-10, new int[]{8,-83,9});
    rules[149] = new Rule(-10, new int[]{128,-10});
    rules[150] = new Rule(-10, new int[]{-185,-10});
    rules[151] = new Rule(-10, new int[]{-159});
    rules[152] = new Rule(-224, new int[]{11,-69,12});
    rules[153] = new Rule(-185, new int[]{109});
    rules[154] = new Rule(-185, new int[]{108});
    rules[155] = new Rule(-13, new int[]{-132});
    rules[156] = new Rule(-13, new int[]{-150});
    rules[157] = new Rule(-13, new int[]{-15});
    rules[158] = new Rule(-13, new int[]{38,-132});
    rules[159] = new Rule(-13, new int[]{-241});
    rules[160] = new Rule(-13, new int[]{-279});
    rules[161] = new Rule(-13, new int[]{-13,-11});
    rules[162] = new Rule(-13, new int[]{-13,4,-283});
    rules[163] = new Rule(-13, new int[]{-13,11,-106,12});
    rules[164] = new Rule(-11, new int[]{7,-123});
    rules[165] = new Rule(-11, new int[]{135});
    rules[166] = new Rule(-11, new int[]{8,-70,9});
    rules[167] = new Rule(-11, new int[]{11,-69,12});
    rules[168] = new Rule(-70, new int[]{-66});
    rules[169] = new Rule(-70, new int[]{});
    rules[170] = new Rule(-69, new int[]{-67});
    rules[171] = new Rule(-69, new int[]{});
    rules[172] = new Rule(-67, new int[]{-86});
    rules[173] = new Rule(-67, new int[]{-67,93,-86});
    rules[174] = new Rule(-86, new int[]{-83});
    rules[175] = new Rule(-86, new int[]{-83,6,-83});
    rules[176] = new Rule(-15, new int[]{147});
    rules[177] = new Rule(-15, new int[]{149});
    rules[178] = new Rule(-15, new int[]{148});
    rules[179] = new Rule(-78, new int[]{-83});
    rules[180] = new Rule(-78, new int[]{-87});
    rules[181] = new Rule(-78, new int[]{-227});
    rules[182] = new Rule(-87, new int[]{8,-62,9});
    rules[183] = new Rule(-87, new int[]{8,-227,9});
    rules[184] = new Rule(-87, new int[]{8,-87,9});
    rules[185] = new Rule(-62, new int[]{});
    rules[186] = new Rule(-62, new int[]{-61});
    rules[187] = new Rule(-61, new int[]{-79});
    rules[188] = new Rule(-61, new int[]{-61,93,-79});
    rules[189] = new Rule(-227, new int[]{8,-229,9});
    rules[190] = new Rule(-229, new int[]{-228});
    rules[191] = new Rule(-229, new int[]{-228,10});
    rules[192] = new Rule(-228, new int[]{-230});
    rules[193] = new Rule(-228, new int[]{-228,10,-230});
    rules[194] = new Rule(-230, new int[]{-121,5,-78});
    rules[195] = new Rule(-121, new int[]{-132});
    rules[196] = new Rule(-45, new int[]{-6,-46});
    rules[197] = new Rule(-6, new int[]{-234});
    rules[198] = new Rule(-6, new int[]{-6,-234});
    rules[199] = new Rule(-6, new int[]{});
    rules[200] = new Rule(-234, new int[]{11,-235,12});
    rules[201] = new Rule(-235, new int[]{-8});
    rules[202] = new Rule(-235, new int[]{-235,93,-8});
    rules[203] = new Rule(-8, new int[]{-9});
    rules[204] = new Rule(-8, new int[]{-132,5,-9});
    rules[205] = new Rule(-46, new int[]{-129,113,-271,10});
    rules[206] = new Rule(-46, new int[]{-130,-271,10});
    rules[207] = new Rule(-129, new int[]{-132});
    rules[208] = new Rule(-129, new int[]{-132,-140});
    rules[209] = new Rule(-130, new int[]{-132,116,-143,115});
    rules[210] = new Rule(-271, new int[]{-260});
    rules[211] = new Rule(-271, new int[]{-27});
    rules[212] = new Rule(-257, new int[]{-256,13});
    rules[213] = new Rule(-260, new int[]{-256});
    rules[214] = new Rule(-260, new int[]{-257});
    rules[215] = new Rule(-260, new int[]{-240});
    rules[216] = new Rule(-260, new int[]{-233});
    rules[217] = new Rule(-260, new int[]{-265});
    rules[218] = new Rule(-260, new int[]{-211});
    rules[219] = new Rule(-260, new int[]{-285});
    rules[220] = new Rule(-285, new int[]{-166,-283});
    rules[221] = new Rule(-283, new int[]{116,-281,114});
    rules[222] = new Rule(-284, new int[]{118});
    rules[223] = new Rule(-284, new int[]{116,-282,114});
    rules[224] = new Rule(-281, new int[]{-263});
    rules[225] = new Rule(-281, new int[]{-281,93,-263});
    rules[226] = new Rule(-282, new int[]{-264});
    rules[227] = new Rule(-282, new int[]{-282,93,-264});
    rules[228] = new Rule(-264, new int[]{});
    rules[229] = new Rule(-263, new int[]{-256});
    rules[230] = new Rule(-263, new int[]{-256,13});
    rules[231] = new Rule(-263, new int[]{-265});
    rules[232] = new Rule(-263, new int[]{-211});
    rules[233] = new Rule(-263, new int[]{-285});
    rules[234] = new Rule(-256, new int[]{-85});
    rules[235] = new Rule(-256, new int[]{-85,6,-85});
    rules[236] = new Rule(-256, new int[]{8,-74,9});
    rules[237] = new Rule(-85, new int[]{-94});
    rules[238] = new Rule(-85, new int[]{-85,-179,-94});
    rules[239] = new Rule(-94, new int[]{-95});
    rules[240] = new Rule(-94, new int[]{-94,-181,-95});
    rules[241] = new Rule(-95, new int[]{-166});
    rules[242] = new Rule(-95, new int[]{-15});
    rules[243] = new Rule(-95, new int[]{-185,-95});
    rules[244] = new Rule(-95, new int[]{-150});
    rules[245] = new Rule(-95, new int[]{-95,8,-69,9});
    rules[246] = new Rule(-166, new int[]{-132});
    rules[247] = new Rule(-166, new int[]{-166,7,-123});
    rules[248] = new Rule(-74, new int[]{-72,93,-72});
    rules[249] = new Rule(-74, new int[]{-74,93,-72});
    rules[250] = new Rule(-72, new int[]{-260});
    rules[251] = new Rule(-72, new int[]{-260,113,-81});
    rules[252] = new Rule(-233, new int[]{135,-259});
    rules[253] = new Rule(-265, new int[]{-266});
    rules[254] = new Rule(-265, new int[]{61,-266});
    rules[255] = new Rule(-266, new int[]{-262});
    rules[256] = new Rule(-266, new int[]{-28});
    rules[257] = new Rule(-266, new int[]{-247});
    rules[258] = new Rule(-266, new int[]{-115});
    rules[259] = new Rule(-266, new int[]{-116});
    rules[260] = new Rule(-116, new int[]{70,54,-260});
    rules[261] = new Rule(-262, new int[]{20,11,-149,12,54,-260});
    rules[262] = new Rule(-262, new int[]{-254});
    rules[263] = new Rule(-254, new int[]{20,54,-260});
    rules[264] = new Rule(-149, new int[]{-255});
    rules[265] = new Rule(-149, new int[]{-149,93,-255});
    rules[266] = new Rule(-255, new int[]{-256});
    rules[267] = new Rule(-255, new int[]{});
    rules[268] = new Rule(-247, new int[]{45,54,-260});
    rules[269] = new Rule(-115, new int[]{30,54,-260});
    rules[270] = new Rule(-115, new int[]{30});
    rules[271] = new Rule(-240, new int[]{136,11,-83,12});
    rules[272] = new Rule(-211, new int[]{-209});
    rules[273] = new Rule(-209, new int[]{-208});
    rules[274] = new Rule(-208, new int[]{40,-113});
    rules[275] = new Rule(-208, new int[]{33,-113,5,-259});
    rules[276] = new Rule(-208, new int[]{-166,120,-263});
    rules[277] = new Rule(-208, new int[]{-285,120,-263});
    rules[278] = new Rule(-208, new int[]{8,9,120,-263});
    rules[279] = new Rule(-208, new int[]{8,-74,9,120,-263});
    rules[280] = new Rule(-208, new int[]{-166,120,8,9});
    rules[281] = new Rule(-208, new int[]{-285,120,8,9});
    rules[282] = new Rule(-208, new int[]{8,9,120,8,9});
    rules[283] = new Rule(-208, new int[]{8,-74,9,120,8,9});
    rules[284] = new Rule(-27, new int[]{-20,-275,-169,-299,-23});
    rules[285] = new Rule(-28, new int[]{44,-169,-299,-22,85});
    rules[286] = new Rule(-19, new int[]{65});
    rules[287] = new Rule(-19, new int[]{66});
    rules[288] = new Rule(-19, new int[]{140});
    rules[289] = new Rule(-19, new int[]{23});
    rules[290] = new Rule(-19, new int[]{24});
    rules[291] = new Rule(-20, new int[]{});
    rules[292] = new Rule(-20, new int[]{-21});
    rules[293] = new Rule(-21, new int[]{-19});
    rules[294] = new Rule(-21, new int[]{-21,-19});
    rules[295] = new Rule(-275, new int[]{22});
    rules[296] = new Rule(-275, new int[]{39});
    rules[297] = new Rule(-275, new int[]{60});
    rules[298] = new Rule(-275, new int[]{60,22});
    rules[299] = new Rule(-275, new int[]{60,44});
    rules[300] = new Rule(-275, new int[]{60,39});
    rules[301] = new Rule(-23, new int[]{});
    rules[302] = new Rule(-23, new int[]{-22,85});
    rules[303] = new Rule(-169, new int[]{});
    rules[304] = new Rule(-169, new int[]{8,-168,9});
    rules[305] = new Rule(-168, new int[]{-167});
    rules[306] = new Rule(-168, new int[]{-168,93,-167});
    rules[307] = new Rule(-167, new int[]{-166});
    rules[308] = new Rule(-167, new int[]{-285});
    rules[309] = new Rule(-140, new int[]{116,-143,114});
    rules[310] = new Rule(-299, new int[]{});
    rules[311] = new Rule(-299, new int[]{-298});
    rules[312] = new Rule(-298, new int[]{-297});
    rules[313] = new Rule(-298, new int[]{-298,-297});
    rules[314] = new Rule(-297, new int[]{19,-143,5,-272,10});
    rules[315] = new Rule(-272, new int[]{-269});
    rules[316] = new Rule(-272, new int[]{-272,93,-269});
    rules[317] = new Rule(-269, new int[]{-260});
    rules[318] = new Rule(-269, new int[]{22});
    rules[319] = new Rule(-269, new int[]{44});
    rules[320] = new Rule(-269, new int[]{26});
    rules[321] = new Rule(-22, new int[]{-29});
    rules[322] = new Rule(-22, new int[]{-22,-7,-29});
    rules[323] = new Rule(-7, new int[]{78});
    rules[324] = new Rule(-7, new int[]{77});
    rules[325] = new Rule(-7, new int[]{76});
    rules[326] = new Rule(-7, new int[]{75});
    rules[327] = new Rule(-29, new int[]{});
    rules[328] = new Rule(-29, new int[]{-31,-176});
    rules[329] = new Rule(-29, new int[]{-30});
    rules[330] = new Rule(-29, new int[]{-31,10,-30});
    rules[331] = new Rule(-143, new int[]{-132});
    rules[332] = new Rule(-143, new int[]{-143,93,-132});
    rules[333] = new Rule(-176, new int[]{});
    rules[334] = new Rule(-176, new int[]{10});
    rules[335] = new Rule(-31, new int[]{-41});
    rules[336] = new Rule(-31, new int[]{-31,10,-41});
    rules[337] = new Rule(-41, new int[]{-6,-47});
    rules[338] = new Rule(-30, new int[]{-50});
    rules[339] = new Rule(-30, new int[]{-30,-50});
    rules[340] = new Rule(-50, new int[]{-49});
    rules[341] = new Rule(-50, new int[]{-51});
    rules[342] = new Rule(-47, new int[]{25,-25});
    rules[343] = new Rule(-47, new int[]{-295});
    rules[344] = new Rule(-47, new int[]{-3,-295});
    rules[345] = new Rule(-3, new int[]{24});
    rules[346] = new Rule(-3, new int[]{22});
    rules[347] = new Rule(-295, new int[]{-294});
    rules[348] = new Rule(-295, new int[]{58,-143,5,-260});
    rules[349] = new Rule(-49, new int[]{-6,-207});
    rules[350] = new Rule(-49, new int[]{-6,-204});
    rules[351] = new Rule(-204, new int[]{-200});
    rules[352] = new Rule(-204, new int[]{-203});
    rules[353] = new Rule(-207, new int[]{-3,-215});
    rules[354] = new Rule(-207, new int[]{-215});
    rules[355] = new Rule(-207, new int[]{-212});
    rules[356] = new Rule(-215, new int[]{-213});
    rules[357] = new Rule(-213, new int[]{-210});
    rules[358] = new Rule(-213, new int[]{-214});
    rules[359] = new Rule(-212, new int[]{26,-157,-113,-193});
    rules[360] = new Rule(-212, new int[]{-3,26,-157,-113,-193});
    rules[361] = new Rule(-212, new int[]{27,-157,-113,-193});
    rules[362] = new Rule(-157, new int[]{-156});
    rules[363] = new Rule(-157, new int[]{});
    rules[364] = new Rule(-158, new int[]{-132});
    rules[365] = new Rule(-158, new int[]{-135});
    rules[366] = new Rule(-158, new int[]{-158,7,-132});
    rules[367] = new Rule(-158, new int[]{-158,7,-135});
    rules[368] = new Rule(-51, new int[]{-6,-242});
    rules[369] = new Rule(-242, new int[]{42,-158,-218,-188,10,-191});
    rules[370] = new Rule(-242, new int[]{42,-158,-218,-188,10,-196,10,-191});
    rules[371] = new Rule(-242, new int[]{-3,42,-158,-218,-188,10,-191});
    rules[372] = new Rule(-242, new int[]{-3,42,-158,-218,-188,10,-196,10,-191});
    rules[373] = new Rule(-191, new int[]{});
    rules[374] = new Rule(-191, new int[]{59,10});
    rules[375] = new Rule(-218, new int[]{-223,5,-259});
    rules[376] = new Rule(-223, new int[]{});
    rules[377] = new Rule(-223, new int[]{11,-222,12});
    rules[378] = new Rule(-222, new int[]{-221});
    rules[379] = new Rule(-222, new int[]{-222,10,-221});
    rules[380] = new Rule(-221, new int[]{-143,5,-259});
    rules[381] = new Rule(-101, new int[]{-82});
    rules[382] = new Rule(-101, new int[]{});
    rules[383] = new Rule(-188, new int[]{});
    rules[384] = new Rule(-188, new int[]{79,-101,-189});
    rules[385] = new Rule(-188, new int[]{80,-244,-190});
    rules[386] = new Rule(-189, new int[]{});
    rules[387] = new Rule(-189, new int[]{80,-244});
    rules[388] = new Rule(-190, new int[]{});
    rules[389] = new Rule(-190, new int[]{79,-101});
    rules[390] = new Rule(-293, new int[]{-294,10});
    rules[391] = new Rule(-320, new int[]{103});
    rules[392] = new Rule(-320, new int[]{113});
    rules[393] = new Rule(-294, new int[]{-143,5,-260});
    rules[394] = new Rule(-294, new int[]{-143,103,-81});
    rules[395] = new Rule(-294, new int[]{-143,5,-260,-320,-80});
    rules[396] = new Rule(-80, new int[]{-79});
    rules[397] = new Rule(-80, new int[]{-305});
    rules[398] = new Rule(-80, new int[]{-132,120,-310});
    rules[399] = new Rule(-80, new int[]{8,9,-306,120,-310});
    rules[400] = new Rule(-80, new int[]{8,-62,9,120,-310});
    rules[401] = new Rule(-79, new int[]{-78});
    rules[402] = new Rule(-79, new int[]{-53});
    rules[403] = new Rule(-202, new int[]{-212,-163});
    rules[404] = new Rule(-202, new int[]{26,-157,-113,103,-244,10});
    rules[405] = new Rule(-202, new int[]{-3,26,-157,-113,103,-244,10});
    rules[406] = new Rule(-203, new int[]{-212,-162});
    rules[407] = new Rule(-203, new int[]{26,-157,-113,103,-244,10});
    rules[408] = new Rule(-203, new int[]{-3,26,-157,-113,103,-244,10});
    rules[409] = new Rule(-199, new int[]{-206});
    rules[410] = new Rule(-199, new int[]{-3,-206});
    rules[411] = new Rule(-206, new int[]{-213,-164});
    rules[412] = new Rule(-206, new int[]{33,-155,-113,5,-259,-194,103,-91,10});
    rules[413] = new Rule(-206, new int[]{33,-155,-113,-194,103,-91,10});
    rules[414] = new Rule(-206, new int[]{33,-155,-113,5,-259,-194,103,-304,10});
    rules[415] = new Rule(-206, new int[]{33,-155,-113,-194,103,-304,10});
    rules[416] = new Rule(-206, new int[]{40,-156,-113,-194,103,-244,10});
    rules[417] = new Rule(-206, new int[]{-213,141,10});
    rules[418] = new Rule(-200, new int[]{-201});
    rules[419] = new Rule(-200, new int[]{-3,-201});
    rules[420] = new Rule(-201, new int[]{-213,-162});
    rules[421] = new Rule(-201, new int[]{33,-155,-113,5,-259,-194,103,-92,10});
    rules[422] = new Rule(-201, new int[]{33,-155,-113,-194,103,-92,10});
    rules[423] = new Rule(-201, new int[]{40,-156,-113,-194,103,-244,10});
    rules[424] = new Rule(-164, new int[]{-163});
    rules[425] = new Rule(-164, new int[]{-57});
    rules[426] = new Rule(-156, new int[]{-155});
    rules[427] = new Rule(-155, new int[]{-127});
    rules[428] = new Rule(-155, new int[]{-316,7,-127});
    rules[429] = new Rule(-134, new int[]{-122});
    rules[430] = new Rule(-316, new int[]{-134});
    rules[431] = new Rule(-316, new int[]{-316,7,-134});
    rules[432] = new Rule(-127, new int[]{-122});
    rules[433] = new Rule(-127, new int[]{-177});
    rules[434] = new Rule(-127, new int[]{-177,-140});
    rules[435] = new Rule(-122, new int[]{-119});
    rules[436] = new Rule(-122, new int[]{-119,-140});
    rules[437] = new Rule(-119, new int[]{-132});
    rules[438] = new Rule(-210, new int[]{40,-156,-113,-193,-299});
    rules[439] = new Rule(-214, new int[]{33,-155,-113,-193,-299});
    rules[440] = new Rule(-214, new int[]{33,-155,-113,5,-259,-193,-299});
    rules[441] = new Rule(-57, new int[]{100,-96,74,-96,10});
    rules[442] = new Rule(-57, new int[]{100,-96,10});
    rules[443] = new Rule(-57, new int[]{100,10});
    rules[444] = new Rule(-96, new int[]{-132});
    rules[445] = new Rule(-96, new int[]{-150});
    rules[446] = new Rule(-163, new int[]{-38,-239,10});
    rules[447] = new Rule(-162, new int[]{-40,-239,10});
    rules[448] = new Rule(-162, new int[]{-57});
    rules[449] = new Rule(-113, new int[]{});
    rules[450] = new Rule(-113, new int[]{8,9});
    rules[451] = new Rule(-113, new int[]{8,-114,9});
    rules[452] = new Rule(-114, new int[]{-52});
    rules[453] = new Rule(-114, new int[]{-114,10,-52});
    rules[454] = new Rule(-52, new int[]{-6,-280});
    rules[455] = new Rule(-280, new int[]{-144,5,-259});
    rules[456] = new Rule(-280, new int[]{49,-144,5,-259});
    rules[457] = new Rule(-280, new int[]{25,-144,5,-259});
    rules[458] = new Rule(-280, new int[]{101,-144,5,-259});
    rules[459] = new Rule(-280, new int[]{-144,5,-259,103,-81});
    rules[460] = new Rule(-280, new int[]{49,-144,5,-259,103,-81});
    rules[461] = new Rule(-280, new int[]{25,-144,5,-259,103,-81});
    rules[462] = new Rule(-144, new int[]{-120});
    rules[463] = new Rule(-144, new int[]{-144,93,-120});
    rules[464] = new Rule(-120, new int[]{-132});
    rules[465] = new Rule(-259, new int[]{-260});
    rules[466] = new Rule(-261, new int[]{-256});
    rules[467] = new Rule(-261, new int[]{-240});
    rules[468] = new Rule(-261, new int[]{-233});
    rules[469] = new Rule(-261, new int[]{-265});
    rules[470] = new Rule(-261, new int[]{-285});
    rules[471] = new Rule(-245, new int[]{-244});
    rules[472] = new Rule(-245, new int[]{-128,5,-245});
    rules[473] = new Rule(-244, new int[]{});
    rules[474] = new Rule(-244, new int[]{-4});
    rules[475] = new Rule(-244, new int[]{-197});
    rules[476] = new Rule(-244, new int[]{-118});
    rules[477] = new Rule(-244, new int[]{-239});
    rules[478] = new Rule(-244, new int[]{-138});
    rules[479] = new Rule(-244, new int[]{-32});
    rules[480] = new Rule(-244, new int[]{-231});
    rules[481] = new Rule(-244, new int[]{-300});
    rules[482] = new Rule(-244, new int[]{-109});
    rules[483] = new Rule(-244, new int[]{-301});
    rules[484] = new Rule(-244, new int[]{-145});
    rules[485] = new Rule(-244, new int[]{-286});
    rules[486] = new Rule(-244, new int[]{-232});
    rules[487] = new Rule(-244, new int[]{-108});
    rules[488] = new Rule(-244, new int[]{-296});
    rules[489] = new Rule(-244, new int[]{-55});
    rules[490] = new Rule(-244, new int[]{-154});
    rules[491] = new Rule(-244, new int[]{-111});
    rules[492] = new Rule(-244, new int[]{-112});
    rules[493] = new Rule(-244, new int[]{-110});
    rules[494] = new Rule(-244, new int[]{-323});
    rules[495] = new Rule(-110, new int[]{69,-91,92,-244});
    rules[496] = new Rule(-111, new int[]{71,-91});
    rules[497] = new Rule(-112, new int[]{71,70,-91});
    rules[498] = new Rule(-296, new int[]{49,-294});
    rules[499] = new Rule(-296, new int[]{8,49,-132,93,-319,9,103,-81});
    rules[500] = new Rule(-296, new int[]{49,8,-132,93,-143,9,103,-81});
    rules[501] = new Rule(-4, new int[]{-100,-180,-82});
    rules[502] = new Rule(-4, new int[]{8,-99,93,-318,9,-180,-81});
    rules[503] = new Rule(-318, new int[]{-99});
    rules[504] = new Rule(-318, new int[]{-318,93,-99});
    rules[505] = new Rule(-319, new int[]{49,-132});
    rules[506] = new Rule(-319, new int[]{-319,93,49,-132});
    rules[507] = new Rule(-197, new int[]{-100});
    rules[508] = new Rule(-118, new int[]{53,-128});
    rules[509] = new Rule(-239, new int[]{84,-236,85});
    rules[510] = new Rule(-236, new int[]{-245});
    rules[511] = new Rule(-236, new int[]{-236,10,-245});
    rules[512] = new Rule(-138, new int[]{36,-91,47,-244});
    rules[513] = new Rule(-138, new int[]{36,-91,47,-244,28,-244});
    rules[514] = new Rule(-323, new int[]{34,-91,51,-325,-237,85});
    rules[515] = new Rule(-323, new int[]{34,-91,51,-325,10,-237,85});
    rules[516] = new Rule(-325, new int[]{-324});
    rules[517] = new Rule(-325, new int[]{-325,10,-324});
    rules[518] = new Rule(-324, new int[]{-322,35,-91,5,-244});
    rules[519] = new Rule(-324, new int[]{-322,5,-244});
    rules[520] = new Rule(-32, new int[]{21,-91,54,-33,-237,85});
    rules[521] = new Rule(-32, new int[]{21,-91,54,-33,10,-237,85});
    rules[522] = new Rule(-32, new int[]{21,-91,54,-237,85});
    rules[523] = new Rule(-33, new int[]{-246});
    rules[524] = new Rule(-33, new int[]{-33,10,-246});
    rules[525] = new Rule(-246, new int[]{-68,5,-244});
    rules[526] = new Rule(-68, new int[]{-98});
    rules[527] = new Rule(-68, new int[]{-68,93,-98});
    rules[528] = new Rule(-98, new int[]{-86});
    rules[529] = new Rule(-237, new int[]{});
    rules[530] = new Rule(-237, new int[]{28,-236});
    rules[531] = new Rule(-231, new int[]{90,-236,91,-81});
    rules[532] = new Rule(-300, new int[]{50,-91,-276,-244});
    rules[533] = new Rule(-276, new int[]{92});
    rules[534] = new Rule(-276, new int[]{});
    rules[535] = new Rule(-154, new int[]{56,-91,92,-244});
    rules[536] = new Rule(-108, new int[]{32,-132,-258,130,-91,92,-244});
    rules[537] = new Rule(-108, new int[]{32,49,-132,5,-260,130,-91,92,-244});
    rules[538] = new Rule(-108, new int[]{32,49,-132,130,-91,92,-244});
    rules[539] = new Rule(-258, new int[]{5,-260});
    rules[540] = new Rule(-258, new int[]{});
    rules[541] = new Rule(-109, new int[]{31,-18,-132,-270,-91,-104,-91,-276,-244});
    rules[542] = new Rule(-18, new int[]{49});
    rules[543] = new Rule(-18, new int[]{});
    rules[544] = new Rule(-270, new int[]{103});
    rules[545] = new Rule(-270, new int[]{5,-166,103});
    rules[546] = new Rule(-104, new int[]{67});
    rules[547] = new Rule(-104, new int[]{68});
    rules[548] = new Rule(-301, new int[]{51,-66,92,-244});
    rules[549] = new Rule(-145, new int[]{38});
    rules[550] = new Rule(-286, new int[]{95,-236,-274});
    rules[551] = new Rule(-274, new int[]{94,-236,85});
    rules[552] = new Rule(-274, new int[]{29,-56,85});
    rules[553] = new Rule(-56, new int[]{-59,-238});
    rules[554] = new Rule(-56, new int[]{-59,10,-238});
    rules[555] = new Rule(-56, new int[]{-236});
    rules[556] = new Rule(-59, new int[]{-58});
    rules[557] = new Rule(-59, new int[]{-59,10,-58});
    rules[558] = new Rule(-238, new int[]{});
    rules[559] = new Rule(-238, new int[]{28,-236});
    rules[560] = new Rule(-58, new int[]{73,-60,92,-244});
    rules[561] = new Rule(-60, new int[]{-165});
    rules[562] = new Rule(-60, new int[]{-125,5,-165});
    rules[563] = new Rule(-165, new int[]{-166});
    rules[564] = new Rule(-125, new int[]{-132});
    rules[565] = new Rule(-232, new int[]{43});
    rules[566] = new Rule(-232, new int[]{43,-81});
    rules[567] = new Rule(-66, new int[]{-82});
    rules[568] = new Rule(-66, new int[]{-66,93,-82});
    rules[569] = new Rule(-55, new int[]{-160});
    rules[570] = new Rule(-160, new int[]{-159});
    rules[571] = new Rule(-82, new int[]{-81});
    rules[572] = new Rule(-82, new int[]{-304});
    rules[573] = new Rule(-81, new int[]{-91});
    rules[574] = new Rule(-81, new int[]{-105});
    rules[575] = new Rule(-91, new int[]{-90});
    rules[576] = new Rule(-91, new int[]{-225});
    rules[577] = new Rule(-92, new int[]{-91});
    rules[578] = new Rule(-92, new int[]{-304});
    rules[579] = new Rule(-90, new int[]{-89});
    rules[580] = new Rule(-90, new int[]{-90,15,-89});
    rules[581] = new Rule(-241, new int[]{17,8,-268,9});
    rules[582] = new Rule(-279, new int[]{18,8,-268,9});
    rules[583] = new Rule(-279, new int[]{18,8,-267,9});
    rules[584] = new Rule(-225, new int[]{-91,13,-91,5,-91});
    rules[585] = new Rule(-267, new int[]{-166,-284});
    rules[586] = new Rule(-267, new int[]{-166,4,-284});
    rules[587] = new Rule(-268, new int[]{-166});
    rules[588] = new Rule(-268, new int[]{-166,-283});
    rules[589] = new Rule(-268, new int[]{-166,4,-283});
    rules[590] = new Rule(-5, new int[]{8,-62,9});
    rules[591] = new Rule(-5, new int[]{});
    rules[592] = new Rule(-159, new int[]{72,-268,-65});
    rules[593] = new Rule(-159, new int[]{72,-268,11,-63,12,-5});
    rules[594] = new Rule(-159, new int[]{72,22,8,-315,9});
    rules[595] = new Rule(-314, new int[]{-132,103,-89});
    rules[596] = new Rule(-314, new int[]{-89});
    rules[597] = new Rule(-315, new int[]{-314});
    rules[598] = new Rule(-315, new int[]{-315,93,-314});
    rules[599] = new Rule(-65, new int[]{});
    rules[600] = new Rule(-65, new int[]{8,-63,9});
    rules[601] = new Rule(-89, new int[]{-93});
    rules[602] = new Rule(-89, new int[]{-89,-182,-93});
    rules[603] = new Rule(-89, new int[]{-250,8,-328,9});
    rules[604] = new Rule(-321, new int[]{-268,8,-328,9});
    rules[605] = new Rule(-322, new int[]{-268,8,-329,9});
    rules[606] = new Rule(-329, new int[]{-327});
    rules[607] = new Rule(-329, new int[]{-329,10,-327});
    rules[608] = new Rule(-329, new int[]{-329,93,-327});
    rules[609] = new Rule(-328, new int[]{-326});
    rules[610] = new Rule(-328, new int[]{-328,10,-326});
    rules[611] = new Rule(-328, new int[]{-328,93,-326});
    rules[612] = new Rule(-326, new int[]{49,-132,5,-260});
    rules[613] = new Rule(-326, new int[]{49,-132});
    rules[614] = new Rule(-326, new int[]{-321});
    rules[615] = new Rule(-327, new int[]{-132,5,-260});
    rules[616] = new Rule(-327, new int[]{-132});
    rules[617] = new Rule(-327, new int[]{49,-132,5,-260});
    rules[618] = new Rule(-327, new int[]{49,-132});
    rules[619] = new Rule(-327, new int[]{-322});
    rules[620] = new Rule(-102, new int[]{-93});
    rules[621] = new Rule(-102, new int[]{});
    rules[622] = new Rule(-107, new int[]{-83});
    rules[623] = new Rule(-107, new int[]{});
    rules[624] = new Rule(-105, new int[]{-93,5,-102});
    rules[625] = new Rule(-105, new int[]{5,-102});
    rules[626] = new Rule(-105, new int[]{-93,5,-102,5,-93});
    rules[627] = new Rule(-105, new int[]{5,-102,5,-93});
    rules[628] = new Rule(-106, new int[]{-83,5,-107});
    rules[629] = new Rule(-106, new int[]{5,-107});
    rules[630] = new Rule(-106, new int[]{-83,5,-107,5,-83});
    rules[631] = new Rule(-106, new int[]{5,-107,5,-83});
    rules[632] = new Rule(-182, new int[]{113});
    rules[633] = new Rule(-182, new int[]{118});
    rules[634] = new Rule(-182, new int[]{116});
    rules[635] = new Rule(-182, new int[]{114});
    rules[636] = new Rule(-182, new int[]{117});
    rules[637] = new Rule(-182, new int[]{115});
    rules[638] = new Rule(-182, new int[]{130});
    rules[639] = new Rule(-93, new int[]{-76});
    rules[640] = new Rule(-93, new int[]{-93,-183,-76});
    rules[641] = new Rule(-183, new int[]{109});
    rules[642] = new Rule(-183, new int[]{108});
    rules[643] = new Rule(-183, new int[]{121});
    rules[644] = new Rule(-183, new int[]{122});
    rules[645] = new Rule(-183, new int[]{119});
    rules[646] = new Rule(-187, new int[]{129});
    rules[647] = new Rule(-187, new int[]{131});
    rules[648] = new Rule(-248, new int[]{-250});
    rules[649] = new Rule(-248, new int[]{-251});
    rules[650] = new Rule(-251, new int[]{-76,129,-268});
    rules[651] = new Rule(-250, new int[]{-76,131,-268});
    rules[652] = new Rule(-77, new int[]{-88});
    rules[653] = new Rule(-252, new int[]{-77,112,-88});
    rules[654] = new Rule(-76, new int[]{-88});
    rules[655] = new Rule(-76, new int[]{-159});
    rules[656] = new Rule(-76, new int[]{-252});
    rules[657] = new Rule(-76, new int[]{-76,-184,-88});
    rules[658] = new Rule(-76, new int[]{-76,-184,-252});
    rules[659] = new Rule(-76, new int[]{-248});
    rules[660] = new Rule(-184, new int[]{111});
    rules[661] = new Rule(-184, new int[]{110});
    rules[662] = new Rule(-184, new int[]{124});
    rules[663] = new Rule(-184, new int[]{125});
    rules[664] = new Rule(-184, new int[]{126});
    rules[665] = new Rule(-184, new int[]{127});
    rules[666] = new Rule(-184, new int[]{123});
    rules[667] = new Rule(-53, new int[]{59,8,-268,9});
    rules[668] = new Rule(-54, new int[]{8,-91,93,-73,-306,-313,9});
    rules[669] = new Rule(-88, new int[]{52});
    rules[670] = new Rule(-88, new int[]{-14});
    rules[671] = new Rule(-88, new int[]{-53});
    rules[672] = new Rule(-88, new int[]{11,-64,12});
    rules[673] = new Rule(-88, new int[]{128,-88});
    rules[674] = new Rule(-88, new int[]{-185,-88});
    rules[675] = new Rule(-88, new int[]{-100});
    rules[676] = new Rule(-88, new int[]{-54});
    rules[677] = new Rule(-14, new int[]{-150});
    rules[678] = new Rule(-14, new int[]{-15});
    rules[679] = new Rule(-103, new int[]{-99,14,-99});
    rules[680] = new Rule(-103, new int[]{-99,14,-103});
    rules[681] = new Rule(-100, new int[]{-117,-99});
    rules[682] = new Rule(-100, new int[]{-99});
    rules[683] = new Rule(-100, new int[]{-103});
    rules[684] = new Rule(-117, new int[]{134});
    rules[685] = new Rule(-117, new int[]{-117,134});
    rules[686] = new Rule(-9, new int[]{-166,-65});
    rules[687] = new Rule(-9, new int[]{-285,-65});
    rules[688] = new Rule(-303, new int[]{-132});
    rules[689] = new Rule(-303, new int[]{-303,7,-123});
    rules[690] = new Rule(-302, new int[]{-303});
    rules[691] = new Rule(-302, new int[]{-303,-283});
    rules[692] = new Rule(-16, new int[]{-99});
    rules[693] = new Rule(-16, new int[]{-14});
    rules[694] = new Rule(-99, new int[]{-132});
    rules[695] = new Rule(-99, new int[]{-177});
    rules[696] = new Rule(-99, new int[]{38,-132});
    rules[697] = new Rule(-99, new int[]{8,-81,9});
    rules[698] = new Rule(-99, new int[]{-241});
    rules[699] = new Rule(-99, new int[]{-279});
    rules[700] = new Rule(-99, new int[]{-14,7,-123});
    rules[701] = new Rule(-99, new int[]{-16,11,-66,12});
    rules[702] = new Rule(-99, new int[]{-99,16,-105,12});
    rules[703] = new Rule(-99, new int[]{-99,8,-63,9});
    rules[704] = new Rule(-99, new int[]{-99,7,-133});
    rules[705] = new Rule(-99, new int[]{-54,7,-133});
    rules[706] = new Rule(-99, new int[]{-99,135});
    rules[707] = new Rule(-99, new int[]{-99,4,-283});
    rules[708] = new Rule(-63, new int[]{-66});
    rules[709] = new Rule(-63, new int[]{});
    rules[710] = new Rule(-64, new int[]{-71});
    rules[711] = new Rule(-64, new int[]{});
    rules[712] = new Rule(-71, new int[]{-84});
    rules[713] = new Rule(-71, new int[]{-71,93,-84});
    rules[714] = new Rule(-84, new int[]{-81});
    rules[715] = new Rule(-84, new int[]{-81,6,-81});
    rules[716] = new Rule(-151, new int[]{137});
    rules[717] = new Rule(-151, new int[]{139});
    rules[718] = new Rule(-150, new int[]{-152});
    rules[719] = new Rule(-150, new int[]{138});
    rules[720] = new Rule(-152, new int[]{-151});
    rules[721] = new Rule(-152, new int[]{-152,-151});
    rules[722] = new Rule(-177, new int[]{41,-186});
    rules[723] = new Rule(-193, new int[]{10});
    rules[724] = new Rule(-193, new int[]{10,-192,10});
    rules[725] = new Rule(-194, new int[]{});
    rules[726] = new Rule(-194, new int[]{10,-192});
    rules[727] = new Rule(-192, new int[]{-195});
    rules[728] = new Rule(-192, new int[]{-192,10,-195});
    rules[729] = new Rule(-132, new int[]{136});
    rules[730] = new Rule(-132, new int[]{-136});
    rules[731] = new Rule(-132, new int[]{-137});
    rules[732] = new Rule(-123, new int[]{-132});
    rules[733] = new Rule(-123, new int[]{-277});
    rules[734] = new Rule(-123, new int[]{-278});
    rules[735] = new Rule(-133, new int[]{-132});
    rules[736] = new Rule(-133, new int[]{-277});
    rules[737] = new Rule(-133, new int[]{-177});
    rules[738] = new Rule(-195, new int[]{140});
    rules[739] = new Rule(-195, new int[]{142});
    rules[740] = new Rule(-195, new int[]{143});
    rules[741] = new Rule(-195, new int[]{144});
    rules[742] = new Rule(-195, new int[]{146});
    rules[743] = new Rule(-195, new int[]{145});
    rules[744] = new Rule(-196, new int[]{145});
    rules[745] = new Rule(-196, new int[]{144});
    rules[746] = new Rule(-196, new int[]{140});
    rules[747] = new Rule(-136, new int[]{79});
    rules[748] = new Rule(-136, new int[]{80});
    rules[749] = new Rule(-137, new int[]{74});
    rules[750] = new Rule(-137, new int[]{72});
    rules[751] = new Rule(-135, new int[]{78});
    rules[752] = new Rule(-135, new int[]{77});
    rules[753] = new Rule(-135, new int[]{76});
    rules[754] = new Rule(-135, new int[]{75});
    rules[755] = new Rule(-277, new int[]{-135});
    rules[756] = new Rule(-277, new int[]{65});
    rules[757] = new Rule(-277, new int[]{60});
    rules[758] = new Rule(-277, new int[]{121});
    rules[759] = new Rule(-277, new int[]{18});
    rules[760] = new Rule(-277, new int[]{17});
    rules[761] = new Rule(-277, new int[]{59});
    rules[762] = new Rule(-277, new int[]{19});
    rules[763] = new Rule(-277, new int[]{122});
    rules[764] = new Rule(-277, new int[]{123});
    rules[765] = new Rule(-277, new int[]{124});
    rules[766] = new Rule(-277, new int[]{125});
    rules[767] = new Rule(-277, new int[]{126});
    rules[768] = new Rule(-277, new int[]{127});
    rules[769] = new Rule(-277, new int[]{128});
    rules[770] = new Rule(-277, new int[]{129});
    rules[771] = new Rule(-277, new int[]{130});
    rules[772] = new Rule(-277, new int[]{131});
    rules[773] = new Rule(-277, new int[]{20});
    rules[774] = new Rule(-277, new int[]{70});
    rules[775] = new Rule(-277, new int[]{84});
    rules[776] = new Rule(-277, new int[]{21});
    rules[777] = new Rule(-277, new int[]{22});
    rules[778] = new Rule(-277, new int[]{25});
    rules[779] = new Rule(-277, new int[]{26});
    rules[780] = new Rule(-277, new int[]{27});
    rules[781] = new Rule(-277, new int[]{68});
    rules[782] = new Rule(-277, new int[]{92});
    rules[783] = new Rule(-277, new int[]{28});
    rules[784] = new Rule(-277, new int[]{29});
    rules[785] = new Rule(-277, new int[]{30});
    rules[786] = new Rule(-277, new int[]{23});
    rules[787] = new Rule(-277, new int[]{97});
    rules[788] = new Rule(-277, new int[]{94});
    rules[789] = new Rule(-277, new int[]{31});
    rules[790] = new Rule(-277, new int[]{32});
    rules[791] = new Rule(-277, new int[]{33});
    rules[792] = new Rule(-277, new int[]{36});
    rules[793] = new Rule(-277, new int[]{37});
    rules[794] = new Rule(-277, new int[]{38});
    rules[795] = new Rule(-277, new int[]{96});
    rules[796] = new Rule(-277, new int[]{39});
    rules[797] = new Rule(-277, new int[]{40});
    rules[798] = new Rule(-277, new int[]{42});
    rules[799] = new Rule(-277, new int[]{43});
    rules[800] = new Rule(-277, new int[]{44});
    rules[801] = new Rule(-277, new int[]{90});
    rules[802] = new Rule(-277, new int[]{45});
    rules[803] = new Rule(-277, new int[]{95});
    rules[804] = new Rule(-277, new int[]{46});
    rules[805] = new Rule(-277, new int[]{24});
    rules[806] = new Rule(-277, new int[]{47});
    rules[807] = new Rule(-277, new int[]{67});
    rules[808] = new Rule(-277, new int[]{91});
    rules[809] = new Rule(-277, new int[]{48});
    rules[810] = new Rule(-277, new int[]{49});
    rules[811] = new Rule(-277, new int[]{50});
    rules[812] = new Rule(-277, new int[]{51});
    rules[813] = new Rule(-277, new int[]{52});
    rules[814] = new Rule(-277, new int[]{53});
    rules[815] = new Rule(-277, new int[]{54});
    rules[816] = new Rule(-277, new int[]{55});
    rules[817] = new Rule(-277, new int[]{57});
    rules[818] = new Rule(-277, new int[]{98});
    rules[819] = new Rule(-277, new int[]{99});
    rules[820] = new Rule(-277, new int[]{102});
    rules[821] = new Rule(-277, new int[]{100});
    rules[822] = new Rule(-277, new int[]{101});
    rules[823] = new Rule(-277, new int[]{58});
    rules[824] = new Rule(-277, new int[]{71});
    rules[825] = new Rule(-277, new int[]{34});
    rules[826] = new Rule(-277, new int[]{35});
    rules[827] = new Rule(-278, new int[]{41});
    rules[828] = new Rule(-278, new int[]{85});
    rules[829] = new Rule(-186, new int[]{108});
    rules[830] = new Rule(-186, new int[]{109});
    rules[831] = new Rule(-186, new int[]{110});
    rules[832] = new Rule(-186, new int[]{111});
    rules[833] = new Rule(-186, new int[]{113});
    rules[834] = new Rule(-186, new int[]{114});
    rules[835] = new Rule(-186, new int[]{115});
    rules[836] = new Rule(-186, new int[]{116});
    rules[837] = new Rule(-186, new int[]{117});
    rules[838] = new Rule(-186, new int[]{118});
    rules[839] = new Rule(-186, new int[]{121});
    rules[840] = new Rule(-186, new int[]{122});
    rules[841] = new Rule(-186, new int[]{123});
    rules[842] = new Rule(-186, new int[]{124});
    rules[843] = new Rule(-186, new int[]{125});
    rules[844] = new Rule(-186, new int[]{126});
    rules[845] = new Rule(-186, new int[]{127});
    rules[846] = new Rule(-186, new int[]{128});
    rules[847] = new Rule(-186, new int[]{130});
    rules[848] = new Rule(-186, new int[]{132});
    rules[849] = new Rule(-186, new int[]{133});
    rules[850] = new Rule(-186, new int[]{-180});
    rules[851] = new Rule(-186, new int[]{112});
    rules[852] = new Rule(-180, new int[]{103});
    rules[853] = new Rule(-180, new int[]{104});
    rules[854] = new Rule(-180, new int[]{105});
    rules[855] = new Rule(-180, new int[]{106});
    rules[856] = new Rule(-180, new int[]{107});
    rules[857] = new Rule(-304, new int[]{-132,120,-310});
    rules[858] = new Rule(-304, new int[]{8,9,-307,120,-310});
    rules[859] = new Rule(-304, new int[]{8,-132,5,-259,9,-307,120,-310});
    rules[860] = new Rule(-304, new int[]{8,-132,10,-308,9,-307,120,-310});
    rules[861] = new Rule(-304, new int[]{8,-132,5,-259,10,-308,9,-307,120,-310});
    rules[862] = new Rule(-304, new int[]{8,-91,93,-73,-306,-313,9,-317});
    rules[863] = new Rule(-304, new int[]{-305});
    rules[864] = new Rule(-313, new int[]{});
    rules[865] = new Rule(-313, new int[]{10,-308});
    rules[866] = new Rule(-317, new int[]{-307,120,-310});
    rules[867] = new Rule(-305, new int[]{33,-306,120,-310});
    rules[868] = new Rule(-305, new int[]{33,8,9,-306,120,-310});
    rules[869] = new Rule(-305, new int[]{33,8,-308,9,-306,120,-310});
    rules[870] = new Rule(-305, new int[]{40,120,-311});
    rules[871] = new Rule(-305, new int[]{40,8,9,120,-311});
    rules[872] = new Rule(-305, new int[]{40,8,-308,9,120,-311});
    rules[873] = new Rule(-308, new int[]{-309});
    rules[874] = new Rule(-308, new int[]{-308,10,-309});
    rules[875] = new Rule(-309, new int[]{-143,-306});
    rules[876] = new Rule(-306, new int[]{});
    rules[877] = new Rule(-306, new int[]{5,-259});
    rules[878] = new Rule(-307, new int[]{});
    rules[879] = new Rule(-307, new int[]{5,-261});
    rules[880] = new Rule(-312, new int[]{-239});
    rules[881] = new Rule(-312, new int[]{-138});
    rules[882] = new Rule(-312, new int[]{-300});
    rules[883] = new Rule(-312, new int[]{-231});
    rules[884] = new Rule(-312, new int[]{-109});
    rules[885] = new Rule(-312, new int[]{-108});
    rules[886] = new Rule(-312, new int[]{-110});
    rules[887] = new Rule(-312, new int[]{-32});
    rules[888] = new Rule(-312, new int[]{-286});
    rules[889] = new Rule(-312, new int[]{-154});
    rules[890] = new Rule(-312, new int[]{-111});
    rules[891] = new Rule(-312, new int[]{-232});
    rules[892] = new Rule(-310, new int[]{-91});
    rules[893] = new Rule(-310, new int[]{-312});
    rules[894] = new Rule(-311, new int[]{-197});
    rules[895] = new Rule(-311, new int[]{-4});
    rules[896] = new Rule(-311, new int[]{-312});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
    {
  CurrentSemanticValue = new Union();
    switch (action)
    {
      case 2: // parse_goal -> program_file
{ root = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 3: // parse_goal -> unit_file
{ root = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 4: // parse_goal -> parts
{ root = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 5: // parts -> tkParseModeExpression, expr
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 6: // parts -> tkParseModeExpression, tkType, type_decl_identifier
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 7: // parts -> tkParseModeType, variable_as_type
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 8: // parts -> tkParseModeStatement, stmt_or_expression
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 9: // stmt_or_expression -> expr
{ CurrentSemanticValue.stn = new expression_as_statement(ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);}
        break;
      case 10: // stmt_or_expression -> assignment
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 11: // stmt_or_expression -> var_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 12: // optional_head_compiler_directives -> /* empty */
{ CurrentSemanticValue.ob = null; }
        break;
      case 13: // optional_head_compiler_directives -> head_compiler_directives
{ CurrentSemanticValue.ob = null; }
        break;
      case 14: // head_compiler_directives -> one_compiler_directive
{ CurrentSemanticValue.ob = null; }
        break;
      case 15: // head_compiler_directives -> head_compiler_directives, one_compiler_directive
{ CurrentSemanticValue.ob = null; }
        break;
      case 16: // one_compiler_directive -> tkDirectiveName, tkIdentifier
{
			parsertools.AddErrorFromResource("UNSUPPORTED_OLD_DIRECTIVES",CurrentLocationSpan);
			CurrentSemanticValue.ob = null;
        }
        break;
      case 17: // one_compiler_directive -> tkDirectiveName, tkStringLiteral
{
			parsertools.AddErrorFromResource("UNSUPPORTED_OLD_DIRECTIVES",CurrentLocationSpan);
			CurrentSemanticValue.ob = null;
        }
        break;
      case 18: // program_file -> program_header, optional_head_compiler_directives, uses_clause, 
               //                 program_block, optional_tk_point
{ 
			CurrentSemanticValue.stn = NewProgramModule(ValueStack[ValueStack.Depth-5].stn as program_name, ValueStack[ValueStack.Depth-4].ob, ValueStack[ValueStack.Depth-3].stn as uses_list, ValueStack[ValueStack.Depth-2].stn, ValueStack[ValueStack.Depth-1].ob, CurrentLocationSpan);
        }
        break;
      case 19: // optional_tk_point -> tkPoint
{ CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 20: // optional_tk_point -> tkSemiColon
{ CurrentSemanticValue.ob = null; }
        break;
      case 21: // optional_tk_point -> tkColon
{ CurrentSemanticValue.ob = null; }
        break;
      case 22: // optional_tk_point -> tkComma
{ CurrentSemanticValue.ob = null; }
        break;
      case 23: // optional_tk_point -> tkDotDot
{ CurrentSemanticValue.ob = null; }
        break;
      case 25: // program_header -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 26: // program_header -> tkProgram, identifier, program_heading_2
{ CurrentSemanticValue.stn = new program_name(ValueStack[ValueStack.Depth-2].id,CurrentLocationSpan); }
        break;
      case 27: // program_heading_2 -> tkSemiColon
{ CurrentSemanticValue.ob = null; }
        break;
      case 28: // program_heading_2 -> tkRoundOpen, program_param_list, tkRoundClose, tkSemiColon
{ CurrentSemanticValue.ob = null; }
        break;
      case 29: // program_param_list -> program_param
{ CurrentSemanticValue.ob = null; }
        break;
      case 30: // program_param_list -> program_param_list, tkComma, program_param
{ CurrentSemanticValue.ob = null; }
        break;
      case 31: // program_param -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 32: // program_block -> program_decl_sect_list, compound_stmt
{ 
			CurrentSemanticValue.stn = new block(ValueStack[ValueStack.Depth-2].stn as declarations, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
        }
        break;
      case 33: // program_decl_sect_list -> decl_sect_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 34: // ident_or_keyword_pointseparator_list -> identifier_or_keyword
{ 
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 35: // ident_or_keyword_pointseparator_list -> ident_or_keyword_pointseparator_list, 
               //                                         tkPoint, identifier_or_keyword
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 36: // uses_clause -> /* empty */
{ 
			CurrentSemanticValue.stn = null; 
		}
        break;
      case 37: // uses_clause -> uses_clause, tkUses, used_units_list, tkSemiColon
{ 
   			if (parsertools.build_tree_for_formatter)
   			{
	        	if (ValueStack[ValueStack.Depth-4].stn == null)
                {
	        		CurrentSemanticValue.stn = new uses_closure(ValueStack[ValueStack.Depth-2].stn as uses_list,CurrentLocationSpan);
                }
	        	else {
                    (ValueStack[ValueStack.Depth-4].stn as uses_closure).AddUsesList(ValueStack[ValueStack.Depth-2].stn as uses_list,CurrentLocationSpan);
                    CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-4].stn;
                }
   			}
   			else 
   			{
	        	if (ValueStack[ValueStack.Depth-4].stn == null)
                {
                    CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
                    CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
                }
	        	else 
                {
                    (ValueStack[ValueStack.Depth-4].stn as uses_list).AddUsesList(ValueStack[ValueStack.Depth-2].stn as uses_list,CurrentLocationSpan);
                    CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-4].stn;
                    CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
                }
			}
		}
        break;
      case 38: // used_units_list -> used_unit_name
{ 
		  CurrentSemanticValue.stn = new uses_list(ValueStack[ValueStack.Depth-1].stn as unit_or_namespace,CurrentLocationSpan);
        }
        break;
      case 39: // used_units_list -> used_units_list, tkComma, used_unit_name
{ 
		  CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as uses_list).Add(ValueStack[ValueStack.Depth-1].stn as unit_or_namespace, CurrentLocationSpan);
        }
        break;
      case 40: // used_unit_name -> ident_or_keyword_pointseparator_list
{ 
			CurrentSemanticValue.stn = new unit_or_namespace(ValueStack[ValueStack.Depth-1].stn as ident_list,CurrentLocationSpan); 
		}
        break;
      case 41: // used_unit_name -> ident_or_keyword_pointseparator_list, tkIn, tkStringLiteral
{ 
			CurrentSemanticValue.stn = new uses_unit_in(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].stn as string_const, CurrentLocationSpan);
        }
        break;
      case 42: // unit_file -> attribute_declarations, unit_header, interface_part, 
               //              implementation_part, initialization_part, tkPoint
{ 
			CurrentSemanticValue.stn = new unit_module(ValueStack[ValueStack.Depth-5].stn as unit_name, ValueStack[ValueStack.Depth-4].stn as interface_node, ValueStack[ValueStack.Depth-3].stn as implementation_node, (ValueStack[ValueStack.Depth-2].stn as initfinal_part).initialization_sect, (ValueStack[ValueStack.Depth-2].stn as initfinal_part).finalization_sect, ValueStack[ValueStack.Depth-6].stn as attribute_list, CurrentLocationSpan);                    
		}
        break;
      case 43: // unit_file -> attribute_declarations, unit_header, abc_interface_part, 
               //              initialization_part, tkPoint
{ 
			CurrentSemanticValue.stn = new unit_module(ValueStack[ValueStack.Depth-4].stn as unit_name, ValueStack[ValueStack.Depth-3].stn as interface_node, null, (ValueStack[ValueStack.Depth-2].stn as initfinal_part).initialization_sect, (ValueStack[ValueStack.Depth-2].stn as initfinal_part).finalization_sect, ValueStack[ValueStack.Depth-5].stn as attribute_list, CurrentLocationSpan);
        }
        break;
      case 44: // unit_header -> unit_key_word, unit_name, tkSemiColon, 
               //                optional_head_compiler_directives
{ 
			CurrentSemanticValue.stn = NewUnitHeading(new ident(ValueStack[ValueStack.Depth-4].ti.text, LocationStack[LocationStack.Depth-4]), ValueStack[ValueStack.Depth-3].id, CurrentLocationSpan); 
		}
        break;
      case 45: // unit_header -> tkNamespace, ident_or_keyword_pointseparator_list, tkSemiColon, 
               //                optional_head_compiler_directives
{
            CurrentSemanticValue.stn = NewNamespaceHeading(new ident(ValueStack[ValueStack.Depth-4].ti.text, LocationStack[LocationStack.Depth-4]), ValueStack[ValueStack.Depth-3].stn as ident_list, CurrentLocationSpan);
        }
        break;
      case 46: // unit_key_word -> tkUnit
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 47: // unit_key_word -> tkLibrary
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 48: // unit_name -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 49: // interface_part -> tkInterface, uses_clause, interface_decl_sect_list
{ 
			CurrentSemanticValue.stn = new interface_node(ValueStack[ValueStack.Depth-1].stn as declarations, ValueStack[ValueStack.Depth-2].stn as uses_list, null, LexLocation.MergeAll(LocationStack[LocationStack.Depth-3],LocationStack[LocationStack.Depth-2],LocationStack[LocationStack.Depth-1])); 
        }
        break;
      case 50: // implementation_part -> tkImplementation, uses_clause, decl_sect_list
{ 
			CurrentSemanticValue.stn = new implementation_node(ValueStack[ValueStack.Depth-2].stn as uses_list, ValueStack[ValueStack.Depth-1].stn as declarations, null, LexLocation.MergeAll(LocationStack[LocationStack.Depth-3],LocationStack[LocationStack.Depth-2],LocationStack[LocationStack.Depth-1])); 
        }
        break;
      case 51: // abc_interface_part -> uses_clause, decl_sect_list
{ 
			CurrentSemanticValue.stn = new interface_node(ValueStack[ValueStack.Depth-1].stn as declarations, ValueStack[ValueStack.Depth-2].stn as uses_list, null, null); 
        }
        break;
      case 52: // initialization_part -> tkEnd
{ 
			CurrentSemanticValue.stn = new initfinal_part(); 
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 53: // initialization_part -> tkInitialization, stmt_list, tkEnd
{ 
		  CurrentSemanticValue.stn = new initfinal_part(ValueStack[ValueStack.Depth-3].ti, ValueStack[ValueStack.Depth-2].stn as statement_list, ValueStack[ValueStack.Depth-1].ti, null, null, CurrentLocationSpan);
        }
        break;
      case 54: // initialization_part -> tkInitialization, stmt_list, tkFinalization, stmt_list, 
               //                        tkEnd
{ 
		  CurrentSemanticValue.stn = new initfinal_part(ValueStack[ValueStack.Depth-5].ti, ValueStack[ValueStack.Depth-4].stn as statement_list, ValueStack[ValueStack.Depth-3].ti, ValueStack[ValueStack.Depth-2].stn as statement_list, ValueStack[ValueStack.Depth-1].ti, CurrentLocationSpan);
        }
        break;
      case 55: // initialization_part -> tkBegin, stmt_list, tkEnd
{ 
		  CurrentSemanticValue.stn = new initfinal_part(ValueStack[ValueStack.Depth-3].ti, ValueStack[ValueStack.Depth-2].stn as statement_list, ValueStack[ValueStack.Depth-1].ti, null, null, CurrentLocationSpan);
        }
        break;
      case 56: // interface_decl_sect_list -> int_decl_sect_list1
{
			if ((ValueStack[ValueStack.Depth-1].stn as declarations).Count > 0) 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
			else 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 57: // int_decl_sect_list1 -> /* empty */
{ 
			CurrentSemanticValue.stn = new declarations();  
			if (GlobalDecls==null) 
				GlobalDecls = CurrentSemanticValue.stn as declarations;
		}
        break;
      case 58: // int_decl_sect_list1 -> int_decl_sect_list1, int_decl_sect
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as declarations).Add(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 59: // decl_sect_list -> decl_sect_list1
{
			if ((ValueStack[ValueStack.Depth-1].stn as declarations).Count > 0) 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
			else 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 60: // decl_sect_list1 -> /* empty */
{ 
			CurrentSemanticValue.stn = new declarations(); 
			if (GlobalDecls==null) 
				GlobalDecls = CurrentSemanticValue.stn as declarations;
		}
        break;
      case 61: // decl_sect_list1 -> decl_sect_list1, decl_sect
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as declarations).Add(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 62: // inclass_decl_sect_list -> inclass_decl_sect_list1
{
			if ((ValueStack[ValueStack.Depth-1].stn as declarations).Count > 0) 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
			else 
				CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 63: // inclass_decl_sect_list1 -> /* empty */
{ 
        	CurrentSemanticValue.stn = new declarations(); 
        }
        break;
      case 64: // inclass_decl_sect_list1 -> inclass_decl_sect_list1, abc_decl_sect
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as declarations).Add(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 65: // int_decl_sect -> const_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 66: // int_decl_sect -> res_str_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 67: // int_decl_sect -> type_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 68: // int_decl_sect -> var_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 69: // int_decl_sect -> int_proc_header
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 70: // int_decl_sect -> int_func_header
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 71: // decl_sect -> label_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 72: // decl_sect -> const_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 73: // decl_sect -> res_str_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 74: // decl_sect -> type_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 75: // decl_sect -> var_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 76: // decl_sect -> proc_func_constr_destr_decl_with_attr
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 77: // proc_func_constr_destr_decl -> proc_func_decl
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 78: // proc_func_constr_destr_decl -> constr_destr_decl
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 79: // proc_func_constr_destr_decl_with_attr -> attribute_declarations, 
               //                                          proc_func_constr_destr_decl
{
		    (ValueStack[ValueStack.Depth-1].stn as procedure_definition).AssignAttrList(ValueStack[ValueStack.Depth-2].stn as attribute_list);
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 80: // abc_decl_sect -> label_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 81: // abc_decl_sect -> const_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 82: // abc_decl_sect -> res_str_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 83: // abc_decl_sect -> type_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 84: // abc_decl_sect -> var_decl_sect
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 85: // int_proc_header -> attribute_declarations, proc_header
{  
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
			(CurrentSemanticValue.td as procedure_header).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
        }
        break;
      case 86: // int_proc_header -> attribute_declarations, proc_header, tkForward, tkSemiColon
{  
			CurrentSemanticValue.td = NewProcedureHeader(ValueStack[ValueStack.Depth-4].stn as attribute_list, ValueStack[ValueStack.Depth-3].td as procedure_header, ValueStack[ValueStack.Depth-2].id as procedure_attribute, CurrentLocationSpan);
		}
        break;
      case 87: // int_func_header -> attribute_declarations, func_header
{  
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
			(CurrentSemanticValue.td as procedure_header).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
        }
        break;
      case 88: // int_func_header -> attribute_declarations, func_header, tkForward, tkSemiColon
{  
			CurrentSemanticValue.td = NewProcedureHeader(ValueStack[ValueStack.Depth-4].stn as attribute_list, ValueStack[ValueStack.Depth-3].td as procedure_header, ValueStack[ValueStack.Depth-2].id as procedure_attribute, CurrentLocationSpan);
		}
        break;
      case 89: // label_decl_sect -> tkLabel, label_list, tkSemiColon
{ 
			CurrentSemanticValue.stn = new label_definitions(ValueStack[ValueStack.Depth-2].stn as ident_list, CurrentLocationSpan); 
		}
        break;
      case 90: // label_list -> label_name
{ 
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 91: // label_list -> label_list, tkComma, label_name
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 92: // label_name -> tkInteger
{ 
			CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].ex.ToString(), CurrentLocationSpan);
		}
        break;
      case 93: // label_name -> tkFloat
{ 
			CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].ex.ToString(), CurrentLocationSpan);  
		}
        break;
      case 94: // label_name -> identifier
{ 
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 95: // const_decl_sect -> tkConst, const_decl
{ 
			CurrentSemanticValue.stn = new consts_definitions_list(ValueStack[ValueStack.Depth-1].stn as const_definition, CurrentLocationSpan);
		}
        break;
      case 96: // const_decl_sect -> const_decl_sect, const_decl
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as consts_definitions_list).Add(ValueStack[ValueStack.Depth-1].stn as const_definition, CurrentLocationSpan);
		}
        break;
      case 97: // res_str_decl_sect -> tkResourceString, const_decl
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 98: // res_str_decl_sect -> res_str_decl_sect, const_decl
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; 
		}
        break;
      case 99: // type_decl_sect -> tkType, type_decl
{ 
            CurrentSemanticValue.stn = new type_declarations(ValueStack[ValueStack.Depth-1].stn as type_declaration, CurrentLocationSpan);
		}
        break;
      case 100: // type_decl_sect -> type_decl_sect, type_decl
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as type_declarations).Add(ValueStack[ValueStack.Depth-1].stn as type_declaration, CurrentLocationSpan);
		}
        break;
      case 101: // var_decl_sect -> tkVar, var_decl
{ 
			CurrentSemanticValue.stn = new variable_definitions(ValueStack[ValueStack.Depth-1].stn as var_def_statement, CurrentLocationSpan);
		}
        break;
      case 102: // var_decl_sect -> tkEvent, var_decl
{ 
			CurrentSemanticValue.stn = new variable_definitions(ValueStack[ValueStack.Depth-1].stn as var_def_statement, CurrentLocationSpan);                        
			(ValueStack[ValueStack.Depth-1].stn as var_def_statement).is_event = true;
        }
        break;
      case 103: // var_decl_sect -> var_decl_sect, var_decl
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as variable_definitions).Add(ValueStack[ValueStack.Depth-1].stn as var_def_statement, CurrentLocationSpan);
		}
        break;
      case 104: // var_decl_sect -> tkVar, tkRoundOpen, identifier, tkComma, ident_list, 
                //                  tkRoundClose, tkAssign, expr_l1, tkSemiColon
{
			(ValueStack[ValueStack.Depth-5].stn as ident_list).Insert(0,ValueStack[ValueStack.Depth-7].id);
			ValueStack[ValueStack.Depth-5].stn.source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-9],LocationStack[LocationStack.Depth-8],LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5],LocationStack[LocationStack.Depth-4]);
			CurrentSemanticValue.stn = new assign_var_tuple(ValueStack[ValueStack.Depth-5].stn as ident_list, ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan);
	    }
        break;
      case 105: // const_decl -> only_const_decl, tkSemiColon
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 106: // only_const_decl -> const_name, tkEqual, init_const_expr
{ 
			CurrentSemanticValue.stn = new simple_const_definition(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 107: // only_const_decl -> const_name, tkColon, type_ref, tkEqual, typed_const
{ 
			CurrentSemanticValue.stn = new typed_const_definition(ValueStack[ValueStack.Depth-5].id, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-3].td, CurrentLocationSpan);
		}
        break;
      case 108: // init_const_expr -> const_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 109: // init_const_expr -> array_const
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 110: // const_name -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 111: // expr_l1_list -> expr_l1
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 112: // expr_l1_list -> expr_l1_list, tkComma, expr_l1
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 113: // const_expr -> const_simple_expr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 114: // const_expr -> const_simple_expr, const_relop, const_simple_expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 115: // const_expr -> question_constexpr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 116: // question_constexpr -> const_expr, tkQuestion, const_expr, tkColon, const_expr
{ CurrentSemanticValue.ex = new question_colon_expression(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); }
        break;
      case 117: // const_relop -> tkEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 118: // const_relop -> tkNotEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 119: // const_relop -> tkLower
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 120: // const_relop -> tkGreater
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 121: // const_relop -> tkLowerEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 122: // const_relop -> tkGreaterEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 123: // const_relop -> tkIn
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 124: // const_simple_expr -> const_term
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 125: // const_simple_expr -> const_simple_expr, const_addop, const_term
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 126: // const_addop -> tkPlus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 127: // const_addop -> tkMinus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 128: // const_addop -> tkOr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 129: // const_addop -> tkXor
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 130: // as_is_constexpr -> const_term, typecast_op, simple_or_template_type_reference
{ 
			CurrentSemanticValue.ex = NewAsIsConstexpr(ValueStack[ValueStack.Depth-3].ex, (op_typecast)ValueStack[ValueStack.Depth-2].ob, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);                                
		}
        break;
      case 131: // power_constexpr -> const_factor, tkStarStar, const_factor
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 132: // const_term -> const_factor
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 133: // const_term -> as_is_constexpr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 134: // const_term -> power_constexpr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 135: // const_term -> const_term, const_mulop, const_factor
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 136: // const_term -> const_term, const_mulop, power_constexpr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,(ValueStack[ValueStack.Depth-2].op).type, CurrentLocationSpan); }
        break;
      case 137: // const_mulop -> tkStar
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 138: // const_mulop -> tkSlash
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 139: // const_mulop -> tkDiv
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 140: // const_mulop -> tkMod
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 141: // const_mulop -> tkShl
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 142: // const_mulop -> tkShr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 143: // const_mulop -> tkAnd
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 144: // const_factor -> const_variable
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 145: // const_factor -> const_set
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 146: // const_factor -> tkNil
{ 
			CurrentSemanticValue.ex = new nil_const();  
			CurrentSemanticValue.ex.source_context = CurrentLocationSpan;
		}
        break;
      case 147: // const_factor -> tkAddressOf, const_factor
{ 
			CurrentSemanticValue.ex = new get_address(ValueStack[ValueStack.Depth-1].ex as addressed_value, CurrentLocationSpan);  
		}
        break;
      case 148: // const_factor -> tkRoundOpen, const_expr, tkRoundClose
{ 
	 	    CurrentSemanticValue.ex = new bracket_expr(ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan); 
		}
        break;
      case 149: // const_factor -> tkNot, const_factor
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 150: // const_factor -> sign, const_factor
{ 
		    // ������ ��������� ����� ��������
			if (ValueStack[ValueStack.Depth-2].op.type == Operators.Minus)
			{
			    var i64 = ValueStack[ValueStack.Depth-1].ex as int64_const;
				if (i64 != null && i64.val == (Int64)Int32.MaxValue + 1)
				{
					CurrentSemanticValue.ex = new int32_const(Int32.MinValue,CurrentLocationSpan);
					break;
				}
				var ui64 = ValueStack[ValueStack.Depth-1].ex as uint64_const;
				if (ui64 != null && ui64.val == (UInt64)Int64.MaxValue + 1)
				{
					CurrentSemanticValue.ex = new int64_const(Int64.MinValue,CurrentLocationSpan);
					break;
				}
				if (ui64 != null && ui64.val > (UInt64)Int64.MaxValue + 1)
				{
					parsertools.AddErrorFromResource("BAD_INT2",CurrentLocationSpan);
					break;
				}
			    // ����� ������� ���������� ��������� � �������������� �������
			}
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 151: // const_factor -> new_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 152: // const_set -> tkSquareOpen, const_elem_list, tkSquareClose
{ 
			CurrentSemanticValue.ex = new pascal_set_constant(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan); 
		}
        break;
      case 153: // sign -> tkPlus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 154: // sign -> tkMinus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 155: // const_variable -> identifier
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 156: // const_variable -> literal
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 157: // const_variable -> unsigned_number
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 158: // const_variable -> tkInherited, identifier
{ 
			CurrentSemanticValue.ex = new inherited_ident(ValueStack[ValueStack.Depth-1].id.name, CurrentLocationSpan);
		}
        break;
      case 159: // const_variable -> sizeof_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 160: // const_variable -> typeof_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 161: // const_variable -> const_variable, const_variable_2
{
			CurrentSemanticValue.ex = NewConstVariable(ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
        }
        break;
      case 162: // const_variable -> const_variable, tkAmpersend, template_type_params
{
			CurrentSemanticValue.ex = new ident_with_templateparams(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan);
        }
        break;
      case 163: // const_variable -> const_variable, tkSquareOpen, format_const_expr, 
                //                   tkSquareClose
{ 
    		var fe = ValueStack[ValueStack.Depth-2].ex as format_expr;
            if (!parsertools.build_tree_for_formatter)
            {
                if (fe.expr == null)
                    fe.expr = new int32_const(int.MaxValue,LocationStack[LocationStack.Depth-2]);
                if (fe.format1 == null)
                    fe.format1 = new int32_const(int.MaxValue,LocationStack[LocationStack.Depth-2]);
            }
    		CurrentSemanticValue.ex = new slice_expr(ValueStack[ValueStack.Depth-4].ex as addressed_value,fe.expr,fe.format1,fe.format2,CurrentLocationSpan);
		}
        break;
      case 164: // const_variable_2 -> tkPoint, identifier_or_keyword
{ 
			CurrentSemanticValue.ex = new dot_node(null, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 165: // const_variable_2 -> tkDeref
{ 
			CurrentSemanticValue.ex = new roof_dereference();  
			CurrentSemanticValue.ex.source_context = CurrentLocationSpan;
		}
        break;
      case 166: // const_variable_2 -> tkRoundOpen, optional_const_func_expr_list, tkRoundClose
{ 
			CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);  
		}
        break;
      case 167: // const_variable_2 -> tkSquareOpen, const_elem_list, tkSquareClose
{ 
			CurrentSemanticValue.ex = new indexer(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);  
		}
        break;
      case 168: // optional_const_func_expr_list -> expr_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 169: // optional_const_func_expr_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 170: // const_elem_list -> const_elem_list1
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 172: // const_elem_list1 -> const_elem
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 173: // const_elem_list1 -> const_elem_list1, tkComma, const_elem
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 174: // const_elem -> const_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 175: // const_elem -> const_expr, tkDotDot, const_expr
{ 
			CurrentSemanticValue.ex = new diapason_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 176: // unsigned_number -> tkInteger
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 177: // unsigned_number -> tkHex
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 178: // unsigned_number -> tkFloat
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 179: // typed_const -> const_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 180: // typed_const -> array_const
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 181: // typed_const -> record_const
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 182: // array_const -> tkRoundOpen, typed_const_list, tkRoundClose
{ 
			CurrentSemanticValue.ex = new array_const(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan); 
		}
        break;
      case 183: // array_const -> tkRoundOpen, record_const, tkRoundClose
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex; }
        break;
      case 184: // array_const -> tkRoundOpen, array_const, tkRoundClose
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex; }
        break;
      case 186: // typed_const_list -> typed_const_list1
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 187: // typed_const_list1 -> typed_const_plus
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
        }
        break;
      case 188: // typed_const_list1 -> typed_const_list1, tkComma, typed_const_plus
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 189: // record_const -> tkRoundOpen, const_field_list, tkRoundClose
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex;
			CurrentSemanticValue.ex.source_context = CurrentLocationSpan;
		}
        break;
      case 190: // const_field_list -> const_field_list_1
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 191: // const_field_list -> const_field_list_1, tkSemiColon
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex; }
        break;
      case 192: // const_field_list_1 -> const_field
{ 
			CurrentSemanticValue.ex = new record_const(ValueStack[ValueStack.Depth-1].stn as record_const_definition, CurrentLocationSpan);
		}
        break;
      case 193: // const_field_list_1 -> const_field_list_1, tkSemiColon, const_field
{ 
			CurrentSemanticValue.ex = (ValueStack[ValueStack.Depth-3].ex as record_const).Add(ValueStack[ValueStack.Depth-1].stn as record_const_definition, CurrentLocationSpan);
		}
        break;
      case 194: // const_field -> const_field_name, tkColon, typed_const
{ 
			CurrentSemanticValue.stn = new record_const_definition(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 195: // const_field_name -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 196: // type_decl -> attribute_declarations, simple_type_decl
{  
			(ValueStack[ValueStack.Depth-1].stn as declaration).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
			CurrentSemanticValue.stn.source_context = LocationStack[LocationStack.Depth-1];
        }
        break;
      case 197: // attribute_declarations -> attribute_declaration
{ 
			CurrentSemanticValue.stn = new attribute_list(ValueStack[ValueStack.Depth-1].stn as simple_attribute_list, CurrentLocationSpan);
    }
        break;
      case 198: // attribute_declarations -> attribute_declarations, attribute_declaration
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as attribute_list).Add(ValueStack[ValueStack.Depth-1].stn as simple_attribute_list, CurrentLocationSpan);
		}
        break;
      case 199: // attribute_declarations -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 200: // attribute_declaration -> tkSquareOpen, one_or_some_attribute, tkSquareClose
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 201: // one_or_some_attribute -> one_attribute
{ 
			CurrentSemanticValue.stn = new simple_attribute_list(ValueStack[ValueStack.Depth-1].stn as attribute, CurrentLocationSpan);
		}
        break;
      case 202: // one_or_some_attribute -> one_or_some_attribute, tkComma, one_attribute
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as simple_attribute_list).Add(ValueStack[ValueStack.Depth-1].stn as attribute, CurrentLocationSpan);
		}
        break;
      case 203: // one_attribute -> attribute_variable
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 204: // one_attribute -> identifier, tkColon, attribute_variable
{  
			(ValueStack[ValueStack.Depth-1].stn as attribute).qualifier = ValueStack[ValueStack.Depth-3].id;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
        }
        break;
      case 205: // simple_type_decl -> type_decl_identifier, tkEqual, type_decl_type, tkSemiColon
{ 
			CurrentSemanticValue.stn = new type_declaration(ValueStack[ValueStack.Depth-4].id, ValueStack[ValueStack.Depth-2].td, CurrentLocationSpan); 
		}
        break;
      case 206: // simple_type_decl -> template_identifier_with_equal, type_decl_type, tkSemiColon
{ 
			CurrentSemanticValue.stn = new type_declaration(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-2].td, CurrentLocationSpan); 
		}
        break;
      case 207: // type_decl_identifier -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 208: // type_decl_identifier -> identifier, template_arguments
{ 
			CurrentSemanticValue.id = new template_type_name(ValueStack[ValueStack.Depth-2].id.name, ValueStack[ValueStack.Depth-1].stn as ident_list, CurrentLocationSpan); 
        }
        break;
      case 209: // template_identifier_with_equal -> identifier, tkLower, ident_list, 
                //                                   tkGreaterEqual
{ 
			CurrentSemanticValue.id = new template_type_name(ValueStack[ValueStack.Depth-4].id.name, ValueStack[ValueStack.Depth-2].stn as ident_list, CurrentLocationSpan); 
        }
        break;
      case 210: // type_decl_type -> type_ref
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 211: // type_decl_type -> object_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 212: // simple_type_question -> simple_type, tkQuestion
{
            if (parsertools.build_tree_for_formatter)
   			{
                CurrentSemanticValue.td = ValueStack[ValueStack.Depth-2].td;
            }
            else
            {
                var l = new List<ident>();
                l.Add(new ident("System"));
                l.Add(new ident("Nullable"));
                CurrentSemanticValue.td = new template_type_reference(new named_type_reference(l), new template_param_list(ValueStack[ValueStack.Depth-2].td), CurrentLocationSpan);
            }
		}
        break;
      case 213: // type_ref -> simple_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 214: // type_ref -> simple_type_question
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 215: // type_ref -> string_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 216: // type_ref -> pointer_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 217: // type_ref -> structured_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 218: // type_ref -> procedural_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 219: // type_ref -> template_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 220: // template_type -> simple_type_identifier, template_type_params
{ 
			CurrentSemanticValue.td = new template_type_reference(ValueStack[ValueStack.Depth-2].td as named_type_reference, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan); 
		}
        break;
      case 221: // template_type_params -> tkLower, template_param_list, tkGreater
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 222: // template_type_empty_params -> tkNotEqual
{
            var ntr = new named_type_reference(new ident(""), CurrentLocationSpan);
            
			CurrentSemanticValue.stn = new template_param_list(ntr, CurrentLocationSpan);
            ntr.source_context = new SourceContext(CurrentSemanticValue.stn.source_context.end_position.line_num, CurrentSemanticValue.stn.source_context.end_position.column_num, CurrentSemanticValue.stn.source_context.begin_position.line_num, CurrentSemanticValue.stn.source_context.begin_position.column_num);
		}
        break;
      case 223: // template_type_empty_params -> tkLower, template_empty_param_list, tkGreater
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 224: // template_param_list -> template_param
{ 
			CurrentSemanticValue.stn = new template_param_list(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 225: // template_param_list -> template_param_list, tkComma, template_param
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as template_param_list).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 226: // template_empty_param_list -> template_empty_param
{ 
			CurrentSemanticValue.stn = new template_param_list(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 227: // template_empty_param_list -> template_empty_param_list, tkComma, 
                //                              template_empty_param
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as template_param_list).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 228: // template_empty_param -> /* empty */
{ 
            CurrentSemanticValue.td = new named_type_reference(new ident(""), CurrentLocationSpan);
        }
        break;
      case 229: // template_param -> simple_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 230: // template_param -> simple_type, tkQuestion
{
            if (parsertools.build_tree_for_formatter)
   			{
                CurrentSemanticValue.td = ValueStack[ValueStack.Depth-2].td;
            }
            else
            {
                var l = new List<ident>();
                l.Add(new ident("System"));
                l.Add(new ident("Nullable"));
                CurrentSemanticValue.td = new template_type_reference(new named_type_reference(l), new template_param_list(ValueStack[ValueStack.Depth-2].td), CurrentLocationSpan);
            }
		}
        break;
      case 231: // template_param -> structured_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 232: // template_param -> procedural_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 233: // template_param -> template_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 234: // simple_type -> range_expr
{
	    	CurrentSemanticValue.td = parsertools.ConvertDotNodeOrIdentToNamedTypeReference(ValueStack[ValueStack.Depth-1].ex); 
	    }
        break;
      case 235: // simple_type -> range_expr, tkDotDot, range_expr
{ 
			CurrentSemanticValue.td = new diapason(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 236: // simple_type -> tkRoundOpen, enumeration_id_list, tkRoundClose
{ 
			CurrentSemanticValue.td = new enum_type_definition(ValueStack[ValueStack.Depth-2].stn as enumerator_list, CurrentLocationSpan);  
		}
        break;
      case 237: // range_expr -> range_term
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 238: // range_expr -> range_expr, const_addop, range_term
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 239: // range_term -> range_factor
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 240: // range_term -> range_term, const_mulop, range_factor
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 241: // range_factor -> simple_type_identifier
{ 
			CurrentSemanticValue.ex = parsertools.ConvertNamedTypeReferenceToDotNodeOrIdent(ValueStack[ValueStack.Depth-1].td as named_type_reference);
        }
        break;
      case 242: // range_factor -> unsigned_number
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 243: // range_factor -> sign, range_factor
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 244: // range_factor -> literal
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 245: // range_factor -> range_factor, tkRoundOpen, const_elem_list, tkRoundClose
{ 
			CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-4].ex as addressed_value, ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
        }
        break;
      case 246: // simple_type_identifier -> identifier
{ 
			CurrentSemanticValue.td = new named_type_reference(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 247: // simple_type_identifier -> simple_type_identifier, tkPoint, 
                //                           identifier_or_keyword
{ 
			CurrentSemanticValue.td = (ValueStack[ValueStack.Depth-3].td as named_type_reference).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 248: // enumeration_id_list -> enumeration_id, tkComma, enumeration_id
{ 
			CurrentSemanticValue.stn = new enumerator_list(ValueStack[ValueStack.Depth-3].stn as enumerator, CurrentLocationSpan);
			(CurrentSemanticValue.stn as enumerator_list).Add(ValueStack[ValueStack.Depth-1].stn as enumerator, CurrentLocationSpan);
        }
        break;
      case 249: // enumeration_id_list -> enumeration_id_list, tkComma, enumeration_id
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as enumerator_list).Add(ValueStack[ValueStack.Depth-1].stn as enumerator, CurrentLocationSpan);
        }
        break;
      case 250: // enumeration_id -> type_ref
{ 
			CurrentSemanticValue.stn = new enumerator(ValueStack[ValueStack.Depth-1].td, null, CurrentLocationSpan); 
		}
        break;
      case 251: // enumeration_id -> type_ref, tkEqual, expr
{ 
			CurrentSemanticValue.stn = new enumerator(ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 252: // pointer_type -> tkDeref, fptype
{ 
			CurrentSemanticValue.td = new ref_type(ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);
		}
        break;
      case 253: // structured_type -> unpacked_structured_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 254: // structured_type -> tkPacked, unpacked_structured_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 255: // unpacked_structured_type -> array_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 256: // unpacked_structured_type -> record_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 257: // unpacked_structured_type -> set_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 258: // unpacked_structured_type -> file_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 259: // unpacked_structured_type -> sequence_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 260: // sequence_type -> tkSequence, tkOf, type_ref
{
			CurrentSemanticValue.td = new sequence_type(ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);
		}
        break;
      case 261: // array_type -> tkArray, tkSquareOpen, simple_type_list, tkSquareClose, tkOf, 
                //               type_ref
{ 
			CurrentSemanticValue.td = new array_type(ValueStack[ValueStack.Depth-4].stn as indexers_types, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
        }
        break;
      case 262: // array_type -> unsized_array_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 263: // unsized_array_type -> tkArray, tkOf, type_ref
{ 
			CurrentSemanticValue.td = new array_type(null, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
        }
        break;
      case 264: // simple_type_list -> simple_type_or_
{ 
			CurrentSemanticValue.stn = new indexers_types(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
        }
        break;
      case 265: // simple_type_list -> simple_type_list, tkComma, simple_type_or_
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as indexers_types).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
        }
        break;
      case 266: // simple_type_or_ -> simple_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 267: // simple_type_or_ -> /* empty */
{ CurrentSemanticValue.td = null; }
        break;
      case 268: // set_type -> tkSet, tkOf, type_ref
{ 
			CurrentSemanticValue.td = new set_type_definition(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
		}
        break;
      case 269: // file_type -> tkFile, tkOf, type_ref
{ 
			CurrentSemanticValue.td = new file_type(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 270: // file_type -> tkFile
{ 
			CurrentSemanticValue.td = new file_type();  
			CurrentSemanticValue.td.source_context = CurrentLocationSpan;
		}
        break;
      case 271: // string_type -> tkIdentifier, tkSquareOpen, const_expr, tkSquareClose
{ 
			CurrentSemanticValue.td = new string_num_definition(ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-4].id, CurrentLocationSpan);
		}
        break;
      case 272: // procedural_type -> procedural_type_kind
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 273: // procedural_type_kind -> proc_type_decl
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 274: // proc_type_decl -> tkProcedure, fp_list
{ 
			CurrentSemanticValue.td = new procedure_header(ValueStack[ValueStack.Depth-1].stn as formal_parameters,null,null,false,false,null,null,CurrentLocationSpan);
        }
        break;
      case 275: // proc_type_decl -> tkFunction, fp_list, tkColon, fptype
{ 
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-3].stn as formal_parameters, null, null, null, ValueStack[ValueStack.Depth-1].td as type_definition, CurrentLocationSpan);
        }
        break;
      case 276: // proc_type_decl -> simple_type_identifier, tkArrow, template_param
{
    		CurrentSemanticValue.td = new modern_proc_type(ValueStack[ValueStack.Depth-3].td,null,ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);            
    	}
        break;
      case 277: // proc_type_decl -> template_type, tkArrow, template_param
{
    		CurrentSemanticValue.td = new modern_proc_type(ValueStack[ValueStack.Depth-3].td,null,ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);            
    	}
        break;
      case 278: // proc_type_decl -> tkRoundOpen, tkRoundClose, tkArrow, template_param
{
    		CurrentSemanticValue.td = new modern_proc_type(null,null,ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);
    	}
        break;
      case 279: // proc_type_decl -> tkRoundOpen, enumeration_id_list, tkRoundClose, tkArrow, 
                //                   template_param
{
    		CurrentSemanticValue.td = new modern_proc_type(null,ValueStack[ValueStack.Depth-4].stn as enumerator_list,ValueStack[ValueStack.Depth-1].td,CurrentLocationSpan);
    	}
        break;
      case 280: // proc_type_decl -> simple_type_identifier, tkArrow, tkRoundOpen, tkRoundClose
{
    		CurrentSemanticValue.td = new modern_proc_type(ValueStack[ValueStack.Depth-4].td,null,null,CurrentLocationSpan);
    	}
        break;
      case 281: // proc_type_decl -> template_type, tkArrow, tkRoundOpen, tkRoundClose
{
    		CurrentSemanticValue.td = new modern_proc_type(ValueStack[ValueStack.Depth-4].td,null,null,CurrentLocationSpan);
    	}
        break;
      case 282: // proc_type_decl -> tkRoundOpen, tkRoundClose, tkArrow, tkRoundOpen, tkRoundClose
{
    		CurrentSemanticValue.td = new modern_proc_type(null,null,null,CurrentLocationSpan);
    	}
        break;
      case 283: // proc_type_decl -> tkRoundOpen, enumeration_id_list, tkRoundClose, tkArrow, 
                //                   tkRoundOpen, tkRoundClose
{
    		CurrentSemanticValue.td = new modern_proc_type(null,ValueStack[ValueStack.Depth-5].stn as enumerator_list,null,CurrentLocationSpan);
    	}
        break;
      case 284: // object_type -> class_attributes, class_or_interface_keyword, 
                //                optional_base_classes, optional_where_section, 
                //                optional_component_list_seq_end
{ 
			CurrentSemanticValue.td = NewObjectType((class_attribute)ValueStack[ValueStack.Depth-5].ob, ValueStack[ValueStack.Depth-4].ti, ValueStack[ValueStack.Depth-3].stn as named_type_reference_list, ValueStack[ValueStack.Depth-2].stn as where_definition_list, ValueStack[ValueStack.Depth-1].stn as class_body_list, CurrentLocationSpan);
            class_definition cd = CurrentSemanticValue.td as class_definition;
            if (cd == null || cd.body == null)
                break;
            var ccnt = cd.body.DescendantNodes().OfType<simple_property>().ToArray();
            var cm = new class_members(access_modifer.private_modifer);
            foreach (var prop in ccnt)
            {
                var td = prop.property_type;
                var ra = prop.accessors?.read_accessor;
                if (ValueStack[ValueStack.Depth-4].ti.text.ToLower() == "interface" && ra != null && (ra.pr != null || ra.accessor_name != null))
				    parsertools.AddErrorFromResource("INVALID_INTERFACE_MEMBER",ra.source_context);

                if (ra != null && ra.pr != null)
                {
                    if (prop.parameter_list != null)
                        parsertools.AddErrorFromResource("EXTENDED_INDEXED_PROPERTIES",ra.source_context);
                    var rapr = ra.pr as procedure_definition; 
                    (rapr.proc_header as function_header).return_type = td;
                    cm.Add(rapr);
                    if (prop.attr == definition_attribute.Static)
                    {
                        rapr.proc_header.class_keyword = true;
                        procedure_attribute pa = new procedure_attribute(proc_attribute.attr_static);
                        pa.source_context = rapr.proc_header.source_context;
                        rapr.proc_header.proc_attributes = new procedure_attributes_list(pa);
                    }
                }
                var wa = prop.accessors?.write_accessor;
                if (ValueStack[ValueStack.Depth-4].ti.text.ToLower() == "interface" && wa != null && (wa.pr != null || wa.accessor_name != null))
				    parsertools.AddErrorFromResource("INVALID_INTERFACE_MEMBER",wa.source_context);

                if (wa != null && wa.pr != null)
                {
                    if (prop.parameter_list != null)
                        parsertools.AddErrorFromResource("EXTENDED_INDEXED_PROPERTIES",ra.source_context);
                    var wapr = wa.pr as procedure_definition;
                    wapr.proc_header.parameters.params_list[0].vars_type = td;
                    cm.Add(wapr);
                    if (prop.attr == definition_attribute.Static)
                    {
                        wapr.proc_header.class_keyword = true;
                        procedure_attribute pa = new procedure_attribute(proc_attribute.attr_static);
                        pa.source_context = wapr.proc_header.source_context;
                        wapr.proc_header.proc_attributes = new procedure_attributes_list(pa);
                    }
                }
            }
            if (cm.Count>0)
                cd.body.Insert(0, cm);
		}
        break;
      case 285: // record_type -> tkRecord, optional_base_classes, optional_where_section, 
                //                member_list_section, tkEnd
{ 
			CurrentSemanticValue.td = NewRecordType(ValueStack[ValueStack.Depth-4].stn as named_type_reference_list, ValueStack[ValueStack.Depth-3].stn as where_definition_list, ValueStack[ValueStack.Depth-2].stn as class_body_list, CurrentLocationSpan);
            class_definition cd = CurrentSemanticValue.td as class_definition;
            if (cd == null || cd.body == null)
                break;
            var ccnt = cd.body.DescendantNodes().OfType<simple_property>().ToArray();
            var cm = new class_members(access_modifer.private_modifer);
            foreach (var prop in ccnt)
            {
                var td = prop.property_type;
                var ra = prop.accessors?.read_accessor;

                if (ra != null && ra.pr != null)
                {
                    if (prop.parameter_list != null)
                        parsertools.AddErrorFromResource("EXTENDED_INDEXED_PROPERTIES",ra.source_context);
                    var rapr = ra.pr as procedure_definition;
                    (rapr.proc_header as function_header).return_type = td;
                    cm.Add(rapr);
                    if (prop.attr == definition_attribute.Static)
                    {
                        rapr.proc_header.class_keyword = true;
                        procedure_attribute pa = new procedure_attribute(proc_attribute.attr_static);
                        pa.source_context = rapr.proc_header.source_context;
                        rapr.proc_header.proc_attributes = new procedure_attributes_list(pa);
                    }
                }
                var wa = prop.accessors?.write_accessor;

                if (wa != null && wa.pr != null && prop.parameter_list == null)
                {
                    if (prop.parameter_list != null)
                        parsertools.AddErrorFromResource("EXTENDED_INDEXED_PROPERTIES",ra.source_context);
                    var wapr = wa.pr as procedure_definition;
                    wapr.proc_header.parameters.params_list[0].vars_type = td;
                    cm.Add(wapr);
                    if (prop.attr == definition_attribute.Static)
                    {
                        wapr.proc_header.class_keyword = true;
                        procedure_attribute pa = new procedure_attribute(proc_attribute.attr_static);
                        pa.source_context = wapr.proc_header.source_context;
                        wapr.proc_header.proc_attributes = new procedure_attributes_list(pa);
                    }
                }
            }
            if (cm.Count>0)
                cd.body.Insert(0, cm);
		}
        break;
      case 286: // class_attribute -> tkSealed
{ CurrentSemanticValue.ob = class_attribute.Sealed; }
        break;
      case 287: // class_attribute -> tkPartial
{ CurrentSemanticValue.ob = class_attribute.Partial; }
        break;
      case 288: // class_attribute -> tkAbstract
{ CurrentSemanticValue.ob = class_attribute.Abstract; }
        break;
      case 289: // class_attribute -> tkAuto
{ CurrentSemanticValue.ob = class_attribute.Auto; }
        break;
      case 290: // class_attribute -> tkStatic
{ CurrentSemanticValue.ob = class_attribute.Static; }
        break;
      case 291: // class_attributes -> /* empty */
{ 
			CurrentSemanticValue.ob = class_attribute.None; 
		}
        break;
      case 292: // class_attributes -> class_attributes1
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ob;
		}
        break;
      case 293: // class_attributes1 -> class_attribute
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ob;
		}
        break;
      case 294: // class_attributes1 -> class_attributes1, class_attribute
{
            if (((class_attribute)ValueStack[ValueStack.Depth-2].ob & (class_attribute)ValueStack[ValueStack.Depth-1].ob) == (class_attribute)ValueStack[ValueStack.Depth-1].ob)
                parsertools.AddErrorFromResource("ATTRIBUTE_REDECLARED",LocationStack[LocationStack.Depth-1]);
			CurrentSemanticValue.ob  = ((class_attribute)ValueStack[ValueStack.Depth-2].ob) | ((class_attribute)ValueStack[ValueStack.Depth-1].ob);
			//$$ = $1;
		}
        break;
      case 295: // class_or_interface_keyword -> tkClass
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 296: // class_or_interface_keyword -> tkInterface
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 297: // class_or_interface_keyword -> tkTemplate
{ 
			CurrentSemanticValue.ti = NewClassOrInterfaceKeyword(ValueStack[ValueStack.Depth-1].ti);
		}
        break;
      case 298: // class_or_interface_keyword -> tkTemplate, tkClass
{ 
			CurrentSemanticValue.ti = NewClassOrInterfaceKeyword(ValueStack[ValueStack.Depth-2].ti, "c", CurrentLocationSpan);
		}
        break;
      case 299: // class_or_interface_keyword -> tkTemplate, tkRecord
{ 
			CurrentSemanticValue.ti = NewClassOrInterfaceKeyword(ValueStack[ValueStack.Depth-2].ti, "r", CurrentLocationSpan);
		}
        break;
      case 300: // class_or_interface_keyword -> tkTemplate, tkInterface
{ 
			CurrentSemanticValue.ti = NewClassOrInterfaceKeyword(ValueStack[ValueStack.Depth-2].ti, "i", CurrentLocationSpan);
		}
        break;
      case 301: // optional_component_list_seq_end -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 302: // optional_component_list_seq_end -> member_list_section, tkEnd
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 304: // optional_base_classes -> tkRoundOpen, base_classes_names_list, tkRoundClose
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 305: // base_classes_names_list -> base_class_name
{ 
			CurrentSemanticValue.stn = new named_type_reference_list(ValueStack[ValueStack.Depth-1].stn as named_type_reference, CurrentLocationSpan);
		}
        break;
      case 306: // base_classes_names_list -> base_classes_names_list, tkComma, base_class_name
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as named_type_reference_list).Add(ValueStack[ValueStack.Depth-1].stn as named_type_reference, CurrentLocationSpan);
		}
        break;
      case 307: // base_class_name -> simple_type_identifier
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 308: // base_class_name -> template_type
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 309: // template_arguments -> tkLower, ident_list, tkGreater
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 310: // optional_where_section -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 311: // optional_where_section -> where_part_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 312: // where_part_list -> where_part
{ 
			CurrentSemanticValue.stn = new where_definition_list(ValueStack[ValueStack.Depth-1].stn as where_definition, CurrentLocationSpan);
		}
        break;
      case 313: // where_part_list -> where_part_list, where_part
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as where_definition_list).Add(ValueStack[ValueStack.Depth-1].stn as where_definition, CurrentLocationSpan);
		}
        break;
      case 314: // where_part -> tkWhere, ident_list, tkColon, type_ref_and_secific_list, 
                //               tkSemiColon
{ 
			CurrentSemanticValue.stn = new where_definition(ValueStack[ValueStack.Depth-4].stn as ident_list, ValueStack[ValueStack.Depth-2].stn as where_type_specificator_list, CurrentLocationSpan); 
		}
        break;
      case 315: // type_ref_and_secific_list -> type_ref_or_secific
{ 
			CurrentSemanticValue.stn = new where_type_specificator_list(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 316: // type_ref_and_secific_list -> type_ref_and_secific_list, tkComma, 
                //                              type_ref_or_secific
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as where_type_specificator_list).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 317: // type_ref_or_secific -> type_ref
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 318: // type_ref_or_secific -> tkClass
{ 
			CurrentSemanticValue.td = new declaration_specificator(DeclarationSpecificator.WhereDefClass, ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); 
		}
        break;
      case 319: // type_ref_or_secific -> tkRecord
{ 
			CurrentSemanticValue.td = new declaration_specificator(DeclarationSpecificator.WhereDefValueType, ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); 
		}
        break;
      case 320: // type_ref_or_secific -> tkConstructor
{ 
			CurrentSemanticValue.td = new declaration_specificator(DeclarationSpecificator.WhereDefConstructor, ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); 
		}
        break;
      case 321: // member_list_section -> member_list
{ 
			CurrentSemanticValue.stn = new class_body_list(ValueStack[ValueStack.Depth-1].stn as class_members, CurrentLocationSpan);
        }
        break;
      case 322: // member_list_section -> member_list_section, ot_visibility_specifier, 
                //                        member_list
{ 
		    (ValueStack[ValueStack.Depth-1].stn as class_members).access_mod = ValueStack[ValueStack.Depth-2].stn as access_modifer_node;
			(ValueStack[ValueStack.Depth-3].stn as class_body_list).Add(ValueStack[ValueStack.Depth-1].stn as class_members,CurrentLocationSpan);
			
			if ((ValueStack[ValueStack.Depth-3].stn as class_body_list).class_def_blocks[0].Count == 0)
                (ValueStack[ValueStack.Depth-3].stn as class_body_list).class_def_blocks.RemoveAt(0);
			
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-3].stn;
        }
        break;
      case 323: // ot_visibility_specifier -> tkInternal
{ CurrentSemanticValue.stn = new access_modifer_node(access_modifer.internal_modifer, CurrentLocationSpan); }
        break;
      case 324: // ot_visibility_specifier -> tkPublic
{ CurrentSemanticValue.stn = new access_modifer_node(access_modifer.public_modifer, CurrentLocationSpan); }
        break;
      case 325: // ot_visibility_specifier -> tkProtected
{ CurrentSemanticValue.stn = new access_modifer_node(access_modifer.protected_modifer, CurrentLocationSpan); }
        break;
      case 326: // ot_visibility_specifier -> tkPrivate
{ CurrentSemanticValue.stn = new access_modifer_node(access_modifer.private_modifer, CurrentLocationSpan); }
        break;
      case 327: // member_list -> /* empty */
{ CurrentSemanticValue.stn = new class_members(); }
        break;
      case 328: // member_list -> field_or_const_definition_list, optional_semicolon
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 329: // member_list -> method_decl_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 330: // member_list -> field_or_const_definition_list, tkSemiColon, method_decl_list
{  
			(ValueStack[ValueStack.Depth-3].stn as class_members).members.AddRange((ValueStack[ValueStack.Depth-1].stn as class_members).members);
			(ValueStack[ValueStack.Depth-3].stn as class_members).source_context = CurrentLocationSpan;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-3].stn;
        }
        break;
      case 331: // ident_list -> identifier
{ 
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 332: // ident_list -> ident_list, tkComma, identifier
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 333: // optional_semicolon -> /* empty */
{ CurrentSemanticValue.ob = null; }
        break;
      case 334: // optional_semicolon -> tkSemiColon
{ CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 335: // field_or_const_definition_list -> field_or_const_definition
{ 
			CurrentSemanticValue.stn = new class_members(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 336: // field_or_const_definition_list -> field_or_const_definition_list, tkSemiColon, 
                //                                   field_or_const_definition
{   
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as class_members).Add(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 337: // field_or_const_definition -> attribute_declarations, 
                //                              simple_field_or_const_definition
{  
		    (ValueStack[ValueStack.Depth-1].stn as declaration).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
        }
        break;
      case 338: // method_decl_list -> method_or_property_decl
{ 
			CurrentSemanticValue.stn = new class_members(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 339: // method_decl_list -> method_decl_list, method_or_property_decl
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-2].stn as class_members).Add(ValueStack[ValueStack.Depth-1].stn as declaration, CurrentLocationSpan);
        }
        break;
      case 340: // method_or_property_decl -> method_decl_withattr
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 341: // method_or_property_decl -> property_definition
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 342: // simple_field_or_const_definition -> tkConst, only_const_decl
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 343: // simple_field_or_const_definition -> field_definition
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 344: // simple_field_or_const_definition -> class_or_static, field_definition
{ 
			(ValueStack[ValueStack.Depth-1].stn as var_def_statement).var_attr = definition_attribute.Static;
			(ValueStack[ValueStack.Depth-1].stn as var_def_statement).source_context = CurrentLocationSpan;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
        }
        break;
      case 345: // class_or_static -> tkStatic
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 346: // class_or_static -> tkClass
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 347: // field_definition -> var_decl_part
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 348: // field_definition -> tkEvent, ident_list, tkColon, type_ref
{ 
			CurrentSemanticValue.stn = new var_def_statement(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, null, definition_attribute.None, true, CurrentLocationSpan); 
        }
        break;
      case 349: // method_decl_withattr -> attribute_declarations, method_header
{  
			(ValueStack[ValueStack.Depth-1].td as declaration).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].td;
        }
        break;
      case 350: // method_decl_withattr -> attribute_declarations, method_decl
{  
			(ValueStack[ValueStack.Depth-1].stn as declaration).attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
            if (ValueStack[ValueStack.Depth-1].stn is procedure_definition && (ValueStack[ValueStack.Depth-1].stn as procedure_definition).proc_header != null)
                (ValueStack[ValueStack.Depth-1].stn as procedure_definition).proc_header.attributes = ValueStack[ValueStack.Depth-2].stn as attribute_list;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
     }
        break;
      case 351: // method_decl -> inclass_proc_func_decl
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 352: // method_decl -> inclass_constr_destr_decl
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 353: // method_header -> class_or_static, method_procfunc_header
{ 
			(ValueStack[ValueStack.Depth-1].td as procedure_header).class_keyword = true;
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
		}
        break;
      case 354: // method_header -> method_procfunc_header
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 355: // method_header -> constr_destr_header
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 356: // method_procfunc_header -> proc_func_header
{ 
			CurrentSemanticValue.td = NewProcfuncHeading(ValueStack[ValueStack.Depth-1].td as procedure_header);
		}
        break;
      case 357: // proc_func_header -> proc_header
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 358: // proc_func_header -> func_header
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 359: // constr_destr_header -> tkConstructor, optional_proc_name, fp_list, 
                //                        optional_method_modificators
{ 
			CurrentSemanticValue.td = new constructor(null,ValueStack[ValueStack.Depth-2].stn as formal_parameters,ValueStack[ValueStack.Depth-1].stn as procedure_attributes_list,ValueStack[ValueStack.Depth-3].stn as method_name,false,false,null,null,CurrentLocationSpan);
        }
        break;
      case 360: // constr_destr_header -> class_or_static, tkConstructor, optional_proc_name, 
                //                        fp_list, optional_method_modificators
{ 
			CurrentSemanticValue.td = new constructor(null,ValueStack[ValueStack.Depth-2].stn as formal_parameters,ValueStack[ValueStack.Depth-1].stn as procedure_attributes_list,ValueStack[ValueStack.Depth-3].stn as method_name,false,true,null,null,CurrentLocationSpan);
        }
        break;
      case 361: // constr_destr_header -> tkDestructor, optional_proc_name, fp_list, 
                //                        optional_method_modificators
{ 
			CurrentSemanticValue.td = new destructor(null,ValueStack[ValueStack.Depth-2].stn as formal_parameters,ValueStack[ValueStack.Depth-1].stn as procedure_attributes_list,ValueStack[ValueStack.Depth-3].stn as method_name, false,false,null,null,CurrentLocationSpan);
        }
        break;
      case 362: // optional_proc_name -> proc_name
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 363: // optional_proc_name -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 364: // qualified_identifier -> identifier
{ CurrentSemanticValue.stn = new method_name(null,null,ValueStack[ValueStack.Depth-1].id,null,CurrentLocationSpan); }
        break;
      case 365: // qualified_identifier -> visibility_specifier
{ CurrentSemanticValue.stn = new method_name(null,null,ValueStack[ValueStack.Depth-1].id,null,CurrentLocationSpan); }
        break;
      case 366: // qualified_identifier -> qualified_identifier, tkPoint, identifier
{
			CurrentSemanticValue.stn = NewQualifiedIdentifier(ValueStack[ValueStack.Depth-3].stn as method_name, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
        }
        break;
      case 367: // qualified_identifier -> qualified_identifier, tkPoint, visibility_specifier
{
			CurrentSemanticValue.stn = NewQualifiedIdentifier(ValueStack[ValueStack.Depth-3].stn as method_name, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
        }
        break;
      case 368: // property_definition -> attribute_declarations, simple_property_definition
{  
			CurrentSemanticValue.stn = NewPropertyDefinition(ValueStack[ValueStack.Depth-2].stn as attribute_list, ValueStack[ValueStack.Depth-1].stn as declaration, LocationStack[LocationStack.Depth-1]);
        }
        break;
      case 369: // simple_property_definition -> tkProperty, qualified_identifier, 
                //                               property_interface, property_specifiers, 
                //                               tkSemiColon, array_defaultproperty
{ 
			CurrentSemanticValue.stn = NewSimplePropertyDefinition(ValueStack[ValueStack.Depth-5].stn as method_name, ValueStack[ValueStack.Depth-4].stn as property_interface, ValueStack[ValueStack.Depth-3].stn as property_accessors, proc_attribute.attr_none, ValueStack[ValueStack.Depth-1].stn as property_array_default, CurrentLocationSpan);
        }
        break;
      case 370: // simple_property_definition -> tkProperty, qualified_identifier, 
                //                               property_interface, property_specifiers, 
                //                               tkSemiColon, property_modificator, tkSemiColon, 
                //                               array_defaultproperty
{ 
            proc_attribute pa = proc_attribute.attr_none;
            if (ValueStack[ValueStack.Depth-3].id.name.ToLower() == "virtual")
               	pa = proc_attribute.attr_virtual;
 			else if (ValueStack[ValueStack.Depth-3].id.name.ToLower() == "override") 
 			    pa = proc_attribute.attr_override;
            else if (ValueStack[ValueStack.Depth-3].id.name.ToLower() == "abstract") 
 			    pa = proc_attribute.attr_abstract;
			CurrentSemanticValue.stn = NewSimplePropertyDefinition(ValueStack[ValueStack.Depth-7].stn as method_name, ValueStack[ValueStack.Depth-6].stn as property_interface, ValueStack[ValueStack.Depth-5].stn as property_accessors, pa, ValueStack[ValueStack.Depth-1].stn as property_array_default, CurrentLocationSpan);
        }
        break;
      case 371: // simple_property_definition -> class_or_static, tkProperty, qualified_identifier, 
                //                               property_interface, property_specifiers, 
                //                               tkSemiColon, array_defaultproperty
{ 
			CurrentSemanticValue.stn = NewSimplePropertyDefinition(ValueStack[ValueStack.Depth-5].stn as method_name, ValueStack[ValueStack.Depth-4].stn as property_interface, ValueStack[ValueStack.Depth-3].stn as property_accessors, proc_attribute.attr_none, ValueStack[ValueStack.Depth-1].stn as property_array_default, CurrentLocationSpan);
        	(CurrentSemanticValue.stn as simple_property).attr = definition_attribute.Static;
        }
        break;
      case 372: // simple_property_definition -> class_or_static, tkProperty, qualified_identifier, 
                //                               property_interface, property_specifiers, 
                //                               tkSemiColon, property_modificator, tkSemiColon, 
                //                               array_defaultproperty
{ 
			parsertools.AddErrorFromResource("STATIC_PROPERTIES_CANNOT_HAVE_ATTRBUTE_{0}",LocationStack[LocationStack.Depth-3],ValueStack[ValueStack.Depth-3].id.name);        	
        }
        break;
      case 373: // array_defaultproperty -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 374: // array_defaultproperty -> tkDefault, tkSemiColon
{ 
			CurrentSemanticValue.stn = new property_array_default();  
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 375: // property_interface -> property_parameter_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new property_interface(ValueStack[ValueStack.Depth-3].stn as property_parameter_list, ValueStack[ValueStack.Depth-1].td, null, CurrentLocationSpan);
        }
        break;
      case 376: // property_parameter_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 377: // property_parameter_list -> tkSquareOpen, parameter_decl_list, tkSquareClose
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 378: // parameter_decl_list -> parameter_decl
{ 
			CurrentSemanticValue.stn = new property_parameter_list(ValueStack[ValueStack.Depth-1].stn as property_parameter, CurrentLocationSpan);
		}
        break;
      case 379: // parameter_decl_list -> parameter_decl_list, tkSemiColon, parameter_decl
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as property_parameter_list).Add(ValueStack[ValueStack.Depth-1].stn as property_parameter, CurrentLocationSpan);
		}
        break;
      case 380: // parameter_decl -> ident_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new property_parameter(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
		}
        break;
      case 381: // optional_read_expr -> expr_with_func_decl_lambda
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 382: // optional_read_expr -> /* empty */
{ CurrentSemanticValue.ex = null; }
        break;
      case 384: // property_specifiers -> tkRead, optional_read_expr, write_property_specifiers
{ 
        	if (ValueStack[ValueStack.Depth-2].ex == null || ValueStack[ValueStack.Depth-2].ex is ident) // ����������� ��������
        	{
        		CurrentSemanticValue.stn = NewPropertySpecifiersRead(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-2].ex as ident, null, null, ValueStack[ValueStack.Depth-1].stn as property_accessors, CurrentLocationSpan);
        	}
        	else // ����������� ��������
        	{
				var id = NewId("#GetGen", LocationStack[LocationStack.Depth-2]);
                procedure_definition pr = null;
                if (!parsertools.build_tree_for_formatter)
                    pr = CreateAndAddToClassReadFunc(ValueStack[ValueStack.Depth-2].ex, id, LocationStack[LocationStack.Depth-2]);
				CurrentSemanticValue.stn = NewPropertySpecifiersRead(ValueStack[ValueStack.Depth-3].id, id, pr, ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-1].stn as property_accessors, CurrentLocationSpan); // $2 ��������� ��� �������������� 
			}
        }
        break;
      case 385: // property_specifiers -> tkWrite, unlabelled_stmt, read_property_specifiers
{ 
        	if (ValueStack[ValueStack.Depth-2].stn is empty_statement)
        	{
        	
        		CurrentSemanticValue.stn = NewPropertySpecifiersWrite(ValueStack[ValueStack.Depth-3].id, null, null, null, ValueStack[ValueStack.Depth-1].stn as property_accessors, CurrentLocationSpan);
        	}
        	else if (ValueStack[ValueStack.Depth-2].stn is procedure_call && (ValueStack[ValueStack.Depth-2].stn as procedure_call).is_ident) // ����������� ��������
        	{
        	
        		CurrentSemanticValue.stn = NewPropertySpecifiersWrite(ValueStack[ValueStack.Depth-3].id, (ValueStack[ValueStack.Depth-2].stn as procedure_call).func_name as ident, null, null, ValueStack[ValueStack.Depth-1].stn as property_accessors, CurrentLocationSpan);  // ������ �������� - � ���������������
        	}
        	else // ����������� ��������
        	{
				var id = NewId("#SetGen", LocationStack[LocationStack.Depth-2]);
                procedure_definition pr = null;
                if (!parsertools.build_tree_for_formatter)
                    pr = CreateAndAddToClassWriteProc(ValueStack[ValueStack.Depth-2].stn as statement,id,LocationStack[LocationStack.Depth-2]);
				CurrentSemanticValue.stn = NewPropertySpecifiersWrite(ValueStack[ValueStack.Depth-3].id, id, pr, ValueStack[ValueStack.Depth-2].stn as statement, ValueStack[ValueStack.Depth-1].stn as property_accessors, CurrentLocationSpan); // $2 ��������� ��� ��������������
			}
        }
        break;
      case 387: // write_property_specifiers -> tkWrite, unlabelled_stmt
{ 
        	if (ValueStack[ValueStack.Depth-1].stn is empty_statement)
        	{
        	
        		CurrentSemanticValue.stn = NewPropertySpecifiersWrite(ValueStack[ValueStack.Depth-2].id, null, null, null, null, CurrentLocationSpan);
        	}
        	else if (ValueStack[ValueStack.Depth-1].stn is procedure_call && (ValueStack[ValueStack.Depth-1].stn as procedure_call).is_ident)
        	{
        		CurrentSemanticValue.stn = NewPropertySpecifiersWrite(ValueStack[ValueStack.Depth-2].id, (ValueStack[ValueStack.Depth-1].stn as procedure_call).func_name as ident, null, null, null, CurrentLocationSpan); // ������ �������� - � ���������������
        	}
        	else 
        	{
				var id = NewId("#SetGen", LocationStack[LocationStack.Depth-1]);
                procedure_definition pr = null;
                if (!parsertools.build_tree_for_formatter)
                    pr = CreateAndAddToClassWriteProc(ValueStack[ValueStack.Depth-1].stn as statement,id,LocationStack[LocationStack.Depth-1]);
				CurrentSemanticValue.stn = NewPropertySpecifiersWrite(ValueStack[ValueStack.Depth-2].id, id, pr, ValueStack[ValueStack.Depth-1].stn as statement, null, CurrentLocationSpan);
			}
       }
        break;
      case 389: // read_property_specifiers -> tkRead, optional_read_expr
{ 
        	if (ValueStack[ValueStack.Depth-1].ex == null || ValueStack[ValueStack.Depth-1].ex is ident)
        	{
        		CurrentSemanticValue.stn = NewPropertySpecifiersRead(ValueStack[ValueStack.Depth-2].id, ValueStack[ValueStack.Depth-1].ex as ident, null, null, null, CurrentLocationSpan);
        	}
        	else 
        	{
				var id = NewId("#GetGen", LocationStack[LocationStack.Depth-1]);
                procedure_definition pr = null;
                if (!parsertools.build_tree_for_formatter)
                    pr = CreateAndAddToClassReadFunc(ValueStack[ValueStack.Depth-1].ex,id,LocationStack[LocationStack.Depth-1]);
				CurrentSemanticValue.stn = NewPropertySpecifiersRead(ValueStack[ValueStack.Depth-2].id, id, pr, ValueStack[ValueStack.Depth-1].ex, null, CurrentLocationSpan);
			}
       }
        break;
      case 390: // var_decl -> var_decl_part, tkSemiColon
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 393: // var_decl_part -> ident_list, tkColon, type_ref
{ 
			CurrentSemanticValue.stn = new var_def_statement(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, null, definition_attribute.None, false, CurrentLocationSpan);
		}
        break;
      case 394: // var_decl_part -> ident_list, tkAssign, expr
{ 
			CurrentSemanticValue.stn = new var_def_statement(ValueStack[ValueStack.Depth-3].stn as ident_list, null, ValueStack[ValueStack.Depth-1].ex, definition_attribute.None, false, CurrentLocationSpan);		
		}
        break;
      case 395: // var_decl_part -> ident_list, tkColon, type_ref, tkAssignOrEqual, 
                //                  typed_var_init_expression
{ 
			CurrentSemanticValue.stn = new var_def_statement(ValueStack[ValueStack.Depth-5].stn as ident_list, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].ex, definition_attribute.None, false, CurrentLocationSpan); 
		}
        break;
      case 396: // typed_var_init_expression -> typed_const_plus
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 397: // typed_var_init_expression -> expl_func_decl_lambda
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 398: // typed_var_init_expression -> identifier, tkArrow, lambda_function_body
{  
			var idList = new ident_list(ValueStack[ValueStack.Depth-3].id, LocationStack[LocationStack.Depth-3]); 
			var formalPars = new formal_parameters(new typed_parameters(idList, new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), LocationStack[LocationStack.Depth-3]), parametr_kind.none, null, LocationStack[LocationStack.Depth-3]), LocationStack[LocationStack.Depth-3]);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), LocationStack[LocationStack.Depth-3]), ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 399: // typed_var_init_expression -> tkRoundOpen, tkRoundClose, lambda_type_ref, 
                //                              tkArrow, lambda_function_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 400: // typed_var_init_expression -> tkRoundOpen, typed_const_list, tkRoundClose, 
                //                              tkArrow, lambda_function_body
{  
		    var el = ValueStack[ValueStack.Depth-4].stn as expression_list;
		    var cnt = el.Count;
		    
			var idList = new ident_list();
			idList.source_context = LocationStack[LocationStack.Depth-4];
			
			for (int j = 0; j < cnt; j++)
			{
				if (!(el.expressions[j] is ident))
					parsertools.AddErrorFromResource("ONE_TKIDENTIFIER",el.expressions[j].source_context);
				idList.idents.Add(el.expressions[j] as ident);
			}	
				
			var any = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), LocationStack[LocationStack.Depth-4]);	
				
			var formalPars = new formal_parameters(new typed_parameters(idList, any, parametr_kind.none, null, LocationStack[LocationStack.Depth-4]), LocationStack[LocationStack.Depth-4]);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, any, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 401: // typed_const_plus -> typed_const
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 402: // typed_const_plus -> default_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 403: // constr_destr_decl -> constr_destr_header, block
{ 
			CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, ValueStack[ValueStack.Depth-1].stn as block, CurrentLocationSpan);
        }
        break;
      case 404: // constr_destr_decl -> tkConstructor, optional_proc_name, fp_list, tkAssign, 
                //                      unlabelled_stmt, tkSemiColon
{ 
   			if (ValueStack[ValueStack.Depth-2].stn is empty_statement)
				parsertools.AddErrorFromResource("EMPTY_STATEMENT_IN_SHORT_PROC_DEFINITION",LocationStack[LocationStack.Depth-1]);
            var tmp = new constructor(null,ValueStack[ValueStack.Depth-4].stn as formal_parameters,new procedure_attributes_list(new List<procedure_attribute>(),CurrentLocationSpan),ValueStack[ValueStack.Depth-5].stn as method_name,false,false,null,null,LexLocation.MergeAll(LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5],LocationStack[LocationStack.Depth-4]));
            CurrentSemanticValue.stn = new procedure_definition(tmp as procedure_header, new block(null,new statement_list(ValueStack[ValueStack.Depth-2].stn as statement,LocationStack[LocationStack.Depth-2]),LocationStack[LocationStack.Depth-2]), LocationStack[LocationStack.Depth-6].Merge(LocationStack[LocationStack.Depth-2]));
            if (parsertools.build_tree_for_formatter)
				CurrentSemanticValue.stn = new short_func_definition(CurrentSemanticValue.stn as procedure_definition);
        }
        break;
      case 405: // constr_destr_decl -> class_or_static, tkConstructor, optional_proc_name, 
                //                      fp_list, tkAssign, unlabelled_stmt, tkSemiColon
{ 
   			if (ValueStack[ValueStack.Depth-2].stn is empty_statement)
				parsertools.AddErrorFromResource("EMPTY_STATEMENT_IN_SHORT_PROC_DEFINITION",LocationStack[LocationStack.Depth-1]);
            var tmp = new constructor(null,ValueStack[ValueStack.Depth-4].stn as formal_parameters,new procedure_attributes_list(new List<procedure_attribute>(),CurrentLocationSpan),ValueStack[ValueStack.Depth-5].stn as method_name,false,true,null,null,LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5],LocationStack[LocationStack.Depth-4]));
            CurrentSemanticValue.stn = new procedure_definition(tmp as procedure_header, new block(null,new statement_list(ValueStack[ValueStack.Depth-2].stn as statement,LocationStack[LocationStack.Depth-2]),LocationStack[LocationStack.Depth-2]), LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-2]));
            if (parsertools.build_tree_for_formatter)
				CurrentSemanticValue.stn = new short_func_definition(CurrentSemanticValue.stn as procedure_definition);
        }
        break;
      case 406: // inclass_constr_destr_decl -> constr_destr_header, inclass_block
{ 
			CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, ValueStack[ValueStack.Depth-1].stn as block, CurrentLocationSpan);
        }
        break;
      case 407: // inclass_constr_destr_decl -> tkConstructor, optional_proc_name, fp_list, 
                //                              tkAssign, unlabelled_stmt, tkSemiColon
{ 
   			if (ValueStack[ValueStack.Depth-2].stn is empty_statement)
				parsertools.AddErrorFromResource("EMPTY_STATEMENT_IN_SHORT_PROC_DEFINITION",LocationStack[LocationStack.Depth-1]);
            var tmp = new constructor(null,ValueStack[ValueStack.Depth-4].stn as formal_parameters,new procedure_attributes_list(new List<procedure_attribute>(),CurrentLocationSpan),ValueStack[ValueStack.Depth-5].stn as method_name,false,false,null,null,LexLocation.MergeAll(LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5],LocationStack[LocationStack.Depth-4],LocationStack[LocationStack.Depth-3]));
            CurrentSemanticValue.stn = new procedure_definition(tmp as procedure_header, new block(null,new statement_list(ValueStack[ValueStack.Depth-2].stn as statement,LocationStack[LocationStack.Depth-2]),LocationStack[LocationStack.Depth-2]), CurrentLocationSpan);
            if (parsertools.build_tree_for_formatter)
				CurrentSemanticValue.stn = new short_func_definition(CurrentSemanticValue.stn as procedure_definition);
        }
        break;
      case 408: // inclass_constr_destr_decl -> class_or_static, tkConstructor, optional_proc_name, 
                //                              fp_list, tkAssign, unlabelled_stmt, tkSemiColon
{ 
   			if (ValueStack[ValueStack.Depth-2].stn is empty_statement)
				parsertools.AddErrorFromResource("EMPTY_STATEMENT_IN_SHORT_PROC_DEFINITION",LocationStack[LocationStack.Depth-1]);
            var tmp = new constructor(null,ValueStack[ValueStack.Depth-4].stn as formal_parameters,new procedure_attributes_list(new List<procedure_attribute>(),CurrentLocationSpan),ValueStack[ValueStack.Depth-5].stn as method_name,false,true,null,null,LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5],LocationStack[LocationStack.Depth-4]));
            CurrentSemanticValue.stn = new procedure_definition(tmp as procedure_header, new block(null,new statement_list(ValueStack[ValueStack.Depth-2].stn as statement,LocationStack[LocationStack.Depth-2]),LocationStack[LocationStack.Depth-2]), CurrentLocationSpan);
            if (parsertools.build_tree_for_formatter)
				CurrentSemanticValue.stn = new short_func_definition(CurrentSemanticValue.stn as procedure_definition);
        }
        break;
      case 409: // proc_func_decl -> proc_func_decl_noclass
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 410: // proc_func_decl -> class_or_static, proc_func_decl_noclass
{ 
			(ValueStack[ValueStack.Depth-1].stn as procedure_definition).proc_header.class_keyword = true;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 411: // proc_func_decl_noclass -> proc_func_header, proc_func_external_block
{
            CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, ValueStack[ValueStack.Depth-1].stn as proc_block, CurrentLocationSpan);
        }
        break;
      case 412: // proc_func_decl_noclass -> tkFunction, func_name, fp_list, tkColon, fptype, 
                //                           optional_method_modificators1, tkAssign, expr_l1, 
                //                           tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortFuncDefinition(ValueStack[ValueStack.Depth-7].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-8].stn as method_name, ValueStack[ValueStack.Depth-5].td as type_definition, ValueStack[ValueStack.Depth-2].ex, LocationStack[LocationStack.Depth-9].Merge(LocationStack[LocationStack.Depth-4]));
		}
        break;
      case 413: // proc_func_decl_noclass -> tkFunction, func_name, fp_list, 
                //                           optional_method_modificators1, tkAssign, expr_l1, 
                //                           tkSemiColon
{
			if (ValueStack[ValueStack.Depth-2].ex is dot_question_node)
				parsertools.AddErrorFromResource("DOT_QUECTION_IN_SHORT_FUN",LocationStack[LocationStack.Depth-2]);
	
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortFuncDefinition(ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-6].stn as method_name, null, ValueStack[ValueStack.Depth-2].ex, LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-4]));
		}
        break;
      case 414: // proc_func_decl_noclass -> tkFunction, func_name, fp_list, tkColon, fptype, 
                //                           optional_method_modificators1, tkAssign, 
                //                           func_decl_lambda, tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortFuncDefinition(ValueStack[ValueStack.Depth-7].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-8].stn as method_name, ValueStack[ValueStack.Depth-5].td as type_definition, ValueStack[ValueStack.Depth-2].ex, LocationStack[LocationStack.Depth-9].Merge(LocationStack[LocationStack.Depth-4]));
		}
        break;
      case 415: // proc_func_decl_noclass -> tkFunction, func_name, fp_list, 
                //                           optional_method_modificators1, tkAssign, 
                //                           func_decl_lambda, tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortFuncDefinition(ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-6].stn as method_name, null, ValueStack[ValueStack.Depth-2].ex, LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-4]));
		}
        break;
      case 416: // proc_func_decl_noclass -> tkProcedure, proc_name, fp_list, 
                //                           optional_method_modificators1, tkAssign, 
                //                           unlabelled_stmt, tkSemiColon
{
			if (ValueStack[ValueStack.Depth-2].stn is empty_statement)
				parsertools.AddErrorFromResource("EMPTY_STATEMENT_IN_SHORT_PROC_DEFINITION",LocationStack[LocationStack.Depth-2]);
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortProcDefinition(ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-6].stn as method_name, ValueStack[ValueStack.Depth-2].stn as statement, LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-4]));
		}
        break;
      case 417: // proc_func_decl_noclass -> proc_func_header, tkForward, tkSemiColon
{
			CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-3].td as procedure_header, null, CurrentLocationSpan);
            (CurrentSemanticValue.stn as procedure_definition).proc_header.proc_attributes.Add((procedure_attribute)ValueStack[ValueStack.Depth-2].id, ValueStack[ValueStack.Depth-2].id.source_context);
		}
        break;
      case 418: // inclass_proc_func_decl -> inclass_proc_func_decl_noclass
{ 
            CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
        }
        break;
      case 419: // inclass_proc_func_decl -> class_or_static, inclass_proc_func_decl_noclass
{ 
		    if ((ValueStack[ValueStack.Depth-1].stn as procedure_definition).proc_header != null)
				(ValueStack[ValueStack.Depth-1].stn as procedure_definition).proc_header.class_keyword = true;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 420: // inclass_proc_func_decl_noclass -> proc_func_header, inclass_block
{
            CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, ValueStack[ValueStack.Depth-1].stn as proc_block, CurrentLocationSpan);
		}
        break;
      case 421: // inclass_proc_func_decl_noclass -> tkFunction, func_name, fp_list, tkColon, 
                //                                   fptype, optional_method_modificators1, 
                //                                   tkAssign, expr_l1_func_decl_lambda, 
                //                                   tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortFuncDefinition(ValueStack[ValueStack.Depth-7].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-8].stn as method_name, ValueStack[ValueStack.Depth-5].td as type_definition, ValueStack[ValueStack.Depth-2].ex, LocationStack[LocationStack.Depth-9].Merge(LocationStack[LocationStack.Depth-4]));
			if (parsertools.build_tree_for_formatter)
				CurrentSemanticValue.stn = new short_func_definition(CurrentSemanticValue.stn as procedure_definition);
		}
        break;
      case 422: // inclass_proc_func_decl_noclass -> tkFunction, func_name, fp_list, 
                //                                   optional_method_modificators1, tkAssign, 
                //                                   expr_l1_func_decl_lambda, tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortFuncDefinition(ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-6].stn as method_name, null, ValueStack[ValueStack.Depth-2].ex, LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-4]));
			if (parsertools.build_tree_for_formatter)
				CurrentSemanticValue.stn = new short_func_definition(CurrentSemanticValue.stn as procedure_definition);
		}
        break;
      case 423: // inclass_proc_func_decl_noclass -> tkProcedure, proc_name, fp_list, 
                //                                   optional_method_modificators1, tkAssign, 
                //                                   unlabelled_stmt, tkSemiColon
{
			CurrentSemanticValue.stn = SyntaxTreeBuilder.BuildShortProcDefinition(ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-4].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-6].stn as method_name, ValueStack[ValueStack.Depth-2].stn as statement, LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-4]));
			if (parsertools.build_tree_for_formatter)
				CurrentSemanticValue.stn = new short_func_definition(CurrentSemanticValue.stn as procedure_definition);
		}
        break;
      case 424: // proc_func_external_block -> block
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 425: // proc_func_external_block -> external_block
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 426: // proc_name -> func_name
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 427: // func_name -> func_meth_name_ident
{ 
			CurrentSemanticValue.stn = new method_name(null,null, ValueStack[ValueStack.Depth-1].id, null, CurrentLocationSpan); 
		}
        break;
      case 428: // func_name -> func_class_name_ident_list, tkPoint, func_meth_name_ident
{ 
        	var ln = ValueStack[ValueStack.Depth-3].ob as List<ident>;
        	var cnt = ln.Count;
        	if (cnt == 1)
				CurrentSemanticValue.stn = new method_name(null, ln[cnt-1], ValueStack[ValueStack.Depth-1].id, null, CurrentLocationSpan);
			else 	
				CurrentSemanticValue.stn = new method_name(ln, ln[cnt-1], ValueStack[ValueStack.Depth-1].id, null, CurrentLocationSpan);
		}
        break;
      case 429: // func_class_name_ident -> func_name_with_template_args
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 430: // func_class_name_ident_list -> func_class_name_ident
{ 
			CurrentSemanticValue.ob = new List<ident>(); 
			(CurrentSemanticValue.ob as List<ident>).Add(ValueStack[ValueStack.Depth-1].id);
		}
        break;
      case 431: // func_class_name_ident_list -> func_class_name_ident_list, tkPoint, 
                //                               func_class_name_ident
{ 
			(ValueStack[ValueStack.Depth-3].ob as List<ident>).Add(ValueStack[ValueStack.Depth-1].id);
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-3].ob; 
		}
        break;
      case 432: // func_meth_name_ident -> func_name_with_template_args
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 433: // func_meth_name_ident -> operator_name_ident
{ CurrentSemanticValue.id = (ident)ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 434: // func_meth_name_ident -> operator_name_ident, template_arguments
{ CurrentSemanticValue.id = new template_operator_name(null, ValueStack[ValueStack.Depth-1].stn as ident_list, ValueStack[ValueStack.Depth-2].ex as operator_name_ident, CurrentLocationSpan); }
        break;
      case 435: // func_name_with_template_args -> func_name_ident
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 436: // func_name_with_template_args -> func_name_ident, template_arguments
{ 
			CurrentSemanticValue.id = new template_type_name(ValueStack[ValueStack.Depth-2].id.name, ValueStack[ValueStack.Depth-1].stn as ident_list, CurrentLocationSpan); 
        }
        break;
      case 437: // func_name_ident -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 438: // proc_header -> tkProcedure, proc_name, fp_list, optional_method_modificators, 
                //                optional_where_section
{ 
        	CurrentSemanticValue.td = new procedure_header(ValueStack[ValueStack.Depth-3].stn as formal_parameters, ValueStack[ValueStack.Depth-2].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-4].stn as method_name, ValueStack[ValueStack.Depth-1].stn as where_definition_list, CurrentLocationSpan); 
        }
        break;
      case 439: // func_header -> tkFunction, func_name, fp_list, optional_method_modificators, 
                //                optional_where_section
{
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-3].stn as formal_parameters, ValueStack[ValueStack.Depth-2].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-4].stn as method_name, ValueStack[ValueStack.Depth-1].stn as where_definition_list, null, CurrentLocationSpan); 
		}
        break;
      case 440: // func_header -> tkFunction, func_name, fp_list, tkColon, fptype, 
                //                optional_method_modificators, optional_where_section
{ 
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-2].stn as procedure_attributes_list, ValueStack[ValueStack.Depth-6].stn as method_name, ValueStack[ValueStack.Depth-1].stn as where_definition_list, ValueStack[ValueStack.Depth-3].td as type_definition, CurrentLocationSpan); 
        }
        break;
      case 441: // external_block -> tkExternal, external_directive_ident, tkName, 
                //                   external_directive_ident, tkSemiColon
{ 
			CurrentSemanticValue.stn = new external_directive(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan); 
		}
        break;
      case 442: // external_block -> tkExternal, external_directive_ident, tkSemiColon
{ 
			CurrentSemanticValue.stn = new external_directive(ValueStack[ValueStack.Depth-2].ex, null, CurrentLocationSpan); 
		}
        break;
      case 443: // external_block -> tkExternal, tkSemiColon
{ 
			CurrentSemanticValue.stn = new external_directive(null, null, CurrentLocationSpan); 
		}
        break;
      case 444: // external_directive_ident -> identifier
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 445: // external_directive_ident -> literal
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 446: // block -> decl_sect_list, compound_stmt, tkSemiColon
{ 
			CurrentSemanticValue.stn = new block(ValueStack[ValueStack.Depth-3].stn as declarations, ValueStack[ValueStack.Depth-2].stn as statement_list, CurrentLocationSpan); 
		}
        break;
      case 447: // inclass_block -> inclass_decl_sect_list, compound_stmt, tkSemiColon
{ 
			CurrentSemanticValue.stn = new block(ValueStack[ValueStack.Depth-3].stn as declarations, ValueStack[ValueStack.Depth-2].stn as statement_list, CurrentLocationSpan); 
		}
        break;
      case 448: // inclass_block -> external_block
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 449: // fp_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 450: // fp_list -> tkRoundOpen, tkRoundClose
{ 
			CurrentSemanticValue.stn = null;
		}
        break;
      case 451: // fp_list -> tkRoundOpen, fp_sect_list, tkRoundClose
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			if (CurrentSemanticValue.stn != null)
				CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 452: // fp_sect_list -> fp_sect
{ 
			CurrentSemanticValue.stn = new formal_parameters(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
        }
        break;
      case 453: // fp_sect_list -> fp_sect_list, tkSemiColon, fp_sect
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as formal_parameters).Add(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);   
        }
        break;
      case 454: // fp_sect -> attribute_declarations, simple_fp_sect
{  
			(ValueStack[ValueStack.Depth-1].stn as declaration).attributes = ValueStack[ValueStack.Depth-2].stn as  attribute_list;
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
        }
        break;
      case 455: // simple_fp_sect -> param_name_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.none, null, CurrentLocationSpan); 
		}
        break;
      case 456: // simple_fp_sect -> tkVar, param_name_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.var_parametr, null, CurrentLocationSpan);  
		}
        break;
      case 457: // simple_fp_sect -> tkConst, param_name_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.const_parametr, null, CurrentLocationSpan);  
		}
        break;
      case 458: // simple_fp_sect -> tkParams, param_name_list, tkColon, fptype
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td,parametr_kind.params_parametr,null, CurrentLocationSpan);  
		}
        break;
      case 459: // simple_fp_sect -> param_name_list, tkColon, fptype, tkAssign, expr
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-5].stn as ident_list, ValueStack[ValueStack.Depth-3].td, parametr_kind.none, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 460: // simple_fp_sect -> tkVar, param_name_list, tkColon, fptype, tkAssign, expr
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-5].stn as ident_list, ValueStack[ValueStack.Depth-3].td, parametr_kind.var_parametr, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);  
		}
        break;
      case 461: // simple_fp_sect -> tkConst, param_name_list, tkColon, fptype, tkAssign, expr
{ 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-5].stn as ident_list, ValueStack[ValueStack.Depth-3].td, parametr_kind.const_parametr, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);  
		}
        break;
      case 462: // param_name_list -> param_name
{ 
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 463: // param_name_list -> param_name_list, tkComma, param_name
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);  
		}
        break;
      case 464: // param_name -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 465: // fptype -> type_ref
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 466: // fptype_noproctype -> simple_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 467: // fptype_noproctype -> string_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 468: // fptype_noproctype -> pointer_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 469: // fptype_noproctype -> structured_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 470: // fptype_noproctype -> template_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 471: // stmt -> unlabelled_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 472: // stmt -> label_name, tkColon, stmt
{ 
			CurrentSemanticValue.stn = new labeled_statement(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);  
		}
        break;
      case 473: // unlabelled_stmt -> /* empty */
{ 
			CurrentSemanticValue.stn = new empty_statement(); 
			CurrentSemanticValue.stn.source_context = null;
		}
        break;
      case 474: // unlabelled_stmt -> assignment
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 475: // unlabelled_stmt -> proc_call
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 476: // unlabelled_stmt -> goto_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 477: // unlabelled_stmt -> compound_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 478: // unlabelled_stmt -> if_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 479: // unlabelled_stmt -> case_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 480: // unlabelled_stmt -> repeat_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 481: // unlabelled_stmt -> while_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 482: // unlabelled_stmt -> for_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 483: // unlabelled_stmt -> with_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 484: // unlabelled_stmt -> inherited_message
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 485: // unlabelled_stmt -> try_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 486: // unlabelled_stmt -> raise_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 487: // unlabelled_stmt -> foreach_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 488: // unlabelled_stmt -> var_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 489: // unlabelled_stmt -> expr_as_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 490: // unlabelled_stmt -> lock_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 491: // unlabelled_stmt -> yield_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 492: // unlabelled_stmt -> yield_sequence_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 493: // unlabelled_stmt -> loop_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 494: // unlabelled_stmt -> match_with
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 495: // loop_stmt -> tkLoop, expr_l1, tkDo, unlabelled_stmt
{
			CurrentSemanticValue.stn = new loop_stmt(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].stn as statement,CurrentLocationSpan);
		}
        break;
      case 496: // yield_stmt -> tkYield, expr_l1
{
			CurrentSemanticValue.stn = new yield_node(ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);
		}
        break;
      case 497: // yield_sequence_stmt -> tkYield, tkSequence, expr_l1
{
			CurrentSemanticValue.stn = new yield_sequence_node(ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);
		}
        break;
      case 498: // var_stmt -> tkVar, var_decl_part
{ 
			CurrentSemanticValue.stn = new var_statement(ValueStack[ValueStack.Depth-1].stn as var_def_statement, CurrentLocationSpan);
		}
        break;
      case 499: // var_stmt -> tkRoundOpen, tkVar, identifier, tkComma, var_ident_list, 
                //             tkRoundClose, tkAssign, expr
{
			(ValueStack[ValueStack.Depth-4].ob as ident_list).Insert(0,ValueStack[ValueStack.Depth-6].id);
			(ValueStack[ValueStack.Depth-4].ob as syntax_tree_node).source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-8],LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5],LocationStack[LocationStack.Depth-4],LocationStack[LocationStack.Depth-3]);
			CurrentSemanticValue.stn = new assign_var_tuple(ValueStack[ValueStack.Depth-4].ob as ident_list, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 500: // var_stmt -> tkVar, tkRoundOpen, identifier, tkComma, ident_list, tkRoundClose, 
                //             tkAssign, expr
{
			(ValueStack[ValueStack.Depth-4].stn as ident_list).Insert(0,ValueStack[ValueStack.Depth-6].id);
			ValueStack[ValueStack.Depth-4].stn.source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-8],LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5],LocationStack[LocationStack.Depth-4],LocationStack[LocationStack.Depth-3]);
			CurrentSemanticValue.stn = new assign_var_tuple(ValueStack[ValueStack.Depth-4].stn as ident_list, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
	    }
        break;
      case 501: // assignment -> var_reference, assign_operator, expr_with_func_decl_lambda
{      
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
        }
        break;
      case 502: // assignment -> tkRoundOpen, variable, tkComma, variable_list, tkRoundClose, 
                //               assign_operator, expr
{
			if (ValueStack[ValueStack.Depth-2].op.type != Operators.Assignment)
			    parsertools.AddErrorFromResource("ONLY_BASE_ASSIGNMENT_FOR_TUPLE",LocationStack[LocationStack.Depth-2]);
			(ValueStack[ValueStack.Depth-4].ob as addressed_value_list).Insert(0,ValueStack[ValueStack.Depth-6].ex as addressed_value);
			(ValueStack[ValueStack.Depth-4].ob as syntax_tree_node).source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5],LocationStack[LocationStack.Depth-4],LocationStack[LocationStack.Depth-3]);
			CurrentSemanticValue.stn = new assign_tuple(ValueStack[ValueStack.Depth-4].ob as addressed_value_list, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 503: // variable_list -> variable
{
		CurrentSemanticValue.ob = new addressed_value_list(ValueStack[ValueStack.Depth-1].ex as addressed_value,LocationStack[LocationStack.Depth-1]);
	}
        break;
      case 504: // variable_list -> variable_list, tkComma, variable
{
		(ValueStack[ValueStack.Depth-3].ob as addressed_value_list).Add(ValueStack[ValueStack.Depth-1].ex as addressed_value);
		(ValueStack[ValueStack.Depth-3].ob as syntax_tree_node).source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-3],LocationStack[LocationStack.Depth-2],LocationStack[LocationStack.Depth-1]);
		CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-3].ob;
	}
        break;
      case 505: // var_ident_list -> tkVar, identifier
{
		CurrentSemanticValue.ob = new ident_list(ValueStack[ValueStack.Depth-1].id,CurrentLocationSpan);
	}
        break;
      case 506: // var_ident_list -> var_ident_list, tkComma, tkVar, identifier
{
		(ValueStack[ValueStack.Depth-4].ob as ident_list).Add(ValueStack[ValueStack.Depth-1].id);
		(ValueStack[ValueStack.Depth-4].ob as ident_list).source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-4],LocationStack[LocationStack.Depth-3],LocationStack[LocationStack.Depth-2],LocationStack[LocationStack.Depth-1]);
		CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-4].ob;
	}
        break;
      case 507: // proc_call -> var_reference
{ 
			CurrentSemanticValue.stn = new procedure_call(ValueStack[ValueStack.Depth-1].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex is ident, CurrentLocationSpan); 
		}
        break;
      case 508: // goto_stmt -> tkGoto, label_name
{ 
			CurrentSemanticValue.stn = new goto_statement(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 509: // compound_stmt -> tkBegin, stmt_list, tkEnd
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			(CurrentSemanticValue.stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-3].ti;
			(CurrentSemanticValue.stn as statement_list).right_logical_bracket = ValueStack[ValueStack.Depth-1].ti;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
        }
        break;
      case 510: // stmt_list -> stmt
{ 
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, LocationStack[LocationStack.Depth-1]);
        }
        break;
      case 511: // stmt_list -> stmt_list, tkSemiColon, stmt
{  
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as statement_list).Add(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
        }
        break;
      case 512: // if_stmt -> tkIf, expr_l1, tkThen, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, null, CurrentLocationSpan); 
        }
        break;
      case 513: // if_stmt -> tkIf, expr_l1, tkThen, unlabelled_stmt, tkElse, unlabelled_stmt
{
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); 
        }
        break;
      case 514: // match_with -> tkMatch, expr_l1, tkWith, pattern_cases, else_case, tkEnd
{ 
            CurrentSemanticValue.stn = new match_with(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].stn as pattern_cases, ValueStack[ValueStack.Depth-2].stn as statement, CurrentLocationSpan);
        }
        break;
      case 515: // match_with -> tkMatch, expr_l1, tkWith, pattern_cases, tkSemiColon, else_case, 
                //               tkEnd
{ 
            CurrentSemanticValue.stn = new match_with(ValueStack[ValueStack.Depth-6].ex, ValueStack[ValueStack.Depth-4].stn as pattern_cases, ValueStack[ValueStack.Depth-2].stn as statement, CurrentLocationSpan);
        }
        break;
      case 516: // pattern_cases -> pattern_case
{
            CurrentSemanticValue.stn = new pattern_cases(ValueStack[ValueStack.Depth-1].stn as pattern_case);
        }
        break;
      case 517: // pattern_cases -> pattern_cases, tkSemiColon, pattern_case
{
            CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as pattern_cases).Add(ValueStack[ValueStack.Depth-1].stn as pattern_case);
        }
        break;
      case 518: // pattern_case -> pattern_optional_var, tkWhen, expr_l1, tkColon, unlabelled_stmt
{
            CurrentSemanticValue.stn = new pattern_case(ValueStack[ValueStack.Depth-5].stn as pattern_node, ValueStack[ValueStack.Depth-1].stn as statement, ValueStack[ValueStack.Depth-3].ex, CurrentLocationSpan);
        }
        break;
      case 519: // pattern_case -> pattern_optional_var, tkColon, unlabelled_stmt
{
            CurrentSemanticValue.stn = new pattern_case(ValueStack[ValueStack.Depth-3].stn as pattern_node, ValueStack[ValueStack.Depth-1].stn as statement, null, CurrentLocationSpan);
        }
        break;
      case 520: // case_stmt -> tkCase, expr_l1, tkOf, case_list, else_case, tkEnd
{ 
			CurrentSemanticValue.stn = new case_node(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].stn as case_variants, ValueStack[ValueStack.Depth-2].stn as statement, CurrentLocationSpan); 
		}
        break;
      case 521: // case_stmt -> tkCase, expr_l1, tkOf, case_list, tkSemiColon, else_case, tkEnd
{ 
			CurrentSemanticValue.stn = new case_node(ValueStack[ValueStack.Depth-6].ex, ValueStack[ValueStack.Depth-4].stn as case_variants, ValueStack[ValueStack.Depth-2].stn as statement, CurrentLocationSpan); 
		}
        break;
      case 522: // case_stmt -> tkCase, expr_l1, tkOf, else_case, tkEnd
{ 
			CurrentSemanticValue.stn = new case_node(ValueStack[ValueStack.Depth-4].ex, NewCaseItem(new empty_statement(), null), ValueStack[ValueStack.Depth-2].stn as statement, CurrentLocationSpan); 
		}
        break;
      case 523: // case_list -> case_item
{
			if (ValueStack[ValueStack.Depth-1].stn is empty_statement) 
				CurrentSemanticValue.stn = NewCaseItem(ValueStack[ValueStack.Depth-1].stn, null);
			else CurrentSemanticValue.stn = NewCaseItem(ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan);
		}
        break;
      case 524: // case_list -> case_list, tkSemiColon, case_item
{ 
			CurrentSemanticValue.stn = AddCaseItem(ValueStack[ValueStack.Depth-3].stn as case_variants, ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan);
		}
        break;
      case 525: // case_item -> case_label_list, tkColon, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new case_variant(ValueStack[ValueStack.Depth-3].stn as expression_list, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); 
		}
        break;
      case 526: // case_label_list -> case_label
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 527: // case_label_list -> case_label_list, tkComma, case_label
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 528: // case_label -> const_elem
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 529: // else_case -> /* empty */
{ CurrentSemanticValue.stn = null;}
        break;
      case 530: // else_case -> tkElse, stmt_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 531: // repeat_stmt -> tkRepeat, stmt_list, tkUntil, expr
{ 
		    CurrentSemanticValue.stn = new repeat_node(ValueStack[ValueStack.Depth-3].stn as statement_list, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
			(ValueStack[ValueStack.Depth-3].stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-4].ti;
			(ValueStack[ValueStack.Depth-3].stn as statement_list).right_logical_bracket = ValueStack[ValueStack.Depth-2].ti;
			ValueStack[ValueStack.Depth-3].stn.source_context = LocationStack[LocationStack.Depth-4].Merge(LocationStack[LocationStack.Depth-2]);
        }
        break;
      case 532: // while_stmt -> tkWhile, expr_l1, optional_tk_do, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = NewWhileStmt(ValueStack[ValueStack.Depth-4].ti, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-2].ti, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);    
        }
        break;
      case 533: // optional_tk_do -> tkDo
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 534: // optional_tk_do -> /* empty */
{ CurrentSemanticValue.ti = null; }
        break;
      case 535: // lock_stmt -> tkLock, expr_l1, tkDo, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new lock_stmt(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); 
        }
        break;
      case 536: // foreach_stmt -> tkForeach, identifier, foreach_stmt_ident_dype_opt, tkIn, 
                //                 expr_l1, tkDo, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new foreach_stmt(ValueStack[ValueStack.Depth-6].id, ValueStack[ValueStack.Depth-5].td, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
            if (ValueStack[ValueStack.Depth-5].td == null)
                parsertools.AddWarningFromResource("USING_UNLOCAL_FOREACH_VARIABLE", ValueStack[ValueStack.Depth-6].id.source_context);
        }
        break;
      case 537: // foreach_stmt -> tkForeach, tkVar, identifier, tkColon, type_ref, tkIn, expr_l1, 
                //                 tkDo, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new foreach_stmt(ValueStack[ValueStack.Depth-7].id, ValueStack[ValueStack.Depth-5].td, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); 
        }
        break;
      case 538: // foreach_stmt -> tkForeach, tkVar, identifier, tkIn, expr_l1, tkDo, 
                //                 unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new foreach_stmt(ValueStack[ValueStack.Depth-5].id, new no_type_foreach(), ValueStack[ValueStack.Depth-3].ex, (statement)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
        }
        break;
      case 539: // foreach_stmt_ident_dype_opt -> tkColon, type_ref
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 541: // for_stmt -> tkFor, optional_var, identifier, for_stmt_decl_or_assign, expr_l1, 
                //             for_cycle_type, expr_l1, optional_tk_do, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = NewForStmt((bool)ValueStack[ValueStack.Depth-8].ob, ValueStack[ValueStack.Depth-7].id, ValueStack[ValueStack.Depth-6].td, ValueStack[ValueStack.Depth-5].ex, (for_cycle_type)ValueStack[ValueStack.Depth-4].ob, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-2].ti, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
        }
        break;
      case 542: // optional_var -> tkVar
{ CurrentSemanticValue.ob = true; }
        break;
      case 543: // optional_var -> /* empty */
{ CurrentSemanticValue.ob = false; }
        break;
      case 545: // for_stmt_decl_or_assign -> tkColon, simple_type_identifier, tkAssign
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-2].td; }
        break;
      case 546: // for_cycle_type -> tkTo
{ CurrentSemanticValue.ob = for_cycle_type.to; }
        break;
      case 547: // for_cycle_type -> tkDownto
{ CurrentSemanticValue.ob = for_cycle_type.downto; }
        break;
      case 548: // with_stmt -> tkWith, expr_list, tkDo, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new with_statement(ValueStack[ValueStack.Depth-1].stn as statement, ValueStack[ValueStack.Depth-3].stn as expression_list, CurrentLocationSpan); 
		}
        break;
      case 549: // inherited_message -> tkInherited
{ 
			CurrentSemanticValue.stn = new inherited_message();  
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 550: // try_stmt -> tkTry, stmt_list, try_handler
{ 
			CurrentSemanticValue.stn = new try_stmt(ValueStack[ValueStack.Depth-2].stn as statement_list, ValueStack[ValueStack.Depth-1].stn as try_handler, CurrentLocationSpan); 
			(ValueStack[ValueStack.Depth-2].stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-3].ti;
			ValueStack[ValueStack.Depth-2].stn.source_context = LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-2]);
        }
        break;
      case 551: // try_handler -> tkFinally, stmt_list, tkEnd
{ 
			CurrentSemanticValue.stn = new try_handler_finally(ValueStack[ValueStack.Depth-2].stn as statement_list, CurrentLocationSpan);
			(ValueStack[ValueStack.Depth-2].stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-3].ti;
			(ValueStack[ValueStack.Depth-2].stn as statement_list).right_logical_bracket = ValueStack[ValueStack.Depth-1].ti;
		}
        break;
      case 552: // try_handler -> tkExcept, exception_block, tkEnd
{ 
			CurrentSemanticValue.stn = new try_handler_except((exception_block)ValueStack[ValueStack.Depth-2].stn, CurrentLocationSpan);  
			if ((ValueStack[ValueStack.Depth-2].stn as exception_block).stmt_list != null)
			{
				(ValueStack[ValueStack.Depth-2].stn as exception_block).stmt_list.source_context = CurrentLocationSpan;
				(ValueStack[ValueStack.Depth-2].stn as exception_block).source_context = CurrentLocationSpan;
			}
		}
        break;
      case 553: // exception_block -> exception_handler_list, exception_block_else_branch
{ 
			CurrentSemanticValue.stn = new exception_block(null, (exception_handler_list)ValueStack[ValueStack.Depth-2].stn, (statement_list)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
		}
        break;
      case 554: // exception_block -> exception_handler_list, tkSemiColon, 
                //                    exception_block_else_branch
{ 
			CurrentSemanticValue.stn = new exception_block(null, (exception_handler_list)ValueStack[ValueStack.Depth-3].stn, (statement_list)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
		}
        break;
      case 555: // exception_block -> stmt_list
{ 
			CurrentSemanticValue.stn = new exception_block(ValueStack[ValueStack.Depth-1].stn as statement_list, null, null, LocationStack[LocationStack.Depth-1]);
		}
        break;
      case 556: // exception_handler_list -> exception_handler
{ 
			CurrentSemanticValue.stn = new exception_handler_list(ValueStack[ValueStack.Depth-1].stn as exception_handler, CurrentLocationSpan); 
		}
        break;
      case 557: // exception_handler_list -> exception_handler_list, tkSemiColon, 
                //                           exception_handler
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as exception_handler_list).Add(ValueStack[ValueStack.Depth-1].stn as exception_handler, CurrentLocationSpan); 
		}
        break;
      case 558: // exception_block_else_branch -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 559: // exception_block_else_branch -> tkElse, stmt_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 560: // exception_handler -> tkOn, exception_identifier, tkDo, unlabelled_stmt
{ 
			CurrentSemanticValue.stn = new exception_handler((ValueStack[ValueStack.Depth-3].stn as exception_ident).variable, (ValueStack[ValueStack.Depth-3].stn as exception_ident).type_name, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 561: // exception_identifier -> exception_class_type_identifier
{ 
			CurrentSemanticValue.stn = new exception_ident(null, (named_type_reference)ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
		}
        break;
      case 562: // exception_identifier -> exception_variable, tkColon, 
                //                         exception_class_type_identifier
{ 
			CurrentSemanticValue.stn = new exception_ident(ValueStack[ValueStack.Depth-3].id, (named_type_reference)ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
		}
        break;
      case 563: // exception_class_type_identifier -> simple_type_identifier
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 564: // exception_variable -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 565: // raise_stmt -> tkRaise
{ 
			CurrentSemanticValue.stn = new raise_stmt(); 
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 566: // raise_stmt -> tkRaise, expr
{ 
			CurrentSemanticValue.stn = new raise_stmt(ValueStack[ValueStack.Depth-1].ex, null, CurrentLocationSpan);  
		}
        break;
      case 567: // expr_list -> expr_with_func_decl_lambda
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 568: // expr_list -> expr_list, tkComma, expr_with_func_decl_lambda
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 569: // expr_as_stmt -> allowable_expr_as_stmt
{ 
			CurrentSemanticValue.stn = new expression_as_statement(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);  
		}
        break;
      case 570: // allowable_expr_as_stmt -> new_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 571: // expr_with_func_decl_lambda -> expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 572: // expr_with_func_decl_lambda -> func_decl_lambda
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 573: // expr -> expr_l1
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 574: // expr -> format_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 575: // expr_l1 -> expr_dq
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 576: // expr_l1 -> question_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 577: // expr_l1_func_decl_lambda -> expr_l1
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 578: // expr_l1_func_decl_lambda -> func_decl_lambda
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 579: // expr_dq -> relop_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 580: // expr_dq -> expr_dq, tkDoubleQuestion, relop_expr
{ CurrentSemanticValue.ex = new double_question_node(ValueStack[ValueStack.Depth-3].ex as expression, ValueStack[ValueStack.Depth-1].ex as expression, CurrentLocationSpan);}
        break;
      case 581: // sizeof_expr -> tkSizeOf, tkRoundOpen, simple_or_template_type_reference, 
                //                tkRoundClose
{ 
			CurrentSemanticValue.ex = new sizeof_operator((named_type_reference)ValueStack[ValueStack.Depth-2].td, null, CurrentLocationSpan);  
		}
        break;
      case 582: // typeof_expr -> tkTypeOf, tkRoundOpen, simple_or_template_type_reference, 
                //                tkRoundClose
{ 
			CurrentSemanticValue.ex = new typeof_operator((named_type_reference)ValueStack[ValueStack.Depth-2].td, CurrentLocationSpan);  
		}
        break;
      case 583: // typeof_expr -> tkTypeOf, tkRoundOpen, empty_template_type_reference, 
                //                tkRoundClose
{ 
			CurrentSemanticValue.ex = new typeof_operator((named_type_reference)ValueStack[ValueStack.Depth-2].td, CurrentLocationSpan);  
		}
        break;
      case 584: // question_expr -> expr_l1, tkQuestion, expr_l1, tkColon, expr_l1
{ 
            if (ValueStack[ValueStack.Depth-3].ex is nil_const && ValueStack[ValueStack.Depth-1].ex is nil_const)
            	parsertools.AddErrorFromResource("TWO_NILS_IN_QUESTION_EXPR",LocationStack[LocationStack.Depth-3]);
			CurrentSemanticValue.ex = new question_colon_expression(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);  
		}
        break;
      case 585: // empty_template_type_reference -> simple_type_identifier, 
                //                                  template_type_empty_params
{
            CurrentSemanticValue.td = new template_type_reference((named_type_reference)ValueStack[ValueStack.Depth-2].td, (template_param_list)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
        }
        break;
      case 586: // empty_template_type_reference -> simple_type_identifier, tkAmpersend, 
                //                                  template_type_empty_params
{
            CurrentSemanticValue.td = new template_type_reference((named_type_reference)ValueStack[ValueStack.Depth-3].td, (template_param_list)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan);
        }
        break;
      case 587: // simple_or_template_type_reference -> simple_type_identifier
{ 
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
		}
        break;
      case 588: // simple_or_template_type_reference -> simple_type_identifier, 
                //                                      template_type_params
{ 
			CurrentSemanticValue.td = new template_type_reference((named_type_reference)ValueStack[ValueStack.Depth-2].td, (template_param_list)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
        }
        break;
      case 589: // simple_or_template_type_reference -> simple_type_identifier, tkAmpersend, 
                //                                      template_type_params
{ 
			CurrentSemanticValue.td = new template_type_reference((named_type_reference)ValueStack[ValueStack.Depth-3].td, (template_param_list)ValueStack[ValueStack.Depth-1].stn, CurrentLocationSpan); 
        }
        break;
      case 590: // optional_array_initializer -> tkRoundOpen, typed_const_list, tkRoundClose
{ 
			CurrentSemanticValue.stn = new array_const((expression_list)ValueStack[ValueStack.Depth-2].stn, CurrentLocationSpan); 
		}
        break;
      case 592: // new_expr -> tkNew, simple_or_template_type_reference, 
                //             optional_expr_list_with_bracket
{
			CurrentSemanticValue.ex = new new_expr(ValueStack[ValueStack.Depth-2].td, ValueStack[ValueStack.Depth-1].stn as expression_list, false, null, CurrentLocationSpan);
        }
        break;
      case 593: // new_expr -> tkNew, simple_or_template_type_reference, tkSquareOpen, 
                //             optional_expr_list, tkSquareClose, optional_array_initializer
{
        	var el = ValueStack[ValueStack.Depth-3].stn as expression_list;
        	if (el == null)
        	{
        		var cnt = 0;
        		var ac = ValueStack[ValueStack.Depth-1].stn as array_const;
        		if (ac != null && ac.elements != null)
	        	    cnt = ac.elements.Count;
	        	else parsertools.AddErrorFromResource("WITHOUT_INIT_AND_SIZE",LocationStack[LocationStack.Depth-2]);
        		el = new expression_list(new int32_const(cnt),LocationStack[LocationStack.Depth-6]);
        	}	
			CurrentSemanticValue.ex = new new_expr(ValueStack[ValueStack.Depth-5].td, el, true, ValueStack[ValueStack.Depth-1].stn as array_const, CurrentLocationSpan);
        }
        break;
      case 594: // new_expr -> tkNew, tkClass, tkRoundOpen, list_fields_in_unnamed_object, 
                //             tkRoundClose
{
        // sugared node	
        	var l = ValueStack[ValueStack.Depth-2].ob as name_assign_expr_list;
        	var exprs = l.name_expr.Select(x=>x.expr).ToList();
        	var typename = "AnonymousType#"+Guid();
        	var type = new named_type_reference(typename,LocationStack[LocationStack.Depth-5]);
        	
			// node new_expr - for code generation of new node
			var ne = new new_expr(type, new expression_list(exprs), CurrentLocationSpan);
			// node unnamed_type_object - for formatting and code generation (new node and Anonymous class)
			CurrentSemanticValue.ex = new unnamed_type_object(l, true, ne, CurrentLocationSpan);
        }
        break;
      case 595: // field_in_unnamed_object -> identifier, tkAssign, relop_expr
{
			CurrentSemanticValue.ob = new name_assign_expr(ValueStack[ValueStack.Depth-3].id,ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);
		}
        break;
      case 596: // field_in_unnamed_object -> relop_expr
{
			ident name = null;
			var id = ValueStack[ValueStack.Depth-1].ex as ident;
			dot_node dot;
			if (id != null)
				name = id;
			else 
            {
            	dot = ValueStack[ValueStack.Depth-1].ex as dot_node;
            	if (dot != null)
            	{
            		name = dot.right as ident;
            	}            	
            } 
			if (name == null)
				parsertools.errors.Add(new bad_anon_type(parsertools.CurrentFileName, LocationStack[LocationStack.Depth-1], null));	
			CurrentSemanticValue.ob = new name_assign_expr(name,ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);
		}
        break;
      case 597: // list_fields_in_unnamed_object -> field_in_unnamed_object
{
			var l = new name_assign_expr_list();
			CurrentSemanticValue.ob = l.Add(ValueStack[ValueStack.Depth-1].ob as name_assign_expr);
		}
        break;
      case 598: // list_fields_in_unnamed_object -> list_fields_in_unnamed_object, tkComma, 
                //                                  field_in_unnamed_object
{
			var nel = ValueStack[ValueStack.Depth-3].ob as name_assign_expr_list;
			var ss = nel.name_expr.Select(ne=>ne.name.name).FirstOrDefault(x=>string.Compare(x,(ValueStack[ValueStack.Depth-1].ob as name_assign_expr).name.name,true)==0);
            if (ss != null)
            	parsertools.errors.Add(new anon_type_duplicate_name(parsertools.CurrentFileName, LocationStack[LocationStack.Depth-1], null));
			nel.Add(ValueStack[ValueStack.Depth-1].ob as name_assign_expr);
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-3].ob;
		}
        break;
      case 599: // optional_expr_list_with_bracket -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 600: // optional_expr_list_with_bracket -> tkRoundOpen, optional_expr_list, 
                //                                    tkRoundClose
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
      case 601: // relop_expr -> simple_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 602: // relop_expr -> relop_expr, relop, simple_expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 603: // relop_expr -> is_expr, tkRoundOpen, pattern_out_param_list, tkRoundClose
{
            var isTypeCheck = ValueStack[ValueStack.Depth-4].ex as typecast_node;
            var deconstructorPattern = new deconstructor_pattern(ValueStack[ValueStack.Depth-2].ob as List<pattern_deconstructor_parameter>, isTypeCheck.type_def, CurrentLocationSpan); 
            CurrentSemanticValue.ex = new is_pattern_expr(isTypeCheck.expr, deconstructorPattern, CurrentLocationSpan);
        }
        break;
      case 604: // pattern -> simple_or_template_type_reference, tkRoundOpen, 
                //            pattern_out_param_list, tkRoundClose
{ 
            CurrentSemanticValue.stn = new deconstructor_pattern(ValueStack[ValueStack.Depth-2].ob as List<pattern_deconstructor_parameter>, ValueStack[ValueStack.Depth-4].td, CurrentLocationSpan); 
        }
        break;
      case 605: // pattern_optional_var -> simple_or_template_type_reference, tkRoundOpen, 
                //                         pattern_out_param_list_optional_var, tkRoundClose
{ 
            CurrentSemanticValue.stn = new deconstructor_pattern(ValueStack[ValueStack.Depth-2].ob as List<pattern_deconstructor_parameter>, ValueStack[ValueStack.Depth-4].td, CurrentLocationSpan); 
        }
        break;
      case 606: // pattern_out_param_list_optional_var -> pattern_out_param_optional_var
{
            CurrentSemanticValue.ob = new List<pattern_deconstructor_parameter>();
            (CurrentSemanticValue.ob as List<pattern_deconstructor_parameter>).Add(ValueStack[ValueStack.Depth-1].stn as pattern_deconstructor_parameter);
        }
        break;
      case 607: // pattern_out_param_list_optional_var -> pattern_out_param_list_optional_var, 
                //                                        tkSemiColon, 
                //                                        pattern_out_param_optional_var
{
            var list = ValueStack[ValueStack.Depth-3].ob as List<pattern_deconstructor_parameter>;
            list.Add(ValueStack[ValueStack.Depth-1].stn as pattern_deconstructor_parameter);
            CurrentSemanticValue.ob = list;
        }
        break;
      case 608: // pattern_out_param_list_optional_var -> pattern_out_param_list_optional_var, 
                //                                        tkComma, 
                //                                        pattern_out_param_optional_var
{
            var list = ValueStack[ValueStack.Depth-3].ob as List<pattern_deconstructor_parameter>;
            list.Add(ValueStack[ValueStack.Depth-1].stn as pattern_deconstructor_parameter);
            CurrentSemanticValue.ob = list;
        }
        break;
      case 609: // pattern_out_param_list -> pattern_out_param
{
            CurrentSemanticValue.ob = new List<pattern_deconstructor_parameter>();
            (CurrentSemanticValue.ob as List<pattern_deconstructor_parameter>).Add(ValueStack[ValueStack.Depth-1].stn as pattern_deconstructor_parameter);
        }
        break;
      case 610: // pattern_out_param_list -> pattern_out_param_list, tkSemiColon, 
                //                           pattern_out_param
{
            var list = ValueStack[ValueStack.Depth-3].ob as List<pattern_deconstructor_parameter>;
            list.Add(ValueStack[ValueStack.Depth-1].stn as pattern_deconstructor_parameter);
            CurrentSemanticValue.ob = list;
        }
        break;
      case 611: // pattern_out_param_list -> pattern_out_param_list, tkComma, pattern_out_param
{
            var list = ValueStack[ValueStack.Depth-3].ob as List<pattern_deconstructor_parameter>;
            list.Add(ValueStack[ValueStack.Depth-1].stn as pattern_deconstructor_parameter);
            CurrentSemanticValue.ob = list;
        }
        break;
      case 612: // pattern_out_param -> tkVar, identifier, tkColon, type_ref
{
            CurrentSemanticValue.stn = new var_deconstructor_parameter(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
        }
        break;
      case 613: // pattern_out_param -> tkVar, identifier
{
            CurrentSemanticValue.stn = new var_deconstructor_parameter(ValueStack[ValueStack.Depth-1].id, null, CurrentLocationSpan);
        }
        break;
      case 614: // pattern_out_param -> pattern
{
            CurrentSemanticValue.stn = new recursive_deconstructor_parameter(ValueStack[ValueStack.Depth-1].stn as pattern_node, CurrentLocationSpan);
        }
        break;
      case 615: // pattern_out_param_optional_var -> identifier, tkColon, type_ref
{
            CurrentSemanticValue.stn = new var_deconstructor_parameter(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
        }
        break;
      case 616: // pattern_out_param_optional_var -> identifier
{
            CurrentSemanticValue.stn = new var_deconstructor_parameter(ValueStack[ValueStack.Depth-1].id, null, CurrentLocationSpan);
        }
        break;
      case 617: // pattern_out_param_optional_var -> tkVar, identifier, tkColon, type_ref
{
            CurrentSemanticValue.stn = new var_deconstructor_parameter(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
        }
        break;
      case 618: // pattern_out_param_optional_var -> tkVar, identifier
{
            CurrentSemanticValue.stn = new var_deconstructor_parameter(ValueStack[ValueStack.Depth-1].id, null, CurrentLocationSpan);
        }
        break;
      case 619: // pattern_out_param_optional_var -> pattern_optional_var
{
            CurrentSemanticValue.stn = new recursive_deconstructor_parameter(ValueStack[ValueStack.Depth-1].stn as pattern_node, CurrentLocationSpan);
        }
        break;
      case 620: // simple_expr_or_nothing -> simple_expr
{
		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
	}
        break;
      case 621: // simple_expr_or_nothing -> /* empty */
{
		CurrentSemanticValue.ex = null;
	}
        break;
      case 622: // const_expr_or_nothing -> const_expr
{
		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
	}
        break;
      case 623: // const_expr_or_nothing -> /* empty */
{
		CurrentSemanticValue.ex = null;
	}
        break;
      case 624: // format_expr -> simple_expr, tkColon, simple_expr_or_nothing
{ 
			CurrentSemanticValue.ex = new format_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, null, CurrentLocationSpan); 
		}
        break;
      case 625: // format_expr -> tkColon, simple_expr_or_nothing
{ 
			CurrentSemanticValue.ex = new format_expr(null, ValueStack[ValueStack.Depth-1].ex, null, CurrentLocationSpan); 
		}
        break;
      case 626: // format_expr -> simple_expr, tkColon, simple_expr_or_nothing, tkColon, 
                //                simple_expr
{ 
			CurrentSemanticValue.ex = new format_expr(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 627: // format_expr -> tkColon, simple_expr_or_nothing, tkColon, simple_expr
{ 
			CurrentSemanticValue.ex = new format_expr(null, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 628: // format_const_expr -> const_expr, tkColon, const_expr_or_nothing
{ 
			CurrentSemanticValue.ex = new format_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, null, CurrentLocationSpan); 
		}
        break;
      case 629: // format_const_expr -> tkColon, const_expr_or_nothing
{ 
			CurrentSemanticValue.ex = new format_expr(null, ValueStack[ValueStack.Depth-1].ex, null, CurrentLocationSpan); 
		}
        break;
      case 630: // format_const_expr -> const_expr, tkColon, const_expr_or_nothing, tkColon, 
                //                      const_expr
{ 
			CurrentSemanticValue.ex = new format_expr(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 631: // format_const_expr -> tkColon, const_expr_or_nothing, tkColon, const_expr
{ 
			CurrentSemanticValue.ex = new format_expr(null, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 632: // relop -> tkEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 633: // relop -> tkNotEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 634: // relop -> tkLower
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 635: // relop -> tkGreater
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 636: // relop -> tkLowerEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 637: // relop -> tkGreaterEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 638: // relop -> tkIn
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 639: // simple_expr -> term
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 640: // simple_expr -> simple_expr, addop, term
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 641: // addop -> tkPlus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 642: // addop -> tkMinus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 643: // addop -> tkOr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 644: // addop -> tkXor
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 645: // addop -> tkCSharpStyleOr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 646: // typecast_op -> tkAs
{ 
			CurrentSemanticValue.ob = op_typecast.as_op; 
		}
        break;
      case 647: // typecast_op -> tkIs
{ 
			CurrentSemanticValue.ob = op_typecast.is_op; 
		}
        break;
      case 648: // as_is_expr -> is_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 649: // as_is_expr -> as_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 650: // as_expr -> term, tkAs, simple_or_template_type_reference
{
            CurrentSemanticValue.ex = NewAsIsExpr(ValueStack[ValueStack.Depth-3].ex, op_typecast.as_op, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
        }
        break;
      case 651: // is_expr -> term, tkIs, simple_or_template_type_reference
{
            CurrentSemanticValue.ex = NewAsIsExpr(ValueStack[ValueStack.Depth-3].ex, op_typecast.is_op, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
        }
        break;
      case 652: // simple_term -> factor
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 653: // power_expr -> simple_term, tkStarStar, factor
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,(ValueStack[ValueStack.Depth-2].op).type, CurrentLocationSpan); }
        break;
      case 654: // term -> factor
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 655: // term -> new_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 656: // term -> power_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 657: // term -> term, mulop, factor
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,(ValueStack[ValueStack.Depth-2].op).type, CurrentLocationSpan); }
        break;
      case 658: // term -> term, mulop, power_expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,(ValueStack[ValueStack.Depth-2].op).type, CurrentLocationSpan); }
        break;
      case 659: // term -> as_is_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 660: // mulop -> tkStar
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 661: // mulop -> tkSlash
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 662: // mulop -> tkDiv
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 663: // mulop -> tkMod
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 664: // mulop -> tkShl
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 665: // mulop -> tkShr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 666: // mulop -> tkAnd
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 667: // default_expr -> tkDefault, tkRoundOpen, simple_or_template_type_reference, 
                //                 tkRoundClose
{ 
			CurrentSemanticValue.ex = new default_operator(ValueStack[ValueStack.Depth-2].td as named_type_reference, CurrentLocationSpan);  
		}
        break;
      case 668: // tuple -> tkRoundOpen, expr_l1, tkComma, expr_l1_list, lambda_type_ref, 
                //          optional_full_lambda_fp_list, tkRoundClose
{
			/*if ($5 != null) 
				parsertools.AddErrorFromResource("BAD_TUPLE",@5);
			if ($6 != null) 
				parsertools.AddErrorFromResource("BAD_TUPLE",@6);*/

			if ((ValueStack[ValueStack.Depth-4].stn as expression_list).Count>6) 
				parsertools.AddErrorFromResource("TUPLE_ELEMENTS_COUNT_MUST_BE_LESSEQUAL_7",CurrentLocationSpan);
            (ValueStack[ValueStack.Depth-4].stn as expression_list).Insert(0,ValueStack[ValueStack.Depth-6].ex);
			CurrentSemanticValue.ex = new tuple_node(ValueStack[ValueStack.Depth-4].stn as expression_list,CurrentLocationSpan);
		}
        break;
      case 669: // factor -> tkNil
{ 
			CurrentSemanticValue.ex = new nil_const();  
			CurrentSemanticValue.ex.source_context = CurrentLocationSpan;
		}
        break;
      case 670: // factor -> literal_or_number
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 671: // factor -> default_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 672: // factor -> tkSquareOpen, elem_list, tkSquareClose
{ 
			CurrentSemanticValue.ex = new pascal_set_constant(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);  
		}
        break;
      case 673: // factor -> tkNot, factor
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 674: // factor -> sign, factor
{
			if (ValueStack[ValueStack.Depth-2].op.type == Operators.Minus)
			{
			    var i64 = ValueStack[ValueStack.Depth-1].ex as int64_const;
				if (i64 != null && i64.val == (Int64)Int32.MaxValue + 1)
				{
					CurrentSemanticValue.ex = new int32_const(Int32.MinValue,CurrentLocationSpan);
					break;
				}
				var ui64 = ValueStack[ValueStack.Depth-1].ex as uint64_const;
				if (ui64 != null && ui64.val == (UInt64)Int64.MaxValue + 1)
				{
					CurrentSemanticValue.ex = new int64_const(Int64.MinValue,CurrentLocationSpan);
					break;
				}
				if (ui64 != null && ui64.val > (UInt64)Int64.MaxValue + 1)
				{
					parsertools.AddErrorFromResource("BAD_INT2",CurrentLocationSpan);
					break;
				}
			    // ����� ������� ���������� ��������� � �������������� �������
			}
		
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 675: // factor -> var_reference
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 676: // factor -> tuple
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 677: // literal_or_number -> literal
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 678: // literal_or_number -> unsigned_number
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 679: // var_question_point -> variable, tkQuestionPoint, variable
{
		CurrentSemanticValue.ex = new dot_question_node(ValueStack[ValueStack.Depth-3].ex as addressed_value,ValueStack[ValueStack.Depth-1].ex as addressed_value,CurrentLocationSpan);
	}
        break;
      case 680: // var_question_point -> variable, tkQuestionPoint, var_question_point
{
		CurrentSemanticValue.ex = new dot_question_node(ValueStack[ValueStack.Depth-3].ex as addressed_value,ValueStack[ValueStack.Depth-1].ex as addressed_value,CurrentLocationSpan);
	}
        break;
      case 681: // var_reference -> var_address, variable
{
			CurrentSemanticValue.ex = NewVarReference(ValueStack[ValueStack.Depth-2].stn as get_address, ValueStack[ValueStack.Depth-1].ex as addressed_value, CurrentLocationSpan);
		}
        break;
      case 682: // var_reference -> variable
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 683: // var_reference -> var_question_point
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 684: // var_address -> tkAddressOf
{ 
			CurrentSemanticValue.stn = NewVarAddress(CurrentLocationSpan);
		}
        break;
      case 685: // var_address -> var_address, tkAddressOf
{ 
			CurrentSemanticValue.stn = NewVarAddress(ValueStack[ValueStack.Depth-2].stn as get_address, CurrentLocationSpan);
		}
        break;
      case 686: // attribute_variable -> simple_type_identifier, optional_expr_list_with_bracket
{ 
			CurrentSemanticValue.stn = new attribute(null, ValueStack[ValueStack.Depth-2].td as named_type_reference, ValueStack[ValueStack.Depth-1].stn as expression_list, CurrentLocationSpan);
		}
        break;
      case 687: // attribute_variable -> template_type, optional_expr_list_with_bracket
{
            CurrentSemanticValue.stn = new attribute(null, ValueStack[ValueStack.Depth-2].td as named_type_reference, ValueStack[ValueStack.Depth-1].stn as expression_list, CurrentLocationSpan);
        }
        break;
      case 688: // dotted_identifier -> identifier
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 689: // dotted_identifier -> dotted_identifier, tkPoint, identifier_or_keyword
{
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan);
		}
        break;
      case 690: // variable_as_type -> dotted_identifier
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;}
        break;
      case 691: // variable_as_type -> dotted_identifier, template_type_params
{ CurrentSemanticValue.ex = new ident_with_templateparams(ValueStack[ValueStack.Depth-2].ex as addressed_value, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan);   }
        break;
      case 692: // variable_or_literal_or_number -> variable
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 693: // variable_or_literal_or_number -> literal_or_number
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 694: // variable -> identifier
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 695: // variable -> operator_name_ident
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 696: // variable -> tkInherited, identifier
{ 
			CurrentSemanticValue.ex = new inherited_ident(ValueStack[ValueStack.Depth-1].id.name, CurrentLocationSpan);
		}
        break;
      case 697: // variable -> tkRoundOpen, expr, tkRoundClose
{
		    if (!parsertools.build_tree_for_formatter) 
            {
                ValueStack[ValueStack.Depth-2].ex.source_context = CurrentLocationSpan;
                CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex;
            } 
			else CurrentSemanticValue.ex = new bracket_expr(ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan);
        }
        break;
      case 698: // variable -> sizeof_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 699: // variable -> typeof_expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 700: // variable -> literal_or_number, tkPoint, identifier_or_keyword
{ 
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 701: // variable -> variable_or_literal_or_number, tkSquareOpen, expr_list, 
                //             tkSquareClose
{
        	var el = ValueStack[ValueStack.Depth-2].stn as expression_list; // SSM 10/03/16
        	if (el.Count==1 && el.expressions[0] is format_expr) 
        	{
        		var fe = el.expressions[0] as format_expr;
                if (!parsertools.build_tree_for_formatter)
                {
                    if (fe.expr == null)
                        fe.expr = new int32_const(int.MaxValue,LocationStack[LocationStack.Depth-2]);
                    if (fe.format1 == null)
                        fe.format1 = new int32_const(int.MaxValue,LocationStack[LocationStack.Depth-2]);
                }
        		CurrentSemanticValue.ex = new slice_expr(ValueStack[ValueStack.Depth-4].ex as addressed_value,fe.expr,fe.format1,fe.format2,CurrentLocationSpan);
			}   
			else CurrentSemanticValue.ex = new indexer(ValueStack[ValueStack.Depth-4].ex as addressed_value,el, CurrentLocationSpan);
        }
        break;
      case 702: // variable -> variable, tkQuestionSquareOpen, format_expr, tkSquareClose
{
        	var fe = ValueStack[ValueStack.Depth-2].ex as format_expr; // SSM 9/01/17
            if (!parsertools.build_tree_for_formatter)
            {
                if (fe.expr == null)
                    fe.expr = new int32_const(int.MaxValue,LocationStack[LocationStack.Depth-2]);
                if (fe.format1 == null)
                    fe.format1 = new int32_const(int.MaxValue,LocationStack[LocationStack.Depth-2]);
            }
      		CurrentSemanticValue.ex = new slice_expr_question(ValueStack[ValueStack.Depth-4].ex as addressed_value,fe.expr,fe.format1,fe.format2,CurrentLocationSpan);
        }
        break;
      case 703: // variable -> variable, tkRoundOpen, optional_expr_list, tkRoundClose
{
			CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-4].ex as addressed_value,ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
        }
        break;
      case 704: // variable -> variable, tkPoint, identifier_keyword_operatorname
{
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan);
        }
        break;
      case 705: // variable -> tuple, tkPoint, identifier_keyword_operatorname
{
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan);
        }
        break;
      case 706: // variable -> variable, tkDeref
{
			CurrentSemanticValue.ex = new roof_dereference(ValueStack[ValueStack.Depth-2].ex as addressed_value,CurrentLocationSpan);
        }
        break;
      case 707: // variable -> variable, tkAmpersend, template_type_params
{
			CurrentSemanticValue.ex = new ident_with_templateparams(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan);
        }
        break;
      case 708: // optional_expr_list -> expr_list
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 709: // optional_expr_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 710: // elem_list -> elem_list1
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 711: // elem_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 712: // elem_list1 -> elem
{ 
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 713: // elem_list1 -> elem_list1, tkComma, elem
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 714: // elem -> expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 715: // elem -> expr, tkDotDot, expr
{ CurrentSemanticValue.ex = new diapason_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); }
        break;
      case 716: // one_literal -> tkStringLiteral
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].stn as literal; }
        break;
      case 717: // one_literal -> tkAsciiChar
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].stn as literal; }
        break;
      case 718: // literal -> literal_list
{ 
			CurrentSemanticValue.ex = NewLiteral(ValueStack[ValueStack.Depth-1].stn as literal_const_line);
        }
        break;
      case 719: // literal -> tkFormatStringLiteral
{
            if (parsertools.build_tree_for_formatter)
   			{
                CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].stn as string_const;
            }
            else
            {
                CurrentSemanticValue.ex = NewFormatString(ValueStack[ValueStack.Depth-1].stn as string_const);
            }
        }
        break;
      case 720: // literal_list -> one_literal
{ 
			CurrentSemanticValue.stn = new literal_const_line(ValueStack[ValueStack.Depth-1].ex as literal, CurrentLocationSpan);
        }
        break;
      case 721: // literal_list -> literal_list, one_literal
{ 
        	var line = ValueStack[ValueStack.Depth-2].stn as literal_const_line;
            if (line.literals.Last() is string_const && ValueStack[ValueStack.Depth-1].ex is string_const)
            	parsertools.AddErrorFromResource("TWO_STRING_LITERALS_IN_SUCCESSION",LocationStack[LocationStack.Depth-1]);
			CurrentSemanticValue.stn = line.Add(ValueStack[ValueStack.Depth-1].ex as literal, CurrentLocationSpan);
        }
        break;
      case 722: // operator_name_ident -> tkOperator, overload_operator
{ 
			CurrentSemanticValue.ex = new operator_name_ident((ValueStack[ValueStack.Depth-1].op as op_type_node).text, (ValueStack[ValueStack.Depth-1].op as op_type_node).type, CurrentLocationSpan);
		}
        break;
      case 723: // optional_method_modificators -> tkSemiColon
{ 
			CurrentSemanticValue.stn = new procedure_attributes_list(new List<procedure_attribute>(),CurrentLocationSpan); 
		}
        break;
      case 724: // optional_method_modificators -> tkSemiColon, meth_modificators, tkSemiColon
{ 
			//parsertools.AddModifier((procedure_attributes_list)$2, proc_attribute.attr_overload); 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; 
		}
        break;
      case 725: // optional_method_modificators1 -> /* empty */
{ 
			CurrentSemanticValue.stn = new procedure_attributes_list(new List<procedure_attribute>(),CurrentLocationSpan); 
		}
        break;
      case 726: // optional_method_modificators1 -> tkSemiColon, meth_modificators
{ 
			//parsertools.AddModifier((procedure_attributes_list)$2, proc_attribute.attr_overload); 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 727: // meth_modificators -> meth_modificator
{ 
			CurrentSemanticValue.stn = new procedure_attributes_list(ValueStack[ValueStack.Depth-1].id as procedure_attribute, CurrentLocationSpan); 
		}
        break;
      case 728: // meth_modificators -> meth_modificators, tkSemiColon, meth_modificator
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as procedure_attributes_list).Add(ValueStack[ValueStack.Depth-1].id as procedure_attribute, CurrentLocationSpan);  
		}
        break;
      case 729: // identifier -> tkIdentifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 730: // identifier -> property_specifier_directives
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 731: // identifier -> non_reserved
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 732: // identifier_or_keyword -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 733: // identifier_or_keyword -> keyword
{ CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); }
        break;
      case 734: // identifier_or_keyword -> reserved_keyword
{ CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); }
        break;
      case 735: // identifier_keyword_operatorname -> identifier
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 736: // identifier_keyword_operatorname -> keyword
{ CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].ti.text, CurrentLocationSpan); }
        break;
      case 737: // identifier_keyword_operatorname -> operator_name_ident
{ CurrentSemanticValue.id = (ident)ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 738: // meth_modificator -> tkAbstract
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 739: // meth_modificator -> tkOverload
{ 
            CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id;
            parsertools.AddWarningFromResource("OVERLOAD_IS_NOT_USED", ValueStack[ValueStack.Depth-1].id.source_context);
        }
        break;
      case 740: // meth_modificator -> tkReintroduce
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 741: // meth_modificator -> tkOverride
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 742: // meth_modificator -> tkExtensionMethod
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 743: // meth_modificator -> tkVirtual
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 744: // property_modificator -> tkVirtual
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 745: // property_modificator -> tkOverride
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 746: // property_modificator -> tkAbstract
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 747: // property_specifier_directives -> tkRead
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 748: // property_specifier_directives -> tkWrite
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 749: // non_reserved -> tkName
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 750: // non_reserved -> tkNew
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 751: // visibility_specifier -> tkInternal
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 752: // visibility_specifier -> tkPublic
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 753: // visibility_specifier -> tkProtected
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 754: // visibility_specifier -> tkPrivate
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 755: // keyword -> visibility_specifier
{ 
			CurrentSemanticValue.ti = new token_info(ValueStack[ValueStack.Depth-1].id.name, CurrentLocationSpan);  
		}
        break;
      case 756: // keyword -> tkSealed
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 757: // keyword -> tkTemplate
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 758: // keyword -> tkOr
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 759: // keyword -> tkTypeOf
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 760: // keyword -> tkSizeOf
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 761: // keyword -> tkDefault
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 762: // keyword -> tkWhere
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 763: // keyword -> tkXor
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 764: // keyword -> tkAnd
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 765: // keyword -> tkDiv
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 766: // keyword -> tkMod
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 767: // keyword -> tkShl
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 768: // keyword -> tkShr
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 769: // keyword -> tkNot
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 770: // keyword -> tkAs
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 771: // keyword -> tkIn
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 772: // keyword -> tkIs
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 773: // keyword -> tkArray
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 774: // keyword -> tkSequence
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 775: // keyword -> tkBegin
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 776: // keyword -> tkCase
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 777: // keyword -> tkClass
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 778: // keyword -> tkConst
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 779: // keyword -> tkConstructor
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 780: // keyword -> tkDestructor
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 781: // keyword -> tkDownto
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 782: // keyword -> tkDo
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 783: // keyword -> tkElse
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 784: // keyword -> tkExcept
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 785: // keyword -> tkFile
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 786: // keyword -> tkAuto
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 787: // keyword -> tkFinalization
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 788: // keyword -> tkFinally
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 789: // keyword -> tkFor
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 790: // keyword -> tkForeach
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 791: // keyword -> tkFunction
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 792: // keyword -> tkIf
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 793: // keyword -> tkImplementation
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 794: // keyword -> tkInherited
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 795: // keyword -> tkInitialization
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 796: // keyword -> tkInterface
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 797: // keyword -> tkProcedure
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 798: // keyword -> tkProperty
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 799: // keyword -> tkRaise
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 800: // keyword -> tkRecord
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 801: // keyword -> tkRepeat
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 802: // keyword -> tkSet
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 803: // keyword -> tkTry
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 804: // keyword -> tkType
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 805: // keyword -> tkStatic
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 806: // keyword -> tkThen
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 807: // keyword -> tkTo
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 808: // keyword -> tkUntil
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 809: // keyword -> tkUses
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 810: // keyword -> tkVar
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 811: // keyword -> tkWhile
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 812: // keyword -> tkWith
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 813: // keyword -> tkNil
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 814: // keyword -> tkGoto
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 815: // keyword -> tkOf
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 816: // keyword -> tkLabel
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 817: // keyword -> tkProgram
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 818: // keyword -> tkUnit
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 819: // keyword -> tkLibrary
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 820: // keyword -> tkNamespace
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 821: // keyword -> tkExternal
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 822: // keyword -> tkParams
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 823: // keyword -> tkEvent
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 824: // keyword -> tkYield
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 825: // keyword -> tkMatch
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 826: // keyword -> tkWhen
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 827: // reserved_keyword -> tkOperator
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 828: // reserved_keyword -> tkEnd
{ CurrentSemanticValue.ti = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 829: // overload_operator -> tkMinus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 830: // overload_operator -> tkPlus
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 831: // overload_operator -> tkSlash
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 832: // overload_operator -> tkStar
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 833: // overload_operator -> tkEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 834: // overload_operator -> tkGreater
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 835: // overload_operator -> tkGreaterEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 836: // overload_operator -> tkLower
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 837: // overload_operator -> tkLowerEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 838: // overload_operator -> tkNotEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 839: // overload_operator -> tkOr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 840: // overload_operator -> tkXor
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 841: // overload_operator -> tkAnd
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 842: // overload_operator -> tkDiv
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 843: // overload_operator -> tkMod
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 844: // overload_operator -> tkShl
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 845: // overload_operator -> tkShr
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 846: // overload_operator -> tkNot
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 847: // overload_operator -> tkIn
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 848: // overload_operator -> tkImplicit
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 849: // overload_operator -> tkExplicit
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 850: // overload_operator -> assign_operator
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 851: // overload_operator -> tkStarStar
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 852: // assign_operator -> tkAssign
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 853: // assign_operator -> tkPlusEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 854: // assign_operator -> tkMinusEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 855: // assign_operator -> tkMultEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 856: // assign_operator -> tkDivEqual
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 857: // func_decl_lambda -> identifier, tkArrow, lambda_function_body
{
			var idList = new ident_list(ValueStack[ValueStack.Depth-3].id, LocationStack[LocationStack.Depth-3]); 
			var formalPars = new formal_parameters(new typed_parameters(idList, new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), LocationStack[LocationStack.Depth-3]), parametr_kind.none, null, LocationStack[LocationStack.Depth-3]), LocationStack[LocationStack.Depth-3]);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), LocationStack[LocationStack.Depth-3]), ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 858: // func_decl_lambda -> tkRoundOpen, tkRoundClose, lambda_type_ref_noproctype, 
                //                     tkArrow, lambda_function_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 859: // func_decl_lambda -> tkRoundOpen, identifier, tkColon, fptype, tkRoundClose, 
                //                     lambda_type_ref_noproctype, tkArrow, lambda_function_body
{
			var idList = new ident_list(ValueStack[ValueStack.Depth-7].id, LocationStack[LocationStack.Depth-7]); 
            var loc = LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5]);
			var formalPars = new formal_parameters(new typed_parameters(idList, ValueStack[ValueStack.Depth-5].td, parametr_kind.none, null, loc), loc);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 860: // func_decl_lambda -> tkRoundOpen, identifier, tkSemiColon, full_lambda_fp_list, 
                //                     tkRoundClose, lambda_type_ref_noproctype, tkArrow, 
                //                     lambda_function_body
{
			var idList = new ident_list(ValueStack[ValueStack.Depth-7].id, LocationStack[LocationStack.Depth-7]);
			var formalPars = new formal_parameters(new typed_parameters(idList, new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null), parametr_kind.none, null, LocationStack[LocationStack.Depth-7]), LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5]));
			for (int i = 0; i < (ValueStack[ValueStack.Depth-5].stn as formal_parameters).Count; i++)
				formalPars.Add((ValueStack[ValueStack.Depth-5].stn as formal_parameters).params_list[i]);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 861: // func_decl_lambda -> tkRoundOpen, identifier, tkColon, fptype, tkSemiColon, 
                //                     full_lambda_fp_list, tkRoundClose, 
                //                     lambda_type_ref_noproctype, tkArrow, lambda_function_body
{
			var idList = new ident_list(ValueStack[ValueStack.Depth-9].id, LocationStack[LocationStack.Depth-9]);
            var loc = LexLocation.MergeAll(LocationStack[LocationStack.Depth-9],LocationStack[LocationStack.Depth-8],LocationStack[LocationStack.Depth-7]);
			var formalPars = new formal_parameters(new typed_parameters(idList, ValueStack[ValueStack.Depth-7].td, parametr_kind.none, null, loc), LexLocation.MergeAll(LocationStack[LocationStack.Depth-9],LocationStack[LocationStack.Depth-8],LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5]));
			for (int i = 0; i < (ValueStack[ValueStack.Depth-5].stn as formal_parameters).Count; i++)
				formalPars.Add((ValueStack[ValueStack.Depth-5].stn as formal_parameters).params_list[i]);
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, CurrentLocationSpan);
		}
        break;
      case 862: // func_decl_lambda -> tkRoundOpen, expr_l1, tkComma, expr_l1_list, 
                //                     lambda_type_ref, optional_full_lambda_fp_list, 
                //                     tkRoundClose, rem_lambda
{ 
			var pair = ValueStack[ValueStack.Depth-1].ob as pair_type_stlist;
			
			if (ValueStack[ValueStack.Depth-4].td is lambda_inferred_type)
			{
				var formal_pars = new formal_parameters();
				var idd = ValueStack[ValueStack.Depth-7].ex as ident;
				if (idd==null)
					parsertools.AddErrorFromResource("ONE_TKIDENTIFIER",LocationStack[LocationStack.Depth-7]);
				var lambda_inf_type = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
				var new_typed_pars = new typed_parameters(new ident_list(idd, idd.source_context), lambda_inf_type, parametr_kind.none, null, idd.source_context);
				formal_pars.Add(new_typed_pars);
				foreach (var id in (ValueStack[ValueStack.Depth-5].stn as expression_list).expressions)
				{
					var idd1 = id as ident;
					if (idd1==null)
						parsertools.AddErrorFromResource("ONE_TKIDENTIFIER",id.source_context);
					
					lambda_inf_type = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
					new_typed_pars = new typed_parameters(new ident_list(idd1, idd1.source_context), lambda_inf_type, parametr_kind.none, null, idd1.source_context);
					formal_pars.Add(new_typed_pars);
				}
				
				if (ValueStack[ValueStack.Depth-3].stn != null)
					for (int i = 0; i < (ValueStack[ValueStack.Depth-3].stn as formal_parameters).Count; i++)
						formal_pars.Add((ValueStack[ValueStack.Depth-3].stn as formal_parameters).params_list[i]);		
					
				formal_pars.source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5],LocationStack[LocationStack.Depth-4]);
				CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formal_pars, pair.tn, pair.exprs, CurrentLocationSpan);
			}
			else
			{			
				var loc = LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5]);
				var idd = ValueStack[ValueStack.Depth-7].ex as ident;
				if (idd==null)
					parsertools.AddErrorFromResource("ONE_TKIDENTIFIER",LocationStack[LocationStack.Depth-7]);
				
				var idList = new ident_list(idd, loc);
				
				var iddlist = (ValueStack[ValueStack.Depth-5].stn as expression_list).expressions;
				
				for (int j = 0; j < iddlist.Count; j++)
				{
					var idd2 = iddlist[j] as ident;
					if (idd2==null)
						parsertools.AddErrorFromResource("ONE_TKIDENTIFIER",idd2.source_context);
					idList.Add(idd2);
				}	
				var parsType = ValueStack[ValueStack.Depth-4].td;
				var formalPars = new formal_parameters(new typed_parameters(idList, parsType, parametr_kind.none, null, loc), LexLocation.MergeAll(LocationStack[LocationStack.Depth-7],LocationStack[LocationStack.Depth-6],LocationStack[LocationStack.Depth-5],LocationStack[LocationStack.Depth-4],LocationStack[LocationStack.Depth-3]));
				
				if (ValueStack[ValueStack.Depth-3].stn != null)
					for (int i = 0; i < (ValueStack[ValueStack.Depth-3].stn as formal_parameters).Count; i++)
						formalPars.Add((ValueStack[ValueStack.Depth-3].stn as formal_parameters).params_list[i]);
					
				CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), formalPars, pair.tn, pair.exprs, CurrentLocationSpan);
			}
		}
        break;
      case 863: // func_decl_lambda -> expl_func_decl_lambda
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 864: // optional_full_lambda_fp_list -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 865: // optional_full_lambda_fp_list -> tkSemiColon, full_lambda_fp_list
{
		CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
	}
        break;
      case 866: // rem_lambda -> lambda_type_ref_noproctype, tkArrow, lambda_function_body
{ 
		    CurrentSemanticValue.ob = new pair_type_stlist(ValueStack[ValueStack.Depth-3].td,ValueStack[ValueStack.Depth-1].stn as statement_list);
		}
        break;
      case 867: // expl_func_decl_lambda -> tkFunction, lambda_type_ref, tkArrow, 
                //                          lambda_function_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, 1, CurrentLocationSpan);
		}
        break;
      case 868: // expl_func_decl_lambda -> tkFunction, tkRoundOpen, tkRoundClose, lambda_type_ref, 
                //                          tkArrow, lambda_function_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, 1, CurrentLocationSpan);
		}
        break;
      case 869: // expl_func_decl_lambda -> tkFunction, tkRoundOpen, full_lambda_fp_list, 
                //                          tkRoundClose, lambda_type_ref, tkArrow, 
                //                          lambda_function_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), ValueStack[ValueStack.Depth-5].stn as formal_parameters, ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].stn as statement_list, 1, CurrentLocationSpan);
		}
        break;
      case 870: // expl_func_decl_lambda -> tkProcedure, tkArrow, lambda_procedure_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, null, ValueStack[ValueStack.Depth-1].stn as statement_list, 2, CurrentLocationSpan);
		}
        break;
      case 871: // expl_func_decl_lambda -> tkProcedure, tkRoundOpen, tkRoundClose, tkArrow, 
                //                          lambda_procedure_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), null, null, ValueStack[ValueStack.Depth-1].stn as statement_list, 2, CurrentLocationSpan);
		}
        break;
      case 872: // expl_func_decl_lambda -> tkProcedure, tkRoundOpen, full_lambda_fp_list, 
                //                          tkRoundClose, tkArrow, lambda_procedure_body
{
			CurrentSemanticValue.ex = new function_lambda_definition(lambdaHelper.CreateLambdaName(), ValueStack[ValueStack.Depth-4].stn as formal_parameters, null, ValueStack[ValueStack.Depth-1].stn as statement_list, 2, CurrentLocationSpan);
		}
        break;
      case 873: // full_lambda_fp_list -> lambda_simple_fp_sect
{
			var typed_pars = ValueStack[ValueStack.Depth-1].stn as typed_parameters;
			if (typed_pars.vars_type is lambda_inferred_type)
			{
				CurrentSemanticValue.stn = new formal_parameters();
				foreach (var id in typed_pars.idents.idents)
				{
					var lambda_inf_type = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
					var new_typed_pars = new typed_parameters(new ident_list(id, id.source_context), lambda_inf_type, parametr_kind.none, null, id.source_context);
					(CurrentSemanticValue.stn as formal_parameters).Add(new_typed_pars);
				}
				CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
			}
			else
			{
				CurrentSemanticValue.stn = new formal_parameters(typed_pars, CurrentLocationSpan);
			}
		}
        break;
      case 874: // full_lambda_fp_list -> full_lambda_fp_list, tkSemiColon, lambda_simple_fp_sect
{
			CurrentSemanticValue.stn =(ValueStack[ValueStack.Depth-3].stn as formal_parameters).Add(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
		}
        break;
      case 875: // lambda_simple_fp_sect -> ident_list, lambda_type_ref
{
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-2].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.none, null, CurrentLocationSpan);
		}
        break;
      case 876: // lambda_type_ref -> /* empty */
{
			CurrentSemanticValue.td = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
		}
        break;
      case 877: // lambda_type_ref -> tkColon, fptype
{
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
		}
        break;
      case 878: // lambda_type_ref_noproctype -> /* empty */
{
			CurrentSemanticValue.td = new lambda_inferred_type(new PascalABCCompiler.TreeRealization.lambda_any_type_node(), null);
		}
        break;
      case 879: // lambda_type_ref_noproctype -> tkColon, fptype_noproctype
{
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td;
		}
        break;
      case 880: // common_lambda_body -> compound_stmt
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 881: // common_lambda_body -> if_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 882: // common_lambda_body -> while_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 883: // common_lambda_body -> repeat_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 884: // common_lambda_body -> for_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 885: // common_lambda_body -> foreach_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 886: // common_lambda_body -> loop_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 887: // common_lambda_body -> case_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 888: // common_lambda_body -> try_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 889: // common_lambda_body -> lock_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 890: // common_lambda_body -> yield_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 891: // common_lambda_body -> raise_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 892: // lambda_function_body -> expr_l1
{
			//$$ = NewLambdaBody($1, @$);
			var sl = new statement_list(new assign("result",ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan),CurrentLocationSpan); // ���� �������� ��� � assign ��� ������������������� ��� ������
			sl.expr_lambda_body = true;
			CurrentSemanticValue.stn = sl;
		}
        break;
      case 893: // lambda_function_body -> common_lambda_body
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 894: // lambda_procedure_body -> proc_call
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 895: // lambda_procedure_body -> assignment
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 896: // lambda_procedure_body -> common_lambda_body
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
