var d : Decimal;
    b : byte;
    sh : shortint;
    sm : smallint;
    w : word;
    lw : longword;
    i : integer;
    li : int64;
    ui : uint64;
    arr : array of decimal := (integer.MaxValue,uint64.MaxValue,0);
    set1 : set of decimal;
    
begin
d := new decimal(uint64.MaxValue);
d := d - 1000;
assert(d=uint64.MaxValue-1000);
d := new decimal(10000);
d := d + integer.MaxValue;
assert(d=int64(integer.MaxValue)+10000);
d := new decimal(5000);
d := d * longword.MaxValue;
assert(d = 5000*int64(longword.MaxValue));
d := 1000; 
assert(d=1000);
b := 10;
d := b;
d := d + b;
assert(d=20);
sh := 10;
d := sh;
d := sh+d;
assert(d=20);
sm := 10;
d := sm;
d := d + sm;
assert(d=20);  
w := 10;
d := w;
d := d + w;
assert(d=20);
lw := 10;
d := lw;
d := d + lw;
assert(d=20);
i := 10;
d := i;
d := d + i;
assert(d=20);
li := 10;
d := li;
d := d + li;
assert(d=20);
ui := 10;
d := ui;
d := d + ui;
assert(d=20);
var d1 : decimal := 20;
var d2 : decimal := 30;
assert(d1*d2 = 600);
assert(d1+d2 = 50);
assert(d1-d2 = -10);
assert(d2/d1 = 1.5);
assert(d2 mod d1 = 10);
assert(d1<d2);
assert(d1<=d2);
assert(d2>d1);
assert(d2>=d1);
assert(d1<>d2);
assert(d1=d1);
assert(d1>10);
assert(d1<30);

d1 := 2.3;
assert(d1 = 2.3);
d1 := d1 + 4.2;
assert(d1=6.5);
assert(d1>5.3);

assert(arr[0]=integer.MaxValue);
d1 := integer.MaxValue;
d2 := int64.MaxValue;
set1 := [d1,d2];
//assert(integer.MaxValue in set1);
//assert(int64.MaxValue in set1);
var x : set of byte;
var b2 : byte:=5;
Include(x,b2);
assert(5 in x);
assert(x*[5]=[5])
end.